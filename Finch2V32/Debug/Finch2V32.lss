
Finch2V32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003790  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00003790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008cc  20000020  000037b0  00020018  2**4
                  ALLOC
  3 .stack        00000404  200008ec  0000407c  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   00061453  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000072ca  00000000  00000000  000814ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a537  00000000  00000000  000887b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009a8  00000000  00000000  00092ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000da0  00000000  00000000  00093695  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c649  00000000  00000000  00094435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ab99  00000000  00000000  000a0a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000733d7  00000000  00000000  000bb617  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001724  00000000  00000000  0012e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 0c 00 20 39 29 00 00 09 2a 00 00 09 2a 00 00     ... 9)...*...*..
	...
      2c:	09 2a 00 00 00 00 00 00 00 00 00 00 09 2a 00 00     .*...........*..
      3c:	09 2a 00 00 09 2a 00 00 09 2a 00 00 09 2a 00 00     .*...*...*...*..
      4c:	09 2a 00 00 79 0e 00 00 09 2a 00 00 a1 0a 00 00     .*..y....*......
      5c:	00 00 00 00 09 2a 00 00 cd 11 00 00 dd 11 00 00     .....*..........
      6c:	ed 11 00 00 99 1b 00 00 41 1c 00 00 51 1c 00 00     ........A...Q...
      7c:	e1 09 00 00 09 2a 00 00 09 2a 00 00 09 2a 00 00     .....*...*...*..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00003790 	.word	0x00003790

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00003790 	.word	0x00003790
      e4:	00003790 	.word	0x00003790
      e8:	00000000 	.word	0x00000000

000000ec <initInterruptHandler>:
#include <asf.h>
#define EIC_PRIORITY	0	
#define OTHER_PRIOROTY	1	

void initInterruptHandler()
{
      ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      ee:	46c6      	mov	lr, r8
      f0:	b500      	push	{lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
      f2:	4b24      	ldr	r3, [pc, #144]	; (184 <initInterruptHandler+0x98>)
      f4:	2210      	movs	r2, #16
      f6:	601a      	str	r2, [r3, #0]
      f8:	2740      	movs	r7, #64	; 0x40
      fa:	601f      	str	r7, [r3, #0]
      fc:	32f1      	adds	r2, #241	; 0xf1
      fe:	32ff      	adds	r2, #255	; 0xff
     100:	601a      	str	r2, [r3, #0]
     102:	2280      	movs	r2, #128	; 0x80
     104:	00d2      	lsls	r2, r2, #3
     106:	601a      	str	r2, [r3, #0]
     108:	2280      	movs	r2, #128	; 0x80
     10a:	0112      	lsls	r2, r2, #4
     10c:	601a      	str	r2, [r3, #0]
     10e:	2280      	movs	r2, #128	; 0x80
     110:	0152      	lsls	r2, r2, #5
     112:	601a      	str	r2, [r3, #0]
     114:	2280      	movs	r2, #128	; 0x80
     116:	0192      	lsls	r2, r2, #6
     118:	601a      	str	r2, [r3, #0]
     11a:	2180      	movs	r1, #128	; 0x80
     11c:	01c9      	lsls	r1, r1, #7
     11e:	6019      	str	r1, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     120:	20c1      	movs	r0, #193	; 0xc1
     122:	0080      	lsls	r0, r0, #2
     124:	581a      	ldr	r2, [r3, r0]
     126:	24ff      	movs	r4, #255	; 0xff
     128:	46a4      	mov	ip, r4
     12a:	43a2      	bics	r2, r4
     12c:	501a      	str	r2, [r3, r0]
     12e:	581a      	ldr	r2, [r3, r0]
     130:	4c15      	ldr	r4, [pc, #84]	; (188 <initInterruptHandler+0x9c>)
     132:	46a0      	mov	r8, r4
     134:	4022      	ands	r2, r4
     136:	2480      	movs	r4, #128	; 0x80
     138:	03e4      	lsls	r4, r4, #15
     13a:	4322      	orrs	r2, r4
     13c:	501a      	str	r2, [r3, r0]
     13e:	22c2      	movs	r2, #194	; 0xc2
     140:	0092      	lsls	r2, r2, #2
     142:	5898      	ldr	r0, [r3, r2]
     144:	4d11      	ldr	r5, [pc, #68]	; (18c <initInterruptHandler+0xa0>)
     146:	4028      	ands	r0, r5
     148:	4308      	orrs	r0, r1
     14a:	5098      	str	r0, [r3, r2]
     14c:	589e      	ldr	r6, [r3, r2]
     14e:	4640      	mov	r0, r8
     150:	4006      	ands	r6, r0
     152:	4326      	orrs	r6, r4
     154:	509e      	str	r6, [r3, r2]
     156:	5898      	ldr	r0, [r3, r2]
     158:	4646      	mov	r6, r8
     15a:	4030      	ands	r0, r6
     15c:	4304      	orrs	r4, r0
     15e:	509c      	str	r4, [r3, r2]
     160:	3204      	adds	r2, #4
     162:	5898      	ldr	r0, [r3, r2]
     164:	4664      	mov	r4, ip
     166:	43a0      	bics	r0, r4
     168:	4338      	orrs	r0, r7
     16a:	5098      	str	r0, [r3, r2]
     16c:	5898      	ldr	r0, [r3, r2]
     16e:	4028      	ands	r0, r5
     170:	4308      	orrs	r0, r1
     172:	5098      	str	r0, [r3, r2]
     174:	5898      	ldr	r0, [r3, r2]
     176:	4005      	ands	r5, r0
     178:	4329      	orrs	r1, r5
     17a:	5099      	str	r1, [r3, r2]
	NVIC_SetPriority(SERCOM1_IRQn, OTHER_PRIOROTY);
	NVIC_SetPriority(TCC0_IRQn, OTHER_PRIOROTY);
	NVIC_SetPriority(TC1_IRQn,OTHER_PRIOROTY);
	NVIC_SetPriority(TC1_IRQn, OTHER_PRIOROTY);
	//Change the priority levels
     17c:	bc04      	pop	{r2}
     17e:	4690      	mov	r8, r2
     180:	bdf0      	pop	{r4, r5, r6, r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	e000e100 	.word	0xe000e100
     188:	ff00ffff 	.word	0xff00ffff
     18c:	ffff00ff 	.word	0xffff00ff

00000190 <filterUltrasound>:

extern volatile uint16_t gleftTicks;
extern volatile uint16_t grightTicks;

void filterUltrasound(uint16_t inputValue )
{
     190:	b510      	push	{r4, lr}
	static uint16_t filteredValue = 0;  
	static uint8_t  thresholdMissCount = 0;
	static bool		firstTime = false;
	if(firstTime == true)
     192:	4b14      	ldr	r3, [pc, #80]	; (1e4 <filterUltrasound+0x54>)
     194:	781b      	ldrb	r3, [r3, #0]
     196:	2b00      	cmp	r3, #0
     198:	d10f      	bne.n	1ba <filterUltrasound+0x2a>
		firstTime     = false;
	}
	
	else
	{
		if(abs(inputValue - filteredValue) < NOISETHRESHOLD)
     19a:	4b13      	ldr	r3, [pc, #76]	; (1e8 <filterUltrasound+0x58>)
     19c:	881a      	ldrh	r2, [r3, #0]
     19e:	1a83      	subs	r3, r0, r2
     1a0:	3309      	adds	r3, #9
     1a2:	2b12      	cmp	r3, #18
     1a4:	d90f      	bls.n	1c6 <filterUltrasound+0x36>
			filteredValue =  (filteredValue*9  +  inputValue)/10;
			thresholdMissCount = 0;
		}
		else
		{
			thresholdMissCount++;
     1a6:	4b11      	ldr	r3, [pc, #68]	; (1ec <filterUltrasound+0x5c>)
     1a8:	781b      	ldrb	r3, [r3, #0]
     1aa:	3301      	adds	r3, #1
     1ac:	b2db      	uxtb	r3, r3
			if(thresholdMissCount > THRESHOLDMISSMAX)
     1ae:	2b03      	cmp	r3, #3
     1b0:	d915      	bls.n	1de <filterUltrasound+0x4e>
			{
				thresholdMissCount = 0;
     1b2:	2200      	movs	r2, #0
     1b4:	4b0d      	ldr	r3, [pc, #52]	; (1ec <filterUltrasound+0x5c>)
     1b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	
}
     1b8:	e004      	b.n	1c4 <filterUltrasound+0x34>
		filteredValue = inputValue ;
     1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <filterUltrasound+0x58>)
     1bc:	8018      	strh	r0, [r3, #0]
		firstTime     = false;
     1be:	2200      	movs	r2, #0
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <filterUltrasound+0x54>)
     1c2:	701a      	strb	r2, [r3, #0]
}
     1c4:	bd10      	pop	{r4, pc}
			filteredValue =  (filteredValue*9  +  inputValue)/10;
     1c6:	00d3      	lsls	r3, r2, #3
     1c8:	189a      	adds	r2, r3, r2
     1ca:	1810      	adds	r0, r2, r0
     1cc:	210a      	movs	r1, #10
     1ce:	4b08      	ldr	r3, [pc, #32]	; (1f0 <filterUltrasound+0x60>)
     1d0:	4798      	blx	r3
     1d2:	4b05      	ldr	r3, [pc, #20]	; (1e8 <filterUltrasound+0x58>)
     1d4:	8018      	strh	r0, [r3, #0]
			thresholdMissCount = 0;
     1d6:	2200      	movs	r2, #0
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <filterUltrasound+0x5c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	e7f2      	b.n	1c4 <filterUltrasound+0x34>
			thresholdMissCount++;
     1de:	4a03      	ldr	r2, [pc, #12]	; (1ec <filterUltrasound+0x5c>)
     1e0:	7013      	strb	r3, [r2, #0]
     1e2:	e7ef      	b.n	1c4 <filterUltrasound+0x34>
     1e4:	2000003e 	.word	0x2000003e
     1e8:	2000003c 	.word	0x2000003c
     1ec:	20000040 	.word	0x20000040
     1f0:	0000349d 	.word	0x0000349d

000001f4 <readSensors>:

void readSensors()
{
     1f4:	b510      	push	{r4, lr}
	uint16_t ultrasoundValue =0;
	uint8_t  lineSensorValue = 0;
	uint8_t  batteryVoltage = 0;
	static uint8_t sensorUpdateCount	= 0;
	
	ultrasoundValue = getUltrasoundDistance();
     1f6:	4b17      	ldr	r3, [pc, #92]	; (254 <readSensors+0x60>)
     1f8:	4798      	blx	r3
	filterUltrasound(ultrasoundValue);
     1fa:	4b17      	ldr	r3, [pc, #92]	; (258 <readSensors+0x64>)
     1fc:	4798      	blx	r3
	
	
	sensorUpdateCount++;
     1fe:	4b17      	ldr	r3, [pc, #92]	; (25c <readSensors+0x68>)
     200:	781b      	ldrb	r3, [r3, #0]
     202:	3301      	adds	r3, #1
     204:	b2db      	uxtb	r3, r3
	
	if(sensorUpdateCount > SENSORCOUNTTHRESHOLD)
     206:	2b0a      	cmp	r3, #10
     208:	d920      	bls.n	24c <readSensors+0x58>
		
		
		//lineSensorValue   = readLineSensors();
		//batteryVoltage    = readBatteryValue();
		
		sensorUpdateCount = 0;
     20a:	2200      	movs	r2, #0
     20c:	4b13      	ldr	r3, [pc, #76]	; (25c <readSensors+0x68>)
     20e:	701a      	strb	r2, [r3, #0]
		//kpTerm = kpTerm * 10;
		//kdTerm = kdTerm * 10;
		//kiTerm = kiTerm * 10;
		
		// 
		sensor_outputs[4] = (kpTerm  & 0xFF00) >>8;
     210:	4913      	ldr	r1, [pc, #76]	; (260 <readSensors+0x6c>)
     212:	880a      	ldrh	r2, [r1, #0]
     214:	0a12      	lsrs	r2, r2, #8
     216:	4b13      	ldr	r3, [pc, #76]	; (264 <readSensors+0x70>)
     218:	711a      	strb	r2, [r3, #4]
		sensor_outputs[5] =  kpTerm  &  0x00FF;
     21a:	880a      	ldrh	r2, [r1, #0]
     21c:	b2d2      	uxtb	r2, r2
     21e:	715a      	strb	r2, [r3, #5]
		
		//sensor_outputs[4] = kSpeed; 
		
		sensor_outputs[6] = (kiTerm  & 0xFF00) >>8;
     220:	4911      	ldr	r1, [pc, #68]	; (268 <readSensors+0x74>)
     222:	880a      	ldrh	r2, [r1, #0]
     224:	0a12      	lsrs	r2, r2, #8
     226:	719a      	strb	r2, [r3, #6]
		sensor_outputs[7] =  kiTerm   &  0x00FF;
     228:	880a      	ldrh	r2, [r1, #0]
     22a:	b2d2      	uxtb	r2, r2
     22c:	71da      	strb	r2, [r3, #7]
		
		sensor_outputs[8] = (kdTerm  & 0xFF00) >>8;
     22e:	490f      	ldr	r1, [pc, #60]	; (26c <readSensors+0x78>)
     230:	880a      	ldrh	r2, [r1, #0]
     232:	0a12      	lsrs	r2, r2, #8
     234:	721a      	strb	r2, [r3, #8]
		sensor_outputs[9] =  kdTerm   &  0x00FF;
     236:	880a      	ldrh	r2, [r1, #0]
     238:	b2d2      	uxtb	r2, r2
     23a:	725a      	strb	r2, [r3, #9]
		
		
		sensor_outputs[2] = (gleftTicks  & 0xFF00) >>8;
     23c:	490c      	ldr	r1, [pc, #48]	; (270 <readSensors+0x7c>)
     23e:	880a      	ldrh	r2, [r1, #0]
     240:	0a12      	lsrs	r2, r2, #8
     242:	709a      	strb	r2, [r3, #2]
		sensor_outputs[3] =  gleftTicks   &  0x00FF;
     244:	880a      	ldrh	r2, [r1, #0]
     246:	b2d2      	uxtb	r2, r2
     248:	70da      	strb	r2, [r3, #3]
		*/
		
		//sensor_outputs[9] =  batteryVoltage;
		
	}
     24a:	bd10      	pop	{r4, pc}
	sensorUpdateCount++;
     24c:	4a03      	ldr	r2, [pc, #12]	; (25c <readSensors+0x68>)
     24e:	7013      	strb	r3, [r2, #0]
     250:	e7fb      	b.n	24a <readSensors+0x56>
     252:	46c0      	nop			; (mov r8, r8)
     254:	00000685 	.word	0x00000685
     258:	00000191 	.word	0x00000191
     25c:	2000003f 	.word	0x2000003f
     260:	20000196 	.word	0x20000196
     264:	200008b0 	.word	0x200008b0
     268:	20000194 	.word	0x20000194
     26c:	20000192 	.word	0x20000192
     270:	2000018e 	.word	0x2000018e

00000274 <configure_spi_slave>:
/********************************************************************************************
SPI transfer Mode 0
Pre-load is important it helps during a reset to have the sensor 0 and sensor 1 value loaded
********************************************************************************************/
void configure_spi_slave(void)
{
     274:	b570      	push	{r4, r5, r6, lr}
     276:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     278:	2400      	movs	r4, #0
     27a:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     27c:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     27e:	23c0      	movs	r3, #192	; 0xc0
     280:	039b      	lsls	r3, r3, #14
     282:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     284:	466b      	mov	r3, sp
     286:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     288:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     28a:	2501      	movs	r5, #1
     28c:	749d      	strb	r5, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     28e:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     290:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     292:	2324      	movs	r3, #36	; 0x24
     294:	466a      	mov	r2, sp
     296:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     298:	220c      	movs	r2, #12
     29a:	2100      	movs	r1, #0
     29c:	a806      	add	r0, sp, #24
     29e:	4b14      	ldr	r3, [pc, #80]	; (2f0 <configure_spi_slave+0x7c>)
     2a0:	4798      	blx	r3
	struct spi_config config_spi_slave;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_slave);
	config_spi_slave.transfer_mode = SPI_TRANSFER_MODE_0;
	config_spi_slave.mode = SPI_MODE_SLAVE;
     2a2:	466b      	mov	r3, sp
     2a4:	701c      	strb	r4, [r3, #0]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     2a6:	2320      	movs	r3, #32
     2a8:	466a      	mov	r2, sp
     2aa:	54d5      	strb	r5, [r2, r3]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     2ac:	9406      	str	r4, [sp, #24]
	config_spi_slave.mux_setting = SPI_SLAVE_MUX_SETTING;
	config_spi_slave.pinmux_pad0 = SPI_SLAVE_PINMUX_PAD0;
     2ae:	4b11      	ldr	r3, [pc, #68]	; (2f4 <configure_spi_slave+0x80>)
     2b0:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.pinmux_pad1 = SPI_SLAVE_PINMUX_PAD1;
     2b2:	4b11      	ldr	r3, [pc, #68]	; (2f8 <configure_spi_slave+0x84>)
     2b4:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad2 = SPI_SLAVE_PINMUX_PAD2;
     2b6:	4b11      	ldr	r3, [pc, #68]	; (2fc <configure_spi_slave+0x88>)
     2b8:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad3 = SPI_SLAVE_PINMUX_PAD3;
     2ba:	4b11      	ldr	r3, [pc, #68]	; (300 <configure_spi_slave+0x8c>)
     2bc:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_slave.receiver_enable  = true;
	spi_init(&spi_slave_instance,  SLAVE_SPI_MODULE, &config_spi_slave);
     2be:	4e11      	ldr	r6, [pc, #68]	; (304 <configure_spi_slave+0x90>)
     2c0:	4911      	ldr	r1, [pc, #68]	; (308 <configure_spi_slave+0x94>)
     2c2:	0030      	movs	r0, r6
     2c4:	4b11      	ldr	r3, [pc, #68]	; (30c <configure_spi_slave+0x98>)
     2c6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2c8:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2ca:	0020      	movs	r0, r4
     2cc:	4b10      	ldr	r3, [pc, #64]	; (310 <configure_spi_slave+0x9c>)
     2ce:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2d0:	231f      	movs	r3, #31
     2d2:	4018      	ands	r0, r3
     2d4:	4085      	lsls	r5, r0
     2d6:	4b0f      	ldr	r3, [pc, #60]	; (314 <configure_spi_slave+0xa0>)
     2d8:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2da:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     2dc:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     2de:	2b00      	cmp	r3, #0
     2e0:	d1fc      	bne.n	2dc <configure_spi_slave+0x68>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2e2:	6823      	ldr	r3, [r4, #0]
     2e4:	2202      	movs	r2, #2
     2e6:	4313      	orrs	r3, r2
     2e8:	6023      	str	r3, [r4, #0]
	spi_enable(&spi_slave_instance);
}
     2ea:	b00e      	add	sp, #56	; 0x38
     2ec:	bd70      	pop	{r4, r5, r6, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	000036cf 	.word	0x000036cf
     2f4:	00160003 	.word	0x00160003
     2f8:	00170003 	.word	0x00170003
     2fc:	00180003 	.word	0x00180003
     300:	00190003 	.word	0x00190003
     304:	200001b4 	.word	0x200001b4
     308:	42001000 	.word	0x42001000
     30c:	00001249 	.word	0x00001249
     310:	000011ad 	.word	0x000011ad
     314:	e000e100 	.word	0xe000e100

00000318 <check_buffer>:
/********************************************************************************************
Checks the ring buffer if there any new data in the buffer if it is present it will be
transferred into the temp_receive global variable and we also look into the length of commands
********************************************************************************************/
void check_buffer()
{
     318:	b510      	push	{r4, lr}
	uint8_t i =0;
	if(tail_pointer == head_pointer)
     31a:	4b1c      	ldr	r3, [pc, #112]	; (38c <check_buffer+0x74>)
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	4a1c      	ldr	r2, [pc, #112]	; (390 <check_buffer+0x78>)
     320:	7812      	ldrb	r2, [r2, #0]
     322:	b2db      	uxtb	r3, r3
     324:	4293      	cmp	r3, r2
     326:	d018      	beq.n	35a <check_buffer+0x42>
		head_pointer = 0;
	}
	else
	{
		//Transfer receive
		if(ring_buffer[tail_pointer] == SETALL_COMMAND )
     328:	4b18      	ldr	r3, [pc, #96]	; (38c <check_buffer+0x74>)
     32a:	781b      	ldrb	r3, [r3, #0]
     32c:	b2db      	uxtb	r3, r3
     32e:	4a19      	ldr	r2, [pc, #100]	; (394 <check_buffer+0x7c>)
     330:	5cd3      	ldrb	r3, [r2, r3]
     332:	b2db      	uxtb	r3, r3
     334:	2200      	movs	r2, #0
     336:	2bda      	cmp	r3, #218	; 0xda
     338:	d017      	beq.n	36a <check_buffer+0x52>
		}
		else
		{
			for(i=0; i<LENGTH_SINGLE;i++)
			{
				temp_receive[i] = ring_buffer[tail_pointer];
     33a:	4914      	ldr	r1, [pc, #80]	; (38c <check_buffer+0x74>)
     33c:	4c15      	ldr	r4, [pc, #84]	; (394 <check_buffer+0x7c>)
     33e:	4816      	ldr	r0, [pc, #88]	; (398 <check_buffer+0x80>)
     340:	780b      	ldrb	r3, [r1, #0]
     342:	b2db      	uxtb	r3, r3
     344:	5ce3      	ldrb	r3, [r4, r3]
     346:	b2db      	uxtb	r3, r3
     348:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
     34a:	780b      	ldrb	r3, [r1, #0]
     34c:	3301      	adds	r3, #1
     34e:	b2db      	uxtb	r3, r3
     350:	700b      	strb	r3, [r1, #0]
     352:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SINGLE;i++)
     354:	2a0a      	cmp	r2, #10
     356:	d1f3      	bne.n	340 <check_buffer+0x28>
			}
		}
	}

}
     358:	bd10      	pop	{r4, pc}
		transfer_complete_spi_slave = false;
     35a:	2300      	movs	r3, #0
     35c:	4a0f      	ldr	r2, [pc, #60]	; (39c <check_buffer+0x84>)
     35e:	7013      	strb	r3, [r2, #0]
		tail_pointer = 0;
     360:	4a0a      	ldr	r2, [pc, #40]	; (38c <check_buffer+0x74>)
     362:	7013      	strb	r3, [r2, #0]
		head_pointer = 0;
     364:	4a0a      	ldr	r2, [pc, #40]	; (390 <check_buffer+0x78>)
     366:	7013      	strb	r3, [r2, #0]
     368:	e7f6      	b.n	358 <check_buffer+0x40>
				temp_receive[i] = ring_buffer[tail_pointer];
     36a:	4908      	ldr	r1, [pc, #32]	; (38c <check_buffer+0x74>)
     36c:	4c09      	ldr	r4, [pc, #36]	; (394 <check_buffer+0x7c>)
     36e:	480a      	ldr	r0, [pc, #40]	; (398 <check_buffer+0x80>)
     370:	780b      	ldrb	r3, [r1, #0]
     372:	b2db      	uxtb	r3, r3
     374:	5ce3      	ldrb	r3, [r4, r3]
     376:	b2db      	uxtb	r3, r3
     378:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
     37a:	780b      	ldrb	r3, [r1, #0]
     37c:	3301      	adds	r3, #1
     37e:	b2db      	uxtb	r3, r3
     380:	700b      	strb	r3, [r1, #0]
     382:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
     384:	2a10      	cmp	r2, #16
     386:	d1f3      	bne.n	370 <check_buffer+0x58>
     388:	e7e6      	b.n	358 <check_buffer+0x40>
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	20000043 	.word	0x20000043
     390:	20000041 	.word	0x20000041
     394:	200001f0 	.word	0x200001f0
     398:	200008c4 	.word	0x200008c4
     39c:	200001af 	.word	0x200001af

000003a0 <configure_spi_slave_callbacks>:
}



void configure_spi_slave_callbacks(void)
{
     3a0:	b510      	push	{r4, lr}
	spi_register_callback(&spi_slave_instance, spi_slave_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
     3a2:	4c06      	ldr	r4, [pc, #24]	; (3bc <configure_spi_slave_callbacks+0x1c>)
     3a4:	2202      	movs	r2, #2
     3a6:	4906      	ldr	r1, [pc, #24]	; (3c0 <configure_spi_slave_callbacks+0x20>)
     3a8:	0020      	movs	r0, r4
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <configure_spi_slave_callbacks+0x24>)
     3ac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     3ae:	2237      	movs	r2, #55	; 0x37
     3b0:	5ca3      	ldrb	r3, [r4, r2]
     3b2:	2104      	movs	r1, #4
     3b4:	430b      	orrs	r3, r1
     3b6:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
     3b8:	bd10      	pop	{r4, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	200001b4 	.word	0x200001b4
     3c0:	0000046d 	.word	0x0000046d
     3c4:	0000145d 	.word	0x0000145d

000003c8 <disableSlaveSPI>:

void disableSlaveSPI()
{
     3c8:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3ca:	4d0c      	ldr	r5, [pc, #48]	; (3fc <disableSlaveSPI+0x34>)
     3cc:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     3ce:	0020      	movs	r0, r4
     3d0:	4b0b      	ldr	r3, [pc, #44]	; (400 <STACK_SIZE>)
     3d2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3d4:	231f      	movs	r3, #31
     3d6:	4018      	ands	r0, r3
     3d8:	3b1e      	subs	r3, #30
     3da:	4083      	lsls	r3, r0
     3dc:	2280      	movs	r2, #128	; 0x80
     3de:	4909      	ldr	r1, [pc, #36]	; (404 <STACK_SIZE+0x4>)
     3e0:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3e2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     3e4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     3e6:	2b00      	cmp	r3, #0
     3e8:	d1fc      	bne.n	3e4 <disableSlaveSPI+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     3ea:	338f      	adds	r3, #143	; 0x8f
     3ec:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     3ee:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     3f0:	6823      	ldr	r3, [r4, #0]
     3f2:	2202      	movs	r2, #2
     3f4:	4393      	bics	r3, r2
     3f6:	6023      	str	r3, [r4, #0]
	spi_disable(&spi_slave_instance);
}
     3f8:	bd70      	pop	{r4, r5, r6, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	200001b4 	.word	0x200001b4
     400:	000011ad 	.word	0x000011ad
     404:	e000e100 	.word	0xe000e100

00000408 <spi_slave_init>:


void spi_slave_init()
{
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b083      	sub	sp, #12
	volatile enum status_code error_code = 0x10;
     40c:	2210      	movs	r2, #16
     40e:	466b      	mov	r3, sp
     410:	71da      	strb	r2, [r3, #7]
	static bool init = false;
	const uint8_t firmware_version[10] = {DEVICE_ID_HARDWARE_FIRMWARE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	sensor_outputs[0]  = DEVICE_ID_HARDWARE_FIRMWARE;
     412:	3201      	adds	r2, #1
     414:	4b0e      	ldr	r3, [pc, #56]	; (450 <spi_slave_init+0x48>)
     416:	701a      	strb	r2, [r3, #0]
	//Initial values are the firmware version
	configure_spi_slave();
     418:	4b0e      	ldr	r3, [pc, #56]	; (454 <spi_slave_init+0x4c>)
     41a:	4798      	blx	r3
	configure_spi_slave_callbacks();
     41c:	4b0e      	ldr	r3, [pc, #56]	; (458 <spi_slave_init+0x50>)
     41e:	4798      	blx	r3
	if(init == false)
     420:	4b0e      	ldr	r3, [pc, #56]	; (45c <spi_slave_init+0x54>)
     422:	781b      	ldrb	r3, [r3, #0]
     424:	2b00      	cmp	r3, #0
     426:	d111      	bne.n	44c <spi_slave_init+0x44>
	{
		init = true;
     428:	2201      	movs	r2, #1
     42a:	4b0c      	ldr	r3, [pc, #48]	; (45c <spi_slave_init+0x54>)
     42c:	701a      	strb	r2, [r3, #0]
		do
		{
			error_code = spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     42e:	4e0c      	ldr	r6, [pc, #48]	; (460 <spi_slave_init+0x58>)
     430:	4d07      	ldr	r5, [pc, #28]	; (450 <spi_slave_init+0x48>)
     432:	4c0c      	ldr	r4, [pc, #48]	; (464 <spi_slave_init+0x5c>)
     434:	230a      	movs	r3, #10
     436:	0032      	movs	r2, r6
     438:	0029      	movs	r1, r5
     43a:	0020      	movs	r0, r4
     43c:	4f0a      	ldr	r7, [pc, #40]	; (468 <spi_slave_init+0x60>)
     43e:	47b8      	blx	r7
     440:	466b      	mov	r3, sp
     442:	71d8      	strb	r0, [r3, #7]
     444:	3307      	adds	r3, #7
		} while (error_code != STATUS_OK );
     446:	781b      	ldrb	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d1f3      	bne.n	434 <spi_slave_init+0x2c>
	}
}
     44c:	b003      	add	sp, #12
     44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     450:	200008b0 	.word	0x200008b0
     454:	00000275 	.word	0x00000275
     458:	000003a1 	.word	0x000003a1
     45c:	20000042 	.word	0x20000042
     460:	2000089c 	.word	0x2000089c
     464:	200001b4 	.word	0x200001b4
     468:	00001475 	.word	0x00001475

0000046c <spi_slave_callback>:
{
     46c:	b570      	push	{r4, r5, r6, lr}
	transfer_complete_spi_slave = true;
     46e:	2201      	movs	r2, #1
     470:	4b21      	ldr	r3, [pc, #132]	; (4f8 <spi_slave_callback+0x8c>)
     472:	701a      	strb	r2, [r3, #0]
	serial_timeout_count = 0;
     474:	2200      	movs	r2, #0
     476:	4b21      	ldr	r3, [pc, #132]	; (4fc <spi_slave_callback+0x90>)
     478:	701a      	strb	r2, [r3, #0]
	if(spi_reset_1 == true )
     47a:	4b21      	ldr	r3, [pc, #132]	; (500 <spi_slave_callback+0x94>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d11b      	bne.n	4ba <spi_slave_callback+0x4e>
		if(received_value[0] == SETALL_COMMAND )
     482:	4b20      	ldr	r3, [pc, #128]	; (504 <spi_slave_callback+0x98>)
     484:	781b      	ldrb	r3, [r3, #0]
     486:	b2db      	uxtb	r3, r3
     488:	2200      	movs	r2, #0
     48a:	2bda      	cmp	r3, #218	; 0xda
     48c:	d024      	beq.n	4d8 <spi_slave_callback+0x6c>
				ring_buffer[head_pointer] = received_value[i];
     48e:	481e      	ldr	r0, [pc, #120]	; (508 <spi_slave_callback+0x9c>)
     490:	4d1c      	ldr	r5, [pc, #112]	; (504 <spi_slave_callback+0x98>)
     492:	4c1e      	ldr	r4, [pc, #120]	; (50c <spi_slave_callback+0xa0>)
     494:	7803      	ldrb	r3, [r0, #0]
     496:	b2db      	uxtb	r3, r3
     498:	5ca9      	ldrb	r1, [r5, r2]
     49a:	b2c9      	uxtb	r1, r1
     49c:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
     49e:	7803      	ldrb	r3, [r0, #0]
     4a0:	3301      	adds	r3, #1
     4a2:	b2db      	uxtb	r3, r3
     4a4:	7003      	strb	r3, [r0, #0]
     4a6:	3201      	adds	r2, #1
			for(i=0 ; i<LENGTH_SINGLE;i++)
     4a8:	2a0a      	cmp	r2, #10
     4aa:	d1f3      	bne.n	494 <spi_slave_callback+0x28>
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     4ac:	230a      	movs	r3, #10
     4ae:	4a15      	ldr	r2, [pc, #84]	; (504 <spi_slave_callback+0x98>)
     4b0:	4917      	ldr	r1, [pc, #92]	; (510 <spi_slave_callback+0xa4>)
     4b2:	4818      	ldr	r0, [pc, #96]	; (514 <spi_slave_callback+0xa8>)
     4b4:	4c18      	ldr	r4, [pc, #96]	; (518 <spi_slave_callback+0xac>)
     4b6:	47a0      	blx	r4
}
     4b8:	bd70      	pop	{r4, r5, r6, pc}
		spi_reset_1 = false;
     4ba:	4b11      	ldr	r3, [pc, #68]	; (500 <spi_slave_callback+0x94>)
     4bc:	701a      	strb	r2, [r3, #0]
		spi_reset(&spi_slave_instance);
     4be:	4c15      	ldr	r4, [pc, #84]	; (514 <spi_slave_callback+0xa8>)
     4c0:	0020      	movs	r0, r4
     4c2:	4b16      	ldr	r3, [pc, #88]	; (51c <spi_slave_callback+0xb0>)
     4c4:	4798      	blx	r3
		spi_slave_init();
     4c6:	4b16      	ldr	r3, [pc, #88]	; (520 <spi_slave_callback+0xb4>)
     4c8:	4798      	blx	r3
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     4ca:	230a      	movs	r3, #10
     4cc:	4a0d      	ldr	r2, [pc, #52]	; (504 <spi_slave_callback+0x98>)
     4ce:	4910      	ldr	r1, [pc, #64]	; (510 <spi_slave_callback+0xa4>)
     4d0:	0020      	movs	r0, r4
     4d2:	4c11      	ldr	r4, [pc, #68]	; (518 <spi_slave_callback+0xac>)
     4d4:	47a0      	blx	r4
     4d6:	e7ef      	b.n	4b8 <spi_slave_callback+0x4c>
				ring_buffer[head_pointer] = received_value[i];
     4d8:	480b      	ldr	r0, [pc, #44]	; (508 <spi_slave_callback+0x9c>)
     4da:	4d0a      	ldr	r5, [pc, #40]	; (504 <spi_slave_callback+0x98>)
     4dc:	4c0b      	ldr	r4, [pc, #44]	; (50c <spi_slave_callback+0xa0>)
     4de:	7803      	ldrb	r3, [r0, #0]
     4e0:	b2db      	uxtb	r3, r3
     4e2:	5ca9      	ldrb	r1, [r5, r2]
     4e4:	b2c9      	uxtb	r1, r1
     4e6:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
     4e8:	7803      	ldrb	r3, [r0, #0]
     4ea:	3301      	adds	r3, #1
     4ec:	b2db      	uxtb	r3, r3
     4ee:	7003      	strb	r3, [r0, #0]
     4f0:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
     4f2:	2a10      	cmp	r2, #16
     4f4:	d1f3      	bne.n	4de <spi_slave_callback+0x72>
     4f6:	e7d9      	b.n	4ac <spi_slave_callback+0x40>
     4f8:	200001af 	.word	0x200001af
     4fc:	200001ab 	.word	0x200001ab
     500:	200001ac 	.word	0x200001ac
     504:	2000089c 	.word	0x2000089c
     508:	20000041 	.word	0x20000041
     50c:	200001f0 	.word	0x200001f0
     510:	200008b0 	.word	0x200008b0
     514:	200001b4 	.word	0x200001b4
     518:	00001475 	.word	0x00001475
     51c:	000011fd 	.word	0x000011fd
     520:	00000409 	.word	0x00000409

00000524 <TC2_OV_callback>:
}

void TC2_OV_callback(struct tc_module *const module_inst)
{
	//Power button check
	ultrasoundUpdateCheck = true;
     524:	2301      	movs	r3, #1
     526:	4a02      	ldr	r2, [pc, #8]	; (530 <TC2_OV_callback+0xc>)
     528:	7013      	strb	r3, [r2, #0]
	powerButtonCheck = true;
     52a:	4a02      	ldr	r2, [pc, #8]	; (534 <TC2_OV_callback+0x10>)
     52c:	7013      	strb	r3, [r2, #0]
}
     52e:	4770      	bx	lr
     530:	2000004e 	.word	0x2000004e
     534:	200001a0 	.word	0x200001a0

00000538 <new_echo_detection_callback>:
	//config_port_pin.direction = PORT_PIN_DIR_INPUT;
	//port_pin_set_config(ECHO_PIN, &config_port_pin);
}

void new_echo_detection_callback(void)
{
     538:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     53a:	4b0d      	ldr	r3, [pc, #52]	; (570 <new_echo_detection_callback+0x38>)
     53c:	6a1b      	ldr	r3, [r3, #32]
	
	static uint16_t rising_edge = 0;
	//serial_timeout_count = serial_timeout_count + 1;
	
	bool pin_state = port_pin_get_input_level(ECHO_PIN);
	if(pin_state)
     53e:	065b      	lsls	r3, r3, #25
     540:	d40f      	bmi.n	562 <new_echo_detection_callback+0x2a>
	{
		rising_edge = tc_get_count_value(&tc_instance2);
	}
	else
	{
		distance_16b = tc_get_count_value(&tc_instance2) - rising_edge;
     542:	480c      	ldr	r0, [pc, #48]	; (574 <new_echo_detection_callback+0x3c>)
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <new_echo_detection_callback+0x40>)
     546:	4798      	blx	r3
     548:	4b0c      	ldr	r3, [pc, #48]	; (57c <new_echo_detection_callback+0x44>)
     54a:	881b      	ldrh	r3, [r3, #0]
     54c:	1ac0      	subs	r0, r0, r3
     54e:	4b0c      	ldr	r3, [pc, #48]	; (580 <new_echo_detection_callback+0x48>)
     550:	6018      	str	r0, [r3, #0]
		//disable the interrupt
		//disableUltrasoundInterrupt = true;
		//port_pin_set_output_level(PROFILE_PIN_2, true);
		//delay_cycles_us(1);
		extint_chan_disable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     552:	2100      	movs	r1, #0
     554:	2006      	movs	r0, #6
     556:	4b0b      	ldr	r3, [pc, #44]	; (584 <new_echo_detection_callback+0x4c>)
     558:	4798      	blx	r3
		//port_pin_set_output_level(PROFILE_PIN_2, false);
		readyDistance = true;
     55a:	2201      	movs	r2, #1
     55c:	4b0a      	ldr	r3, [pc, #40]	; (588 <new_echo_detection_callback+0x50>)
     55e:	701a      	strb	r2, [r3, #0]
	}
	
}
     560:	bd10      	pop	{r4, pc}
		rising_edge = tc_get_count_value(&tc_instance2);
     562:	4804      	ldr	r0, [pc, #16]	; (574 <new_echo_detection_callback+0x3c>)
     564:	4b04      	ldr	r3, [pc, #16]	; (578 <new_echo_detection_callback+0x40>)
     566:	4798      	blx	r3
     568:	4b04      	ldr	r3, [pc, #16]	; (57c <new_echo_detection_callback+0x44>)
     56a:	8018      	strh	r0, [r3, #0]
     56c:	e7f8      	b.n	560 <new_echo_detection_callback+0x28>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	41004400 	.word	0x41004400
     574:	200002b8 	.word	0x200002b8
     578:	00001ee7 	.word	0x00001ee7
     57c:	2000004c 	.word	0x2000004c
     580:	20000044 	.word	0x20000044
     584:	00000e59 	.word	0x00000e59
     588:	2000004a 	.word	0x2000004a

0000058c <configure_tc2>:
{
     58c:	b510      	push	{r4, lr}
     58e:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     590:	aa01      	add	r2, sp, #4
     592:	2300      	movs	r3, #0
     594:	2100      	movs	r1, #0
     596:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     598:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     59a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     59c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     59e:	2000      	movs	r0, #0
     5a0:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     5a2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     5a4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     5a6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     5a8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     5aa:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     5ac:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     5ae:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     5b0:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     5b2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     5b4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     5b6:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     5b8:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     5ba:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     5bc:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV256; 
     5be:	23c0      	movs	r3, #192	; 0xc0
     5c0:	00db      	lsls	r3, r3, #3
     5c2:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance2, TC2, &config_tc);
     5c4:	4c07      	ldr	r4, [pc, #28]	; (5e4 <configure_tc2+0x58>)
     5c6:	4908      	ldr	r1, [pc, #32]	; (5e8 <configure_tc2+0x5c>)
     5c8:	0020      	movs	r0, r4
     5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <configure_tc2+0x60>)
     5cc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5d0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     5d2:	b25b      	sxtb	r3, r3
     5d4:	2b00      	cmp	r3, #0
     5d6:	dbfb      	blt.n	5d0 <configure_tc2+0x44>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     5d8:	8813      	ldrh	r3, [r2, #0]
     5da:	2102      	movs	r1, #2
     5dc:	430b      	orrs	r3, r1
     5de:	8013      	strh	r3, [r2, #0]
}
     5e0:	b00e      	add	sp, #56	; 0x38
     5e2:	bd10      	pop	{r4, pc}
     5e4:	200002b8 	.word	0x200002b8
     5e8:	42001c00 	.word	0x42001c00
     5ec:	00001c85 	.word	0x00001c85

000005f0 <configure_echo_extint>:
{
     5f0:	b510      	push	{r4, lr}
     5f2:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     5f4:	ac01      	add	r4, sp, #4
     5f6:	0020      	movs	r0, r4
     5f8:	4b08      	ldr	r3, [pc, #32]	; (61c <configure_echo_extint+0x2c>)
     5fa:	4798      	blx	r3
	config_extint_chan.gpio_pin           = US_ECHO_PIN_EIC;
     5fc:	2306      	movs	r3, #6
     5fe:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = US_ECHO_PIN_MUX;
     600:	23c0      	movs	r3, #192	; 0xc0
     602:	02db      	lsls	r3, r3, #11
     604:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     606:	2302      	movs	r3, #2
     608:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     60a:	3301      	adds	r3, #1
     60c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(US_ECHO_EIC_LINE, &config_extint_chan);
     60e:	0021      	movs	r1, r4
     610:	2006      	movs	r0, #6
     612:	4b03      	ldr	r3, [pc, #12]	; (620 <configure_echo_extint+0x30>)
     614:	4798      	blx	r3
}
     616:	b004      	add	sp, #16
     618:	bd10      	pop	{r4, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	00000f51 	.word	0x00000f51
     620:	00000f65 	.word	0x00000f65

00000624 <setup_ultrasound>:
{
     624:	b570      	push	{r4, r5, r6, lr}
	extint_chan_enable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     626:	2100      	movs	r1, #0
     628:	2006      	movs	r0, #6
     62a:	4b07      	ldr	r3, [pc, #28]	; (648 <setup_ultrasound+0x24>)
     62c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     62e:	4c07      	ldr	r4, [pc, #28]	; (64c <setup_ultrasound+0x28>)
     630:	2580      	movs	r5, #128	; 0x80
     632:	61a5      	str	r5, [r4, #24]
	delay_cycles_us(10);
     634:	200a      	movs	r0, #10
     636:	4b06      	ldr	r3, [pc, #24]	; (650 <setup_ultrasound+0x2c>)
     638:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     63a:	6165      	str	r5, [r4, #20]
	tc_set_count_value(&tc_instance2, 0);
     63c:	2100      	movs	r1, #0
     63e:	4805      	ldr	r0, [pc, #20]	; (654 <setup_ultrasound+0x30>)
     640:	4b05      	ldr	r3, [pc, #20]	; (658 <setup_ultrasound+0x34>)
     642:	4798      	blx	r3
}
     644:	bd70      	pop	{r4, r5, r6, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	00000e35 	.word	0x00000e35
     64c:	41004400 	.word	0x41004400
     650:	00000989 	.word	0x00000989
     654:	200002b8 	.word	0x200002b8
     658:	00001eb5 	.word	0x00001eb5

0000065c <configurePins>:
{
     65c:	b500      	push	{lr}
     65e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     660:	a901      	add	r1, sp, #4
     662:	2301      	movs	r3, #1
     664:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     666:	2200      	movs	r2, #0
     668:	708a      	strb	r2, [r1, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     66a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(TRIG_PIN, &config_port_pin);
     66c:	2007      	movs	r0, #7
     66e:	4b03      	ldr	r3, [pc, #12]	; (67c <configurePins+0x20>)
     670:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     672:	2280      	movs	r2, #128	; 0x80
     674:	4b02      	ldr	r3, [pc, #8]	; (680 <configurePins+0x24>)
     676:	615a      	str	r2, [r3, #20]
}
     678:	b003      	add	sp, #12
     67a:	bd00      	pop	{pc}
     67c:	00000fdd 	.word	0x00000fdd
     680:	41004400 	.word	0x41004400

00000684 <getUltrasoundDistance>:

uint16_t getUltrasoundDistance()
{
	static uint16_t distance_ultrasound = 0 ;
	if(readyDistance)
     684:	4b06      	ldr	r3, [pc, #24]	; (6a0 <getUltrasoundDistance+0x1c>)
     686:	781b      	ldrb	r3, [r3, #0]
     688:	2b00      	cmp	r3, #0
     68a:	d006      	beq.n	69a <getUltrasoundDistance+0x16>
	{
		readyDistance		= false;
     68c:	2200      	movs	r2, #0
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <getUltrasoundDistance+0x1c>)
     690:	701a      	strb	r2, [r3, #0]
		distance_ultrasound	= distance_16b;
     692:	4b04      	ldr	r3, [pc, #16]	; (6a4 <getUltrasoundDistance+0x20>)
     694:	681a      	ldr	r2, [r3, #0]
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <getUltrasoundDistance+0x24>)
     698:	801a      	strh	r2, [r3, #0]
	}
	return distance_ultrasound;
     69a:	4b03      	ldr	r3, [pc, #12]	; (6a8 <getUltrasoundDistance+0x24>)
     69c:	8818      	ldrh	r0, [r3, #0]
}
     69e:	4770      	bx	lr
     6a0:	2000004a 	.word	0x2000004a
     6a4:	20000044 	.word	0x20000044
     6a8:	20000048 	.word	0x20000048

000006ac <configure_TC2_callback>:

void configure_TC2_callback()
{
     6ac:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance2, TC2_OV_callback,TC_CALLBACK_OVERFLOW);
     6ae:	4c0c      	ldr	r4, [pc, #48]	; (6e0 <configure_TC2_callback+0x34>)
     6b0:	2200      	movs	r2, #0
     6b2:	490c      	ldr	r1, [pc, #48]	; (6e4 <configure_TC2_callback+0x38>)
     6b4:	0020      	movs	r0, r4
     6b6:	4b0c      	ldr	r3, [pc, #48]	; (6e8 <configure_TC2_callback+0x3c>)
     6b8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     6ba:	6820      	ldr	r0, [r4, #0]
     6bc:	4b0b      	ldr	r3, [pc, #44]	; (6ec <configure_TC2_callback+0x40>)
     6be:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     6c0:	4b0b      	ldr	r3, [pc, #44]	; (6f0 <configure_TC2_callback+0x44>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c2:	5c1a      	ldrb	r2, [r3, r0]
     6c4:	231f      	movs	r3, #31
     6c6:	4013      	ands	r3, r2
     6c8:	2201      	movs	r2, #1
     6ca:	0011      	movs	r1, r2
     6cc:	4099      	lsls	r1, r3
     6ce:	4b09      	ldr	r3, [pc, #36]	; (6f4 <configure_TC2_callback+0x48>)
     6d0:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     6d2:	7e63      	ldrb	r3, [r4, #25]
     6d4:	2101      	movs	r1, #1
     6d6:	430b      	orrs	r3, r1
     6d8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     6da:	6823      	ldr	r3, [r4, #0]
     6dc:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance2, TC_CALLBACK_OVERFLOW);
}
     6de:	bd10      	pop	{r4, pc}
     6e0:	200002b8 	.word	0x200002b8
     6e4:	00000525 	.word	0x00000525
     6e8:	00001ba9 	.word	0x00001ba9
     6ec:	00001c61 	.word	0x00001c61
     6f0:	000036e0 	.word	0x000036e0
     6f4:	e000e100 	.word	0xe000e100

000006f8 <checkUltrasound>:

void checkUltrasound()
{
     6f8:	b510      	push	{r4, lr}
		//delay_cycles_us(5);
		extint_chan_disable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
		//port_pin_set_output_level(PROFILE_PIN_2, false);
	}
	*/
	if(ultrasoundUpdateCheck == true)
     6fa:	4b05      	ldr	r3, [pc, #20]	; (710 <checkUltrasound+0x18>)
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	2b00      	cmp	r3, #0
     700:	d100      	bne.n	704 <checkUltrasound+0xc>
		setup_ultrasound();
	}
	
	//setup_ultrasound();
	
}
     702:	bd10      	pop	{r4, pc}
		ultrasoundUpdateCheck = false;
     704:	2200      	movs	r2, #0
     706:	4b02      	ldr	r3, [pc, #8]	; (710 <checkUltrasound+0x18>)
     708:	701a      	strb	r2, [r3, #0]
		setup_ultrasound();
     70a:	4b02      	ldr	r3, [pc, #8]	; (714 <checkUltrasound+0x1c>)
     70c:	4798      	blx	r3
}
     70e:	e7f8      	b.n	702 <checkUltrasound+0xa>
     710:	2000004e 	.word	0x2000004e
     714:	00000625 	.word	0x00000625

00000718 <configure_ext_callback>:

void configure_ext_callback()
{
     718:	b510      	push	{r4, lr}
	extint_register_callback(new_echo_detection_callback,US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     71a:	2200      	movs	r2, #0
     71c:	2106      	movs	r1, #6
     71e:	4804      	ldr	r0, [pc, #16]	; (730 <configure_ext_callback+0x18>)
     720:	4b04      	ldr	r3, [pc, #16]	; (734 <configure_ext_callback+0x1c>)
     722:	4798      	blx	r3
	extint_chan_enable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     724:	2100      	movs	r1, #0
     726:	2006      	movs	r0, #6
     728:	4b03      	ldr	r3, [pc, #12]	; (738 <configure_ext_callback+0x20>)
     72a:	4798      	blx	r3
}
     72c:	bd10      	pop	{r4, pc}
     72e:	46c0      	nop			; (mov r8, r8)
     730:	00000539 	.word	0x00000539
     734:	00000e09 	.word	0x00000e09
     738:	00000e35 	.word	0x00000e35

0000073c <configureModules>:

void configureModules()
{
     73c:	b510      	push	{r4, lr}
	configure_tc2();
     73e:	4b02      	ldr	r3, [pc, #8]	; (748 <configureModules+0xc>)
     740:	4798      	blx	r3
	configure_echo_extint();
     742:	4b02      	ldr	r3, [pc, #8]	; (74c <configureModules+0x10>)
     744:	4798      	blx	r3
}
     746:	bd10      	pop	{r4, pc}
     748:	0000058d 	.word	0x0000058d
     74c:	000005f1 	.word	0x000005f1

00000750 <configureCallbacks>:

void configureCallbacks()
{
     750:	b510      	push	{r4, lr}
	configure_TC2_callback();
     752:	4b02      	ldr	r3, [pc, #8]	; (75c <configureCallbacks+0xc>)
     754:	4798      	blx	r3
	configure_ext_callback();
     756:	4b02      	ldr	r3, [pc, #8]	; (760 <configureCallbacks+0x10>)
     758:	4798      	blx	r3
}
     75a:	bd10      	pop	{r4, pc}
     75c:	000006ad 	.word	0x000006ad
     760:	00000719 	.word	0x00000719

00000764 <configureUltrasound>:

void configureUltrasound()
{
     764:	b510      	push	{r4, lr}
	configurePins();
     766:	4b03      	ldr	r3, [pc, #12]	; (774 <configureUltrasound+0x10>)
     768:	4798      	blx	r3
	configureModules();
     76a:	4b03      	ldr	r3, [pc, #12]	; (778 <configureUltrasound+0x14>)
     76c:	4798      	blx	r3
	configureCallbacks();
     76e:	4b03      	ldr	r3, [pc, #12]	; (77c <configureUltrasound+0x18>)
     770:	4798      	blx	r3
     772:	bd10      	pop	{r4, pc}
     774:	0000065d 	.word	0x0000065d
     778:	0000073d 	.word	0x0000073d
     77c:	00000751 	.word	0x00000751

00000780 <readLED2Struct>:
}

void readLED2Struct(colorInfo* LEDColor, uint8_t* inputValues)
{
	//1
	LEDColor[0].RBrightness = inputValues[0];
     780:	780b      	ldrb	r3, [r1, #0]
     782:	7003      	strb	r3, [r0, #0]
	LEDColor[0].GBrightness = inputValues[1];
     784:	784b      	ldrb	r3, [r1, #1]
     786:	7043      	strb	r3, [r0, #1]
	LEDColor[0].BBrightness = inputValues[2];
     788:	788b      	ldrb	r3, [r1, #2]
     78a:	7083      	strb	r3, [r0, #2]
	
	//2
	LEDColor[1].RBrightness = inputValues[3];
     78c:	78cb      	ldrb	r3, [r1, #3]
     78e:	70c3      	strb	r3, [r0, #3]
	LEDColor[1].GBrightness = inputValues[4];
     790:	790a      	ldrb	r2, [r1, #4]
     792:	7102      	strb	r2, [r0, #4]
	LEDColor[1].BBrightness = inputValues[5];
     794:	794a      	ldrb	r2, [r1, #5]
     796:	7142      	strb	r2, [r0, #5]
	
	//3
	LEDColor[2].RBrightness = inputValues[6];
     798:	798b      	ldrb	r3, [r1, #6]
     79a:	7183      	strb	r3, [r0, #6]
	LEDColor[2].GBrightness = inputValues[7];
     79c:	79cb      	ldrb	r3, [r1, #7]
     79e:	71c3      	strb	r3, [r0, #7]
	LEDColor[2].BBrightness = inputValues[8];
     7a0:	7a0b      	ldrb	r3, [r1, #8]
     7a2:	7203      	strb	r3, [r0, #8]
	
}
     7a4:	4770      	bx	lr
	...

000007a8 <packMotors>:

void packMotors(uint8_t* receive)
{
     7a8:	b510      	push	{r4, lr}
	//Left Motor
	leftMotor.speed                   =   receive[0] & 0x7F;
     7aa:	490d      	ldr	r1, [pc, #52]	; (7e0 <packMotors+0x38>)
     7ac:	7803      	ldrb	r3, [r0, #0]
     7ae:	227f      	movs	r2, #127	; 0x7f
     7b0:	4013      	ands	r3, r2
     7b2:	700b      	strb	r3, [r1, #0]
	leftMotor.direction               =  (receive[0] & 0x80) >>7;
     7b4:	7803      	ldrb	r3, [r0, #0]
     7b6:	09db      	lsrs	r3, r3, #7
     7b8:	704b      	strb	r3, [r1, #1]
	leftMotor.ticks                   =  (receive[1]<<8)&0xFF00;
     7ba:	7843      	ldrb	r3, [r0, #1]
     7bc:	021b      	lsls	r3, r3, #8
     7be:	804b      	strh	r3, [r1, #2]
	leftMotor.ticks                  |=  (receive[2]);
     7c0:	7884      	ldrb	r4, [r0, #2]
     7c2:	4323      	orrs	r3, r4
     7c4:	804b      	strh	r3, [r1, #2]
	
	//Right Motor
	rightMotor.speed                   =   receive[3] & 0x7F;
     7c6:	78c3      	ldrb	r3, [r0, #3]
     7c8:	4906      	ldr	r1, [pc, #24]	; (7e4 <packMotors+0x3c>)
     7ca:	401a      	ands	r2, r3
     7cc:	700a      	strb	r2, [r1, #0]
	rightMotor.direction               =  (receive[3] & 0x80) >>7;
     7ce:	09db      	lsrs	r3, r3, #7
     7d0:	704b      	strb	r3, [r1, #1]
	rightMotor.ticks                   =  (receive[4]<<8)&0xFF00;
     7d2:	7902      	ldrb	r2, [r0, #4]
     7d4:	0212      	lsls	r2, r2, #8
	rightMotor.ticks                  |=  (receive[5]);	
     7d6:	7943      	ldrb	r3, [r0, #5]
     7d8:	4313      	orrs	r3, r2
     7da:	804b      	strh	r3, [r1, #2]
}
     7dc:	bd10      	pop	{r4, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	2000005c 	.word	0x2000005c
     7e4:	20000060 	.word	0x20000060

000007e8 <controlLoop>:


void controlLoop()
{
     7e8:	b510      	push	{r4, lr}
	if((LEDSPIUpdate == true) && (LEDSPITimerUpdate == true))
     7ea:	4b12      	ldr	r3, [pc, #72]	; (834 <controlLoop+0x4c>)
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d003      	beq.n	7fa <controlLoop+0x12>
     7f2:	4b11      	ldr	r3, [pc, #68]	; (838 <controlLoop+0x50>)
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	2b00      	cmp	r3, #0
     7f8:	d108      	bne.n	80c <controlLoop+0x24>
	{
		LEDSPIUpdate         = false;
		LEDSPITimerUpdate = false;
		RGBPI55SetAllLED(LEDColor);
	}
	if((motorSPIUpdate == true) && (motorSPITimerUpdate == true))
     7fa:	4b10      	ldr	r3, [pc, #64]	; (83c <controlLoop+0x54>)
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	2b00      	cmp	r3, #0
     800:	d003      	beq.n	80a <controlLoop+0x22>
     802:	4b0f      	ldr	r3, [pc, #60]	; (840 <controlLoop+0x58>)
     804:	781b      	ldrb	r3, [r3, #0]
     806:	2b00      	cmp	r3, #0
     808:	d109      	bne.n	81e <controlLoop+0x36>
	{
		LEDSPIUpdate           = false;
		motorSPITimerUpdate = false;
		controlMotors(&leftMotor, &rightMotor);
	}
}
     80a:	bd10      	pop	{r4, pc}
		LEDSPIUpdate         = false;
     80c:	2300      	movs	r3, #0
     80e:	4a09      	ldr	r2, [pc, #36]	; (834 <controlLoop+0x4c>)
     810:	7013      	strb	r3, [r2, #0]
		LEDSPITimerUpdate = false;
     812:	4a09      	ldr	r2, [pc, #36]	; (838 <controlLoop+0x50>)
     814:	7013      	strb	r3, [r2, #0]
		RGBPI55SetAllLED(LEDColor);
     816:	480b      	ldr	r0, [pc, #44]	; (844 <controlLoop+0x5c>)
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <controlLoop+0x60>)
     81a:	4798      	blx	r3
     81c:	e7ed      	b.n	7fa <controlLoop+0x12>
		LEDSPIUpdate           = false;
     81e:	2300      	movs	r3, #0
     820:	4a04      	ldr	r2, [pc, #16]	; (834 <controlLoop+0x4c>)
     822:	7013      	strb	r3, [r2, #0]
		motorSPITimerUpdate = false;
     824:	4a06      	ldr	r2, [pc, #24]	; (840 <controlLoop+0x58>)
     826:	7013      	strb	r3, [r2, #0]
		controlMotors(&leftMotor, &rightMotor);
     828:	4908      	ldr	r1, [pc, #32]	; (84c <controlLoop+0x64>)
     82a:	4809      	ldr	r0, [pc, #36]	; (850 <controlLoop+0x68>)
     82c:	4b09      	ldr	r3, [pc, #36]	; (854 <controlLoop+0x6c>)
     82e:	4798      	blx	r3
}
     830:	e7eb      	b.n	80a <controlLoop+0x22>
     832:	46c0      	nop			; (mov r8, r8)
     834:	2000018d 	.word	0x2000018d
     838:	2000018c 	.word	0x2000018c
     83c:	2000019f 	.word	0x2000019f
     840:	2000019e 	.word	0x2000019e
     844:	20000050 	.word	0x20000050
     848:	00002061 	.word	0x00002061
     84c:	20000060 	.word	0x20000060
     850:	2000005c 	.word	0x2000005c
     854:	00002ebd 	.word	0x00002ebd

00000858 <spi_main_loop>:


void spi_main_loop()
{
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	b082      	sub	sp, #8
	
	volatile enum status_code error_code = 0x10;
     85c:	2210      	movs	r2, #16
     85e:	466b      	mov	r3, sp
     860:	71da      	strb	r2, [r3, #7]
	//
	uint8_t i    = 0;
	uint8_t rw   = 0;
	uint8_t mode = 0;
	static bool test = true;
	transmit_value[0] = 0x88;
     862:	4b2a      	ldr	r3, [pc, #168]	; (90c <spi_main_loop+0xb4>)
     864:	3278      	adds	r2, #120	; 0x78
     866:	701a      	strb	r2, [r3, #0]
	transmit_value[1] = 0xAA;
     868:	3222      	adds	r2, #34	; 0x22
     86a:	705a      	strb	r2, [r3, #1]
	transmit_value[2] = 0xBB;
     86c:	3211      	adds	r2, #17
     86e:	709a      	strb	r2, [r3, #2]
	transmit_value[3] = 0xCC;
     870:	3211      	adds	r2, #17
     872:	70da      	strb	r2, [r3, #3]
	//check_timeout();
	if(transfer_complete_spi_slave == true)
     874:	4b26      	ldr	r3, [pc, #152]	; (910 <spi_main_loop+0xb8>)
     876:	781b      	ldrb	r3, [r3, #0]
     878:	2b00      	cmp	r3, #0
     87a:	d101      	bne.n	880 <spi_main_loop+0x28>
				break;
		}	
		check_buffer();	//Look for more SPI commands if occurred , while completing one operation
	}
	
     87c:	b002      	add	sp, #8
     87e:	bd70      	pop	{r4, r5, r6, pc}
		check_buffer();
     880:	4b24      	ldr	r3, [pc, #144]	; (914 <spi_main_loop+0xbc>)
     882:	4798      	blx	r3
		mode = temp_receive[0];
     884:	4b24      	ldr	r3, [pc, #144]	; (918 <spi_main_loop+0xc0>)
     886:	781b      	ldrb	r3, [r3, #0]
     888:	b2db      	uxtb	r3, r3
		switch(mode)
     88a:	2bd1      	cmp	r3, #209	; 0xd1
     88c:	d01f      	beq.n	8ce <spi_main_loop+0x76>
     88e:	d90c      	bls.n	8aa <spi_main_loop+0x52>
     890:	2bda      	cmp	r3, #218	; 0xda
     892:	d02e      	beq.n	8f2 <spi_main_loop+0x9a>
     894:	2bdb      	cmp	r3, #219	; 0xdb
     896:	d035      	beq.n	904 <spi_main_loop+0xac>
     898:	2bd2      	cmp	r3, #210	; 0xd2
     89a:	d115      	bne.n	8c8 <spi_main_loop+0x70>
			    packMotors(temp_receive+1);
     89c:	481f      	ldr	r0, [pc, #124]	; (91c <spi_main_loop+0xc4>)
     89e:	4b20      	ldr	r3, [pc, #128]	; (920 <spi_main_loop+0xc8>)
     8a0:	4798      	blx	r3
				motorSPIUpdate = true;
     8a2:	2201      	movs	r2, #1
     8a4:	4b1f      	ldr	r3, [pc, #124]	; (924 <spi_main_loop+0xcc>)
     8a6:	701a      	strb	r2, [r3, #0]
				break;
     8a8:	e00e      	b.n	8c8 <spi_main_loop+0x70>
		switch(mode)
     8aa:	2b10      	cmp	r3, #16
     8ac:	d009      	beq.n	8c2 <spi_main_loop+0x6a>
     8ae:	2bd0      	cmp	r3, #208	; 0xd0
     8b0:	d10a      	bne.n	8c8 <spi_main_loop+0x70>
				readLED2Struct(LEDColor , temp_receive+1);
     8b2:	491a      	ldr	r1, [pc, #104]	; (91c <spi_main_loop+0xc4>)
     8b4:	481c      	ldr	r0, [pc, #112]	; (928 <spi_main_loop+0xd0>)
     8b6:	4b1d      	ldr	r3, [pc, #116]	; (92c <spi_main_loop+0xd4>)
     8b8:	4798      	blx	r3
				LEDSPIUpdate = true;
     8ba:	2201      	movs	r2, #1
     8bc:	4b1c      	ldr	r3, [pc, #112]	; (930 <spi_main_loop+0xd8>)
     8be:	701a      	strb	r2, [r3, #0]
				break;
     8c0:	e002      	b.n	8c8 <spi_main_loop+0x70>
				update_PID_values(temp_receive+1);
     8c2:	4816      	ldr	r0, [pc, #88]	; (91c <spi_main_loop+0xc4>)
     8c4:	4b1b      	ldr	r3, [pc, #108]	; (934 <spi_main_loop+0xdc>)
     8c6:	4798      	blx	r3
		check_buffer();	//Look for more SPI commands if occurred , while completing one operation
     8c8:	4b12      	ldr	r3, [pc, #72]	; (914 <spi_main_loop+0xbc>)
     8ca:	4798      	blx	r3
     8cc:	e7d6      	b.n	87c <spi_main_loop+0x24>
				leftMotorDirection         = temp_receive[1]&0x01;
     8ce:	4b12      	ldr	r3, [pc, #72]	; (918 <spi_main_loop+0xc0>)
     8d0:	7858      	ldrb	r0, [r3, #1]
				leftMotorSpeed			   = temp_receive[2];
     8d2:	7899      	ldrb	r1, [r3, #2]
     8d4:	b2c9      	uxtb	r1, r1
				rightMotorDirection        = temp_receive[3]&0x01;
     8d6:	78de      	ldrb	r6, [r3, #3]
     8d8:	b2f6      	uxtb	r6, r6
				rightMotorSpeed            = temp_receive[4];
     8da:	791d      	ldrb	r5, [r3, #4]
     8dc:	b2ed      	uxtb	r5, r5
				leftMotorDirection         = temp_receive[1]&0x01;
     8de:	2401      	movs	r4, #1
				set_motor_left(leftMotorDirection   , leftMotorSpeed);
     8e0:	4020      	ands	r0, r4
     8e2:	4b15      	ldr	r3, [pc, #84]	; (938 <spi_main_loop+0xe0>)
     8e4:	4798      	blx	r3
				set_motor_right(rightMotorDirection , rightMotorSpeed);
     8e6:	0020      	movs	r0, r4
     8e8:	4030      	ands	r0, r6
     8ea:	0029      	movs	r1, r5
     8ec:	4b13      	ldr	r3, [pc, #76]	; (93c <spi_main_loop+0xe4>)
     8ee:	4798      	blx	r3
				break;
     8f0:	e7ea      	b.n	8c8 <spi_main_loop+0x70>
				readLED2Struct(LEDColor , temp_receive+1);
     8f2:	4c0d      	ldr	r4, [pc, #52]	; (928 <spi_main_loop+0xd0>)
     8f4:	4909      	ldr	r1, [pc, #36]	; (91c <spi_main_loop+0xc4>)
     8f6:	0020      	movs	r0, r4
     8f8:	4b0c      	ldr	r3, [pc, #48]	; (92c <spi_main_loop+0xd4>)
     8fa:	4798      	blx	r3
				RGBPI55SetAllLED(LEDColor);
     8fc:	0020      	movs	r0, r4
     8fe:	4b10      	ldr	r3, [pc, #64]	; (940 <spi_main_loop+0xe8>)
     900:	4798      	blx	r3
				break;
     902:	e7e1      	b.n	8c8 <spi_main_loop+0x70>
				clearLEDS();
     904:	4b0f      	ldr	r3, [pc, #60]	; (944 <spi_main_loop+0xec>)
     906:	4798      	blx	r3
				break;
     908:	e7de      	b.n	8c8 <spi_main_loop+0x70>
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	200008d8 	.word	0x200008d8
     910:	200001af 	.word	0x200001af
     914:	00000319 	.word	0x00000319
     918:	200008c4 	.word	0x200008c4
     91c:	200008c5 	.word	0x200008c5
     920:	000007a9 	.word	0x000007a9
     924:	2000019f 	.word	0x2000019f
     928:	20000050 	.word	0x20000050
     92c:	00000781 	.word	0x00000781
     930:	2000018d 	.word	0x2000018d
     934:	00002d4d 	.word	0x00002d4d
     938:	000031d1 	.word	0x000031d1
     93c:	00003231 	.word	0x00003231
     940:	00002061 	.word	0x00002061
     944:	00002105 	.word	0x00002105

00000948 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     948:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     94a:	2000      	movs	r0, #0
     94c:	4b08      	ldr	r3, [pc, #32]	; (970 <delay_init+0x28>)
     94e:	4798      	blx	r3
     950:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     952:	4c08      	ldr	r4, [pc, #32]	; (974 <delay_init+0x2c>)
     954:	21fa      	movs	r1, #250	; 0xfa
     956:	0089      	lsls	r1, r1, #2
     958:	47a0      	blx	r4
     95a:	4b07      	ldr	r3, [pc, #28]	; (978 <delay_init+0x30>)
     95c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     95e:	4907      	ldr	r1, [pc, #28]	; (97c <delay_init+0x34>)
     960:	0028      	movs	r0, r5
     962:	47a0      	blx	r4
     964:	4b06      	ldr	r3, [pc, #24]	; (980 <delay_init+0x38>)
     966:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     968:	2205      	movs	r2, #5
     96a:	4b06      	ldr	r3, [pc, #24]	; (984 <delay_init+0x3c>)
     96c:	601a      	str	r2, [r3, #0]
}
     96e:	bd70      	pop	{r4, r5, r6, pc}
     970:	000026c9 	.word	0x000026c9
     974:	00003389 	.word	0x00003389
     978:	20000000 	.word	0x20000000
     97c:	000f4240 	.word	0x000f4240
     980:	20000004 	.word	0x20000004
     984:	e000e010 	.word	0xe000e010

00000988 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     988:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     98a:	4b08      	ldr	r3, [pc, #32]	; (9ac <delay_cycles_us+0x24>)
     98c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     98e:	4a08      	ldr	r2, [pc, #32]	; (9b0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     990:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     992:	2180      	movs	r1, #128	; 0x80
     994:	0249      	lsls	r1, r1, #9
	while (n--) {
     996:	3801      	subs	r0, #1
     998:	d307      	bcc.n	9aa <delay_cycles_us+0x22>
	if (n > 0) {
     99a:	2c00      	cmp	r4, #0
     99c:	d0fb      	beq.n	996 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     99e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9a0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9a2:	6813      	ldr	r3, [r2, #0]
     9a4:	420b      	tst	r3, r1
     9a6:	d0fc      	beq.n	9a2 <delay_cycles_us+0x1a>
     9a8:	e7f5      	b.n	996 <delay_cycles_us+0xe>
	}
}
     9aa:	bd30      	pop	{r4, r5, pc}
     9ac:	20000004 	.word	0x20000004
     9b0:	e000e010 	.word	0xe000e010

000009b4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     9b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     9b6:	4b08      	ldr	r3, [pc, #32]	; (9d8 <delay_cycles_ms+0x24>)
     9b8:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     9ba:	4a08      	ldr	r2, [pc, #32]	; (9dc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     9bc:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9be:	2180      	movs	r1, #128	; 0x80
     9c0:	0249      	lsls	r1, r1, #9
	while (n--) {
     9c2:	3801      	subs	r0, #1
     9c4:	d307      	bcc.n	9d6 <delay_cycles_ms+0x22>
	if (n > 0) {
     9c6:	2c00      	cmp	r4, #0
     9c8:	d0fb      	beq.n	9c2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     9ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9ce:	6813      	ldr	r3, [r2, #0]
     9d0:	420b      	tst	r3, r1
     9d2:	d0fc      	beq.n	9ce <delay_cycles_ms+0x1a>
     9d4:	e7f5      	b.n	9c2 <delay_cycles_ms+0xe>
	}
}
     9d6:	bd30      	pop	{r4, r5, pc}
     9d8:	20000000 	.word	0x20000000
     9dc:	e000e010 	.word	0xe000e010

000009e0 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     9e0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     9e2:	4b2e      	ldr	r3, [pc, #184]	; (a9c <ADC_Handler+0xbc>)
     9e4:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     9e6:	6823      	ldr	r3, [r4, #0]
     9e8:	7e1d      	ldrb	r5, [r3, #24]
     9ea:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     9ec:	07ea      	lsls	r2, r5, #31
     9ee:	d505      	bpl.n	9fc <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     9f0:	7ee2      	ldrb	r2, [r4, #27]
     9f2:	07d2      	lsls	r2, r2, #31
     9f4:	d502      	bpl.n	9fc <ADC_Handler+0x1c>
     9f6:	7ea2      	ldrb	r2, [r4, #26]
     9f8:	07d2      	lsls	r2, r2, #31
     9fa:	d416      	bmi.n	a2a <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     9fc:	076b      	lsls	r3, r5, #29
     9fe:	d508      	bpl.n	a12 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     a00:	2304      	movs	r3, #4
     a02:	6822      	ldr	r2, [r4, #0]
     a04:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     a06:	7ee3      	ldrb	r3, [r4, #27]
     a08:	079b      	lsls	r3, r3, #30
     a0a:	d502      	bpl.n	a12 <ADC_Handler+0x32>
     a0c:	7ea3      	ldrb	r3, [r4, #26]
     a0e:	079b      	lsls	r3, r3, #30
     a10:	d43c      	bmi.n	a8c <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     a12:	07ab      	lsls	r3, r5, #30
     a14:	d508      	bpl.n	a28 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     a16:	2302      	movs	r3, #2
     a18:	6822      	ldr	r2, [r4, #0]
     a1a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     a1c:	7ee3      	ldrb	r3, [r4, #27]
     a1e:	075b      	lsls	r3, r3, #29
     a20:	d502      	bpl.n	a28 <ADC_Handler+0x48>
     a22:	7ea3      	ldrb	r3, [r4, #26]
     a24:	075b      	lsls	r3, r3, #29
     a26:	d435      	bmi.n	a94 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     a28:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a2a:	2201      	movs	r2, #1
     a2c:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     a2e:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a30:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     a32:	b25b      	sxtb	r3, r3
     a34:	2b00      	cmp	r3, #0
     a36:	dbfb      	blt.n	a30 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     a38:	6961      	ldr	r1, [r4, #20]
     a3a:	1c8b      	adds	r3, r1, #2
     a3c:	6163      	str	r3, [r4, #20]
     a3e:	8b53      	ldrh	r3, [r2, #26]
     a40:	b29b      	uxth	r3, r3
     a42:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     a44:	8b23      	ldrh	r3, [r4, #24]
     a46:	3b01      	subs	r3, #1
     a48:	b29b      	uxth	r3, r3
     a4a:	8323      	strh	r3, [r4, #24]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d011      	beq.n	a74 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     a50:	7f63      	ldrb	r3, [r4, #29]
     a52:	2b00      	cmp	r3, #0
     a54:	d0d2      	beq.n	9fc <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a56:	6822      	ldr	r2, [r4, #0]
     a58:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     a5a:	b25b      	sxtb	r3, r3
     a5c:	2b00      	cmp	r3, #0
     a5e:	dbfb      	blt.n	a58 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     a60:	7b13      	ldrb	r3, [r2, #12]
     a62:	2102      	movs	r1, #2
     a64:	430b      	orrs	r3, r1
     a66:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     a68:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a6a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     a6c:	b25b      	sxtb	r3, r3
     a6e:	2b00      	cmp	r3, #0
     a70:	dbfb      	blt.n	a6a <ADC_Handler+0x8a>
     a72:	e7c3      	b.n	9fc <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     a74:	7f23      	ldrb	r3, [r4, #28]
     a76:	2b05      	cmp	r3, #5
     a78:	d1c0      	bne.n	9fc <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     a7a:	2300      	movs	r3, #0
     a7c:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a7e:	3301      	adds	r3, #1
     a80:	6822      	ldr	r2, [r4, #0]
     a82:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     a84:	0020      	movs	r0, r4
     a86:	68a3      	ldr	r3, [r4, #8]
     a88:	4798      	blx	r3
     a8a:	e7b7      	b.n	9fc <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     a8c:	0020      	movs	r0, r4
     a8e:	68e3      	ldr	r3, [r4, #12]
     a90:	4798      	blx	r3
     a92:	e7be      	b.n	a12 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     a94:	6923      	ldr	r3, [r4, #16]
     a96:	0020      	movs	r0, r4
     a98:	4798      	blx	r3
}
     a9a:	e7c5      	b.n	a28 <ADC_Handler+0x48>
     a9c:	200002d4 	.word	0x200002d4

00000aa0 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     aa0:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
     aa2:	4b26      	ldr	r3, [pc, #152]	; (b3c <DMAC_Handler+0x9c>)
     aa4:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     aa6:	4926      	ldr	r1, [pc, #152]	; (b40 <DMAC_Handler+0xa0>)
     aa8:	8c0b      	ldrh	r3, [r1, #32]
     aaa:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     aac:	4013      	ands	r3, r2
     aae:	009b      	lsls	r3, r3, #2
     ab0:	4824      	ldr	r0, [pc, #144]	; (b44 <DMAC_Handler+0xa4>)
     ab2:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     ab4:	7803      	ldrb	r3, [r0, #0]
     ab6:	401a      	ands	r2, r3
     ab8:	233f      	movs	r3, #63	; 0x3f
     aba:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     abc:	330f      	adds	r3, #15
     abe:	5cca      	ldrb	r2, [r1, r3]
     ac0:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     ac2:	7803      	ldrb	r3, [r0, #0]
     ac4:	011b      	lsls	r3, r3, #4
     ac6:	4920      	ldr	r1, [pc, #128]	; (b48 <DMAC_Handler+0xa8>)
     ac8:	18c9      	adds	r1, r1, r3
     aca:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     acc:	4c1f      	ldr	r4, [pc, #124]	; (b4c <DMAC_Handler+0xac>)
     ace:	18e3      	adds	r3, r4, r3
     ad0:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     ad2:	1acb      	subs	r3, r1, r3
     ad4:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     ad6:	07d3      	lsls	r3, r2, #31
     ad8:	d50f      	bpl.n	afa <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     ada:	2101      	movs	r1, #1
     adc:	234e      	movs	r3, #78	; 0x4e
     ade:	4a18      	ldr	r2, [pc, #96]	; (b40 <DMAC_Handler+0xa0>)
     ae0:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     ae2:	3b3e      	subs	r3, #62	; 0x3e
     ae4:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     ae6:	7c03      	ldrb	r3, [r0, #16]
     ae8:	07db      	lsls	r3, r3, #31
     aea:	d503      	bpl.n	af4 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     aec:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     aee:	2b00      	cmp	r3, #0
     af0:	d000      	beq.n	af4 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     af2:	4798      	blx	r3
	cpu_irq_leave_critical();
     af4:	4b16      	ldr	r3, [pc, #88]	; (b50 <DMAC_Handler+0xb0>)
     af6:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     af8:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     afa:	0793      	lsls	r3, r2, #30
     afc:	d50d      	bpl.n	b1a <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     afe:	2102      	movs	r1, #2
     b00:	234e      	movs	r3, #78	; 0x4e
     b02:	4a0f      	ldr	r2, [pc, #60]	; (b40 <DMAC_Handler+0xa0>)
     b04:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     b06:	2300      	movs	r3, #0
     b08:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b0a:	7c03      	ldrb	r3, [r0, #16]
     b0c:	079b      	lsls	r3, r3, #30
     b0e:	d5f1      	bpl.n	af4 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     b10:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b12:	2b00      	cmp	r3, #0
     b14:	d0ee      	beq.n	af4 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     b16:	4798      	blx	r3
     b18:	e7ec      	b.n	af4 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     b1a:	0753      	lsls	r3, r2, #29
     b1c:	d5ea      	bpl.n	af4 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     b1e:	2104      	movs	r1, #4
     b20:	234e      	movs	r3, #78	; 0x4e
     b22:	4a07      	ldr	r2, [pc, #28]	; (b40 <DMAC_Handler+0xa0>)
     b24:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     b26:	3b48      	subs	r3, #72	; 0x48
     b28:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b2a:	7c03      	ldrb	r3, [r0, #16]
     b2c:	075b      	lsls	r3, r3, #29
     b2e:	d5e1      	bpl.n	af4 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     b30:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b32:	2b00      	cmp	r3, #0
     b34:	d0de      	beq.n	af4 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     b36:	4798      	blx	r3
     b38:	e7dc      	b.n	af4 <DMAC_Handler+0x54>
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00002131 	.word	0x00002131
     b40:	41004800 	.word	0x41004800
     b44:	20000064 	.word	0x20000064
     b48:	200002e0 	.word	0x200002e0
     b4c:	20000080 	.word	0x20000080
     b50:	00002171 	.word	0x00002171

00000b54 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     b54:	2300      	movs	r3, #0
     b56:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     b58:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     b5a:	2203      	movs	r2, #3
     b5c:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     b5e:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     b60:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     b62:	4770      	bx	lr

00000b64 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b66:	46ce      	mov	lr, r9
     b68:	4647      	mov	r7, r8
     b6a:	b580      	push	{r7, lr}
     b6c:	0005      	movs	r5, r0
     b6e:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     b70:	4b45      	ldr	r3, [pc, #276]	; (c88 <dma_allocate+0x124>)
     b72:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     b74:	4b45      	ldr	r3, [pc, #276]	; (c8c <dma_allocate+0x128>)
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	d118      	bne.n	bae <dma_allocate+0x4a>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	PM->AHBMASK.reg |= ahb_mask;
     b7c:	4b44      	ldr	r3, [pc, #272]	; (c90 <dma_allocate+0x12c>)
     b7e:	695a      	ldr	r2, [r3, #20]
     b80:	2120      	movs	r1, #32
     b82:	430a      	orrs	r2, r1
     b84:	615a      	str	r2, [r3, #20]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     b86:	69da      	ldr	r2, [r3, #28]
     b88:	3910      	subs	r1, #16
     b8a:	430a      	orrs	r2, r1
     b8c:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     b8e:	4b41      	ldr	r3, [pc, #260]	; (c94 <dma_allocate+0x130>)
     b90:	881a      	ldrh	r2, [r3, #0]
     b92:	390e      	subs	r1, #14
     b94:	438a      	bics	r2, r1
     b96:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     b98:	2201      	movs	r2, #1
     b9a:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     b9c:	4a3e      	ldr	r2, [pc, #248]	; (c98 <dma_allocate+0x134>)
     b9e:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     ba0:	4a3e      	ldr	r2, [pc, #248]	; (c9c <dma_allocate+0x138>)
     ba2:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     ba4:	4a3e      	ldr	r2, [pc, #248]	; (ca0 <dma_allocate+0x13c>)
     ba6:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     ba8:	4b38      	ldr	r3, [pc, #224]	; (c8c <dma_allocate+0x128>)
     baa:	2201      	movs	r2, #1
     bac:	701a      	strb	r2, [r3, #0]
     bae:	4b36      	ldr	r3, [pc, #216]	; (c88 <dma_allocate+0x124>)
     bb0:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     bb2:	4b36      	ldr	r3, [pc, #216]	; (c8c <dma_allocate+0x128>)
     bb4:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     bb6:	07da      	lsls	r2, r3, #31
     bb8:	d50f      	bpl.n	bda <dma_allocate+0x76>
		tmp = tmp >> 1;
     bba:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bbc:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     bbe:	2201      	movs	r2, #1
     bc0:	421a      	tst	r2, r3
     bc2:	d00b      	beq.n	bdc <dma_allocate+0x78>
		tmp = tmp >> 1;
     bc4:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bc6:	3401      	adds	r4, #1
     bc8:	b2e4      	uxtb	r4, r4
     bca:	2c05      	cmp	r4, #5
     bcc:	d1f8      	bne.n	bc0 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     bce:	4b35      	ldr	r3, [pc, #212]	; (ca4 <dma_allocate+0x140>)
     bd0:	4798      	blx	r3
     bd2:	4b34      	ldr	r3, [pc, #208]	; (ca4 <dma_allocate+0x140>)
     bd4:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     bd6:	2014      	movs	r0, #20
     bd8:	e051      	b.n	c7e <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bda:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     bdc:	4a2b      	ldr	r2, [pc, #172]	; (c8c <dma_allocate+0x128>)
     bde:	6851      	ldr	r1, [r2, #4]
     be0:	2301      	movs	r3, #1
     be2:	40a3      	lsls	r3, r4
     be4:	430b      	orrs	r3, r1
     be6:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     be8:	7a13      	ldrb	r3, [r2, #8]
     bea:	3b01      	subs	r3, #1
     bec:	7213      	strb	r3, [r2, #8]
     bee:	4b2d      	ldr	r3, [pc, #180]	; (ca4 <dma_allocate+0x140>)
     bf0:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     bf2:	2cff      	cmp	r4, #255	; 0xff
     bf4:	d0ed      	beq.n	bd2 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     bf6:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     bf8:	2307      	movs	r3, #7
     bfa:	4698      	mov	r8, r3
     bfc:	401c      	ands	r4, r3
     bfe:	4f25      	ldr	r7, [pc, #148]	; (c94 <dma_allocate+0x130>)
     c00:	3338      	adds	r3, #56	; 0x38
     c02:	4699      	mov	r9, r3
     c04:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     c06:	3301      	adds	r3, #1
     c08:	5cfa      	ldrb	r2, [r7, r3]
     c0a:	2102      	movs	r1, #2
     c0c:	438a      	bics	r2, r1
     c0e:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     c10:	2401      	movs	r4, #1
     c12:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     c14:	4b1c      	ldr	r3, [pc, #112]	; (c88 <dma_allocate+0x124>)
     c16:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c18:	782b      	ldrb	r3, [r5, #0]
     c1a:	4642      	mov	r2, r8
     c1c:	4013      	ands	r3, r2
     c1e:	464a      	mov	r2, r9
     c20:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     c22:	693b      	ldr	r3, [r7, #16]
     c24:	782a      	ldrb	r2, [r5, #0]
     c26:	4094      	lsls	r4, r2
     c28:	43a3      	bics	r3, r4
     c2a:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c2c:	7832      	ldrb	r2, [r6, #0]
     c2e:	0152      	lsls	r2, r2, #5
     c30:	2360      	movs	r3, #96	; 0x60
     c32:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     c34:	7872      	ldrb	r2, [r6, #1]
     c36:	0212      	lsls	r2, r2, #8
     c38:	21f8      	movs	r1, #248	; 0xf8
     c3a:	0149      	lsls	r1, r1, #5
     c3c:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c3e:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     c40:	78b2      	ldrb	r2, [r6, #2]
     c42:	0592      	lsls	r2, r2, #22
     c44:	21c0      	movs	r1, #192	; 0xc0
     c46:	0409      	lsls	r1, r1, #16
     c48:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c4a:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     c4c:	78f1      	ldrb	r1, [r6, #3]
     c4e:	2900      	cmp	r1, #0
     c50:	d004      	beq.n	c5c <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     c52:	2207      	movs	r2, #7
     c54:	400a      	ands	r2, r1
     c56:	2108      	movs	r1, #8
     c58:	430a      	orrs	r2, r1
     c5a:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     c5c:	7932      	ldrb	r2, [r6, #4]
     c5e:	2a00      	cmp	r2, #0
     c60:	d001      	beq.n	c66 <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     c62:	2210      	movs	r2, #16
     c64:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     c66:	4a0b      	ldr	r2, [pc, #44]	; (c94 <dma_allocate+0x130>)
     c68:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     c6a:	4c0e      	ldr	r4, [pc, #56]	; (ca4 <dma_allocate+0x140>)
     c6c:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     c6e:	2300      	movs	r3, #0
     c70:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     c72:	782b      	ldrb	r3, [r5, #0]
     c74:	009b      	lsls	r3, r3, #2
     c76:	4a0c      	ldr	r2, [pc, #48]	; (ca8 <dma_allocate+0x144>)
     c78:	509d      	str	r5, [r3, r2]
     c7a:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     c7c:	2000      	movs	r0, #0
}
     c7e:	bc0c      	pop	{r2, r3}
     c80:	4690      	mov	r8, r2
     c82:	4699      	mov	r9, r3
     c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	00002131 	.word	0x00002131
     c8c:	20000008 	.word	0x20000008
     c90:	40000400 	.word	0x40000400
     c94:	41004800 	.word	0x41004800
     c98:	200002e0 	.word	0x200002e0
     c9c:	20000080 	.word	0x20000080
     ca0:	00000f02 	.word	0x00000f02
     ca4:	00002171 	.word	0x00002171
     ca8:	20000064 	.word	0x20000064

00000cac <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     cac:	b570      	push	{r4, r5, r6, lr}
     cae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     cb0:	4b19      	ldr	r3, [pc, #100]	; (d18 <dma_start_transfer_job+0x6c>)
     cb2:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     cb4:	7c63      	ldrb	r3, [r4, #17]
     cb6:	2b05      	cmp	r3, #5
     cb8:	d008      	beq.n	ccc <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     cba:	69a3      	ldr	r3, [r4, #24]
     cbc:	885b      	ldrh	r3, [r3, #2]
     cbe:	b29b      	uxth	r3, r3
     cc0:	2b00      	cmp	r3, #0
     cc2:	d107      	bne.n	cd4 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     cc4:	4b15      	ldr	r3, [pc, #84]	; (d1c <dma_start_transfer_job+0x70>)
     cc6:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     cc8:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     cca:	bd70      	pop	{r4, r5, r6, pc}
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <dma_start_transfer_job+0x70>)
     cce:	4798      	blx	r3
		return STATUS_BUSY;
     cd0:	2005      	movs	r0, #5
     cd2:	e7fa      	b.n	cca <dma_start_transfer_job+0x1e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     cd4:	2640      	movs	r6, #64	; 0x40
     cd6:	4b12      	ldr	r3, [pc, #72]	; (d20 <dma_start_transfer_job+0x74>)
     cd8:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     cda:	7822      	ldrb	r2, [r4, #0]
     cdc:	2307      	movs	r3, #7
     cde:	401a      	ands	r2, r3
     ce0:	4d10      	ldr	r5, [pc, #64]	; (d24 <dma_start_transfer_job+0x78>)
     ce2:	213f      	movs	r1, #63	; 0x3f
     ce4:	546a      	strb	r2, [r5, r1]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     ce6:	7822      	ldrb	r2, [r4, #0]
     ce8:	490f      	ldr	r1, [pc, #60]	; (d28 <dma_start_transfer_job+0x7c>)
     cea:	5c8a      	ldrb	r2, [r1, r2]
     cec:	4013      	ands	r3, r2
     cee:	224d      	movs	r2, #77	; 0x4d
     cf0:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     cf2:	2305      	movs	r3, #5
     cf4:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     cf6:	7820      	ldrb	r0, [r4, #0]
     cf8:	0100      	lsls	r0, r0, #4
     cfa:	4b0c      	ldr	r3, [pc, #48]	; (d2c <dma_start_transfer_job+0x80>)
     cfc:	18c0      	adds	r0, r0, r3
     cfe:	69a1      	ldr	r1, [r4, #24]
     d00:	3a3d      	subs	r2, #61	; 0x3d
     d02:	4b0b      	ldr	r3, [pc, #44]	; (d30 <dma_start_transfer_job+0x84>)
     d04:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     d06:	5dab      	ldrb	r3, [r5, r6]
     d08:	2202      	movs	r2, #2
     d0a:	4313      	orrs	r3, r2
     d0c:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     d0e:	4b03      	ldr	r3, [pc, #12]	; (d1c <dma_start_transfer_job+0x70>)
     d10:	4798      	blx	r3
	return STATUS_OK;
     d12:	2000      	movs	r0, #0
     d14:	e7d9      	b.n	cca <dma_start_transfer_job+0x1e>
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	00002131 	.word	0x00002131
     d1c:	00002171 	.word	0x00002171
     d20:	e000e100 	.word	0xe000e100
     d24:	41004800 	.word	0x41004800
     d28:	200000d0 	.word	0x200000d0
     d2c:	200002e0 	.word	0x200002e0
     d30:	000036bd 	.word	0x000036bd

00000d34 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     d34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     d36:	780a      	ldrb	r2, [r1, #0]
     d38:	8803      	ldrh	r3, [r0, #0]
     d3a:	2601      	movs	r6, #1
     d3c:	4032      	ands	r2, r6
     d3e:	2401      	movs	r4, #1
     d40:	43a3      	bics	r3, r4
     d42:	4313      	orrs	r3, r2
     d44:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     d46:	784b      	ldrb	r3, [r1, #1]
     d48:	8804      	ldrh	r4, [r0, #0]
     d4a:	2703      	movs	r7, #3
     d4c:	403b      	ands	r3, r7
     d4e:	005b      	lsls	r3, r3, #1
     d50:	2206      	movs	r2, #6
     d52:	4394      	bics	r4, r2
     d54:	431c      	orrs	r4, r3
     d56:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     d58:	788d      	ldrb	r5, [r1, #2]
     d5a:	8804      	ldrh	r4, [r0, #0]
     d5c:	403d      	ands	r5, r7
     d5e:	00ed      	lsls	r5, r5, #3
     d60:	2318      	movs	r3, #24
     d62:	439c      	bics	r4, r3
     d64:	432c      	orrs	r4, r5
     d66:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     d68:	78ca      	ldrb	r2, [r1, #3]
     d6a:	8803      	ldrh	r3, [r0, #0]
     d6c:	403a      	ands	r2, r7
     d6e:	0212      	lsls	r2, r2, #8
     d70:	4c16      	ldr	r4, [pc, #88]	; (dcc <dma_descriptor_create+0x98>)
     d72:	4023      	ands	r3, r4
     d74:	4313      	orrs	r3, r2
     d76:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     d78:	790b      	ldrb	r3, [r1, #4]
     d7a:	8804      	ldrh	r4, [r0, #0]
     d7c:	4033      	ands	r3, r6
     d7e:	029b      	lsls	r3, r3, #10
     d80:	4a13      	ldr	r2, [pc, #76]	; (dd0 <dma_descriptor_create+0x9c>)
     d82:	4014      	ands	r4, r2
     d84:	431c      	orrs	r4, r3
     d86:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     d88:	794d      	ldrb	r5, [r1, #5]
     d8a:	8804      	ldrh	r4, [r0, #0]
     d8c:	4035      	ands	r5, r6
     d8e:	02ed      	lsls	r5, r5, #11
     d90:	4b10      	ldr	r3, [pc, #64]	; (dd4 <dma_descriptor_create+0xa0>)
     d92:	401c      	ands	r4, r3
     d94:	432c      	orrs	r4, r5
     d96:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     d98:	798a      	ldrb	r2, [r1, #6]
     d9a:	8803      	ldrh	r3, [r0, #0]
     d9c:	4032      	ands	r2, r6
     d9e:	0312      	lsls	r2, r2, #12
     da0:	4c0d      	ldr	r4, [pc, #52]	; (dd8 <dma_descriptor_create+0xa4>)
     da2:	4023      	ands	r3, r4
     da4:	4313      	orrs	r3, r2
     da6:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     da8:	79cb      	ldrb	r3, [r1, #7]
     daa:	2207      	movs	r2, #7
     dac:	401a      	ands	r2, r3
     dae:	8803      	ldrh	r3, [r0, #0]
     db0:	0352      	lsls	r2, r2, #13
     db2:	04db      	lsls	r3, r3, #19
     db4:	0cdb      	lsrs	r3, r3, #19
     db6:	4313      	orrs	r3, r2
     db8:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     dba:	890b      	ldrh	r3, [r1, #8]
     dbc:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     dbe:	68cb      	ldr	r3, [r1, #12]
     dc0:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     dc2:	690b      	ldr	r3, [r1, #16]
     dc4:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     dc6:	694b      	ldr	r3, [r1, #20]
     dc8:	60c3      	str	r3, [r0, #12]
}
     dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dcc:	fffffcff 	.word	0xfffffcff
     dd0:	fffffbff 	.word	0xfffffbff
     dd4:	fffff7ff 	.word	0xfffff7ff
     dd8:	ffffefff 	.word	0xffffefff

00000ddc <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     ddc:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     dde:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     de0:	2a05      	cmp	r2, #5
     de2:	d00b      	beq.n	dfc <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     de4:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     de6:	2b00      	cmp	r3, #0
     de8:	d00a      	beq.n	e00 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     dea:	68da      	ldr	r2, [r3, #12]
     dec:	2a00      	cmp	r2, #0
     dee:	d003      	beq.n	df8 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     df0:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     df2:	68da      	ldr	r2, [r3, #12]
     df4:	2a00      	cmp	r2, #0
     df6:	d1fb      	bne.n	df0 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     df8:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     dfa:	2300      	movs	r3, #0
}
     dfc:	0018      	movs	r0, r3
     dfe:	4770      	bx	lr
		resource->descriptor = descriptor;
     e00:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     e02:	2300      	movs	r3, #0
     e04:	e7fa      	b.n	dfc <dma_add_descriptor+0x20>
	...

00000e08 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e08:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     e0a:	2a00      	cmp	r2, #0
     e0c:	d001      	beq.n	e12 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     e0e:	0018      	movs	r0, r3
     e10:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     e12:	008b      	lsls	r3, r1, #2
     e14:	4a06      	ldr	r2, [pc, #24]	; (e30 <extint_register_callback+0x28>)
     e16:	589b      	ldr	r3, [r3, r2]
     e18:	2b00      	cmp	r3, #0
     e1a:	d003      	beq.n	e24 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     e1c:	4283      	cmp	r3, r0
     e1e:	d005      	beq.n	e2c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     e20:	231d      	movs	r3, #29
     e22:	e7f4      	b.n	e0e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     e24:	0089      	lsls	r1, r1, #2
     e26:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     e28:	2300      	movs	r3, #0
     e2a:	e7f0      	b.n	e0e <extint_register_callback+0x6>
		return STATUS_OK;
     e2c:	2300      	movs	r3, #0
     e2e:	e7ee      	b.n	e0e <extint_register_callback+0x6>
     e30:	20000334 	.word	0x20000334

00000e34 <extint_chan_enable_callback>:
		eic->INTFLAG.reg  = (1UL << channel);
		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e34:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     e36:	2900      	cmp	r1, #0
     e38:	d001      	beq.n	e3e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     e3a:	0018      	movs	r0, r3
     e3c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     e3e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     e40:	281f      	cmp	r0, #31
     e42:	d800      	bhi.n	e46 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     e44:	4a03      	ldr	r2, [pc, #12]	; (e54 <extint_chan_enable_callback+0x20>)
		eic->INTFLAG.reg  = (1UL << channel);
     e46:	2301      	movs	r3, #1
     e48:	4083      	lsls	r3, r0
     e4a:	6113      	str	r3, [r2, #16]
		eic->INTENSET.reg = (1UL << channel);
     e4c:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     e4e:	2300      	movs	r3, #0
     e50:	e7f3      	b.n	e3a <extint_chan_enable_callback+0x6>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	40001800 	.word	0x40001800

00000e58 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e58:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     e5a:	2900      	cmp	r1, #0
     e5c:	d001      	beq.n	e62 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
     e5e:	0018      	movs	r0, r3
     e60:	4770      	bx	lr
		return NULL;
     e62:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     e64:	281f      	cmp	r0, #31
     e66:	d800      	bhi.n	e6a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
     e68:	4a02      	ldr	r2, [pc, #8]	; (e74 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
     e6a:	2301      	movs	r3, #1
     e6c:	4083      	lsls	r3, r0
     e6e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
     e70:	2300      	movs	r3, #0
     e72:	e7f4      	b.n	e5e <extint_chan_disable_callback+0x6>
     e74:	40001800 	.word	0x40001800

00000e78 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     e78:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	//port_pin_set_output_level(PROFILE_PIN,true);
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     e7a:	2200      	movs	r2, #0
     e7c:	4b10      	ldr	r3, [pc, #64]	; (ec0 <EIC_Handler+0x48>)
     e7e:	701a      	strb	r2, [r3, #0]
     e80:	2300      	movs	r3, #0
     e82:	4910      	ldr	r1, [pc, #64]	; (ec4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     e84:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e86:	4e10      	ldr	r6, [pc, #64]	; (ec8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     e88:	4c0d      	ldr	r4, [pc, #52]	; (ec0 <EIC_Handler+0x48>)
     e8a:	e00a      	b.n	ea2 <EIC_Handler+0x2a>
		return eics[eic_index];
     e8c:	490d      	ldr	r1, [pc, #52]	; (ec4 <EIC_Handler+0x4c>)
     e8e:	e008      	b.n	ea2 <EIC_Handler+0x2a>
     e90:	7823      	ldrb	r3, [r4, #0]
     e92:	3301      	adds	r3, #1
     e94:	b2db      	uxtb	r3, r3
     e96:	7023      	strb	r3, [r4, #0]
     e98:	2b0f      	cmp	r3, #15
     e9a:	d810      	bhi.n	ebe <EIC_Handler+0x46>
		return NULL;
     e9c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     e9e:	2b1f      	cmp	r3, #31
     ea0:	d9f4      	bls.n	e8c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     ea2:	0028      	movs	r0, r5
     ea4:	4018      	ands	r0, r3
     ea6:	2201      	movs	r2, #1
     ea8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     eaa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     eac:	4210      	tst	r0, r2
     eae:	d0ef      	beq.n	e90 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     eb0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     eb2:	009b      	lsls	r3, r3, #2
     eb4:	599b      	ldr	r3, [r3, r6]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d0ea      	beq.n	e90 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     eba:	4798      	blx	r3
     ebc:	e7e8      	b.n	e90 <EIC_Handler+0x18>
			}
		}
	}
	//port_pin_set_output_level(PROFILE_PIN,false);
}
     ebe:	bd70      	pop	{r4, r5, r6, pc}
     ec0:	20000330 	.word	0x20000330
     ec4:	40001800 	.word	0x40001800
     ec8:	20000334 	.word	0x20000334

00000ecc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     ecc:	4a04      	ldr	r2, [pc, #16]	; (ee0 <_extint_enable+0x14>)
     ece:	7813      	ldrb	r3, [r2, #0]
     ed0:	2102      	movs	r1, #2
     ed2:	430b      	orrs	r3, r1
     ed4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     ed6:	7853      	ldrb	r3, [r2, #1]
     ed8:	b25b      	sxtb	r3, r3
     eda:	2b00      	cmp	r3, #0
     edc:	dbfb      	blt.n	ed6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     ede:	4770      	bx	lr
     ee0:	40001800 	.word	0x40001800

00000ee4 <_system_extint_init>:
{
     ee4:	b500      	push	{lr}
     ee6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     ee8:	4a12      	ldr	r2, [pc, #72]	; (f34 <_system_extint_init+0x50>)
     eea:	6993      	ldr	r3, [r2, #24]
     eec:	2140      	movs	r1, #64	; 0x40
     eee:	430b      	orrs	r3, r1
     ef0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ef2:	a901      	add	r1, sp, #4
     ef4:	2300      	movs	r3, #0
     ef6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ef8:	2005      	movs	r0, #5
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <_system_extint_init+0x54>)
     efc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     efe:	2005      	movs	r0, #5
     f00:	4b0e      	ldr	r3, [pc, #56]	; (f3c <_system_extint_init+0x58>)
     f02:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     f04:	4a0e      	ldr	r2, [pc, #56]	; (f40 <_system_extint_init+0x5c>)
     f06:	7813      	ldrb	r3, [r2, #0]
     f08:	2101      	movs	r1, #1
     f0a:	430b      	orrs	r3, r1
     f0c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     f0e:	7853      	ldrb	r3, [r2, #1]
     f10:	b25b      	sxtb	r3, r3
     f12:	2b00      	cmp	r3, #0
     f14:	dbfb      	blt.n	f0e <_system_extint_init+0x2a>
     f16:	4b0b      	ldr	r3, [pc, #44]	; (f44 <_system_extint_init+0x60>)
     f18:	0019      	movs	r1, r3
     f1a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     f1c:	2200      	movs	r2, #0
     f1e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     f20:	4299      	cmp	r1, r3
     f22:	d1fc      	bne.n	f1e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f24:	2210      	movs	r2, #16
     f26:	4b08      	ldr	r3, [pc, #32]	; (f48 <_system_extint_init+0x64>)
     f28:	601a      	str	r2, [r3, #0]
	_extint_enable();
     f2a:	4b08      	ldr	r3, [pc, #32]	; (f4c <_system_extint_init+0x68>)
     f2c:	4798      	blx	r3
}
     f2e:	b003      	add	sp, #12
     f30:	bd00      	pop	{pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	40000400 	.word	0x40000400
     f38:	000027e1 	.word	0x000027e1
     f3c:	00002755 	.word	0x00002755
     f40:	40001800 	.word	0x40001800
     f44:	20000334 	.word	0x20000334
     f48:	e000e100 	.word	0xe000e100
     f4c:	00000ecd 	.word	0x00000ecd

00000f50 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     f50:	2300      	movs	r3, #0
     f52:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     f54:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     f56:	2201      	movs	r2, #1
     f58:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     f5a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     f5c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     f5e:	3302      	adds	r3, #2
     f60:	72c3      	strb	r3, [r0, #11]
}
     f62:	4770      	bx	lr

00000f64 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     f64:	b5f0      	push	{r4, r5, r6, r7, lr}
     f66:	b083      	sub	sp, #12
     f68:	0005      	movs	r5, r0
     f6a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f6c:	a901      	add	r1, sp, #4
     f6e:	2300      	movs	r3, #0
     f70:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f72:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     f74:	7923      	ldrb	r3, [r4, #4]
     f76:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     f78:	7a23      	ldrb	r3, [r4, #8]
     f7a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     f7c:	7820      	ldrb	r0, [r4, #0]
     f7e:	4b15      	ldr	r3, [pc, #84]	; (fd4 <extint_chan_set_config+0x70>)
     f80:	4798      	blx	r3
		return NULL;
     f82:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     f84:	2d1f      	cmp	r5, #31
     f86:	d800      	bhi.n	f8a <extint_chan_set_config+0x26>
		return eics[eic_index];
     f88:	4813      	ldr	r0, [pc, #76]	; (fd8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     f8a:	2207      	movs	r2, #7
     f8c:	402a      	ands	r2, r5
     f8e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     f90:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     f92:	7aa3      	ldrb	r3, [r4, #10]
     f94:	2b00      	cmp	r3, #0
     f96:	d001      	beq.n	f9c <extint_chan_set_config+0x38>
     f98:	2308      	movs	r3, #8
     f9a:	431f      	orrs	r7, r3
     f9c:	08eb      	lsrs	r3, r5, #3
     f9e:	009b      	lsls	r3, r3, #2
     fa0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     fa2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     fa4:	260f      	movs	r6, #15
     fa6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     fa8:	43b1      	bics	r1, r6
			(new_config << config_pos);
     faa:	4097      	lsls	r7, r2
     fac:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     fae:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     fb0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     fb2:	7a63      	ldrb	r3, [r4, #9]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d106      	bne.n	fc6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     fb8:	6943      	ldr	r3, [r0, #20]
     fba:	2201      	movs	r2, #1
     fbc:	40aa      	lsls	r2, r5
     fbe:	4393      	bics	r3, r2
     fc0:	6143      	str	r3, [r0, #20]
	}
}
     fc2:	b003      	add	sp, #12
     fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     fc6:	6942      	ldr	r2, [r0, #20]
     fc8:	2301      	movs	r3, #1
     fca:	40ab      	lsls	r3, r5
     fcc:	4313      	orrs	r3, r2
     fce:	6143      	str	r3, [r0, #20]
     fd0:	e7f7      	b.n	fc2 <extint_chan_set_config+0x5e>
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	000028d9 	.word	0x000028d9
     fd8:	40001800 	.word	0x40001800

00000fdc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     fdc:	b500      	push	{lr}
     fde:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fe0:	ab01      	add	r3, sp, #4
     fe2:	2280      	movs	r2, #128	; 0x80
     fe4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     fe6:	780a      	ldrb	r2, [r1, #0]
     fe8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     fea:	784a      	ldrb	r2, [r1, #1]
     fec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     fee:	788a      	ldrb	r2, [r1, #2]
     ff0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     ff2:	0019      	movs	r1, r3
     ff4:	4b01      	ldr	r3, [pc, #4]	; (ffc <port_pin_set_config+0x20>)
     ff6:	4798      	blx	r3
}
     ff8:	b003      	add	sp, #12
     ffa:	bd00      	pop	{pc}
     ffc:	000028d9 	.word	0x000028d9

00001000 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1000:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1002:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1004:	2340      	movs	r3, #64	; 0x40
    1006:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1008:	4281      	cmp	r1, r0
    100a:	d202      	bcs.n	1012 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    100c:	0018      	movs	r0, r3
    100e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1010:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1012:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1014:	1c63      	adds	r3, r4, #1
    1016:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1018:	4288      	cmp	r0, r1
    101a:	d9f9      	bls.n	1010 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    101c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    101e:	2cff      	cmp	r4, #255	; 0xff
    1020:	d8f4      	bhi.n	100c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1022:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1024:	2300      	movs	r3, #0
    1026:	e7f1      	b.n	100c <_sercom_get_sync_baud_val+0xc>

00001028 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1028:	b510      	push	{r4, lr}
    102a:	b082      	sub	sp, #8
    102c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    102e:	4b0e      	ldr	r3, [pc, #56]	; (1068 <sercom_set_gclk_generator+0x40>)
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	d007      	beq.n	1046 <sercom_set_gclk_generator+0x1e>
    1036:	2900      	cmp	r1, #0
    1038:	d105      	bne.n	1046 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    103a:	4b0b      	ldr	r3, [pc, #44]	; (1068 <sercom_set_gclk_generator+0x40>)
    103c:	785b      	ldrb	r3, [r3, #1]
    103e:	4283      	cmp	r3, r0
    1040:	d010      	beq.n	1064 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1042:	201d      	movs	r0, #29
    1044:	e00c      	b.n	1060 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1046:	a901      	add	r1, sp, #4
    1048:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    104a:	200d      	movs	r0, #13
    104c:	4b07      	ldr	r3, [pc, #28]	; (106c <sercom_set_gclk_generator+0x44>)
    104e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1050:	200d      	movs	r0, #13
    1052:	4b07      	ldr	r3, [pc, #28]	; (1070 <sercom_set_gclk_generator+0x48>)
    1054:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1056:	4b04      	ldr	r3, [pc, #16]	; (1068 <sercom_set_gclk_generator+0x40>)
    1058:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    105a:	2201      	movs	r2, #1
    105c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    105e:	2000      	movs	r0, #0
}
    1060:	b002      	add	sp, #8
    1062:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1064:	2000      	movs	r0, #0
    1066:	e7fb      	b.n	1060 <sercom_set_gclk_generator+0x38>
    1068:	200000d8 	.word	0x200000d8
    106c:	000027e1 	.word	0x000027e1
    1070:	00002755 	.word	0x00002755

00001074 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1074:	4b20      	ldr	r3, [pc, #128]	; (10f8 <_sercom_get_default_pad+0x84>)
    1076:	4298      	cmp	r0, r3
    1078:	d017      	beq.n	10aa <_sercom_get_default_pad+0x36>
    107a:	4b20      	ldr	r3, [pc, #128]	; (10fc <_sercom_get_default_pad+0x88>)
    107c:	4298      	cmp	r0, r3
    107e:	d024      	beq.n	10ca <_sercom_get_default_pad+0x56>
    1080:	4b1f      	ldr	r3, [pc, #124]	; (1100 <_sercom_get_default_pad+0x8c>)
    1082:	4298      	cmp	r0, r3
    1084:	d001      	beq.n	108a <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1086:	2000      	movs	r0, #0
}
    1088:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    108a:	2901      	cmp	r1, #1
    108c:	d007      	beq.n	109e <_sercom_get_default_pad+0x2a>
    108e:	2900      	cmp	r1, #0
    1090:	d02b      	beq.n	10ea <_sercom_get_default_pad+0x76>
    1092:	2902      	cmp	r1, #2
    1094:	d005      	beq.n	10a2 <_sercom_get_default_pad+0x2e>
    1096:	2903      	cmp	r1, #3
    1098:	d005      	beq.n	10a6 <_sercom_get_default_pad+0x32>
	return 0;
    109a:	2000      	movs	r0, #0
    109c:	e7f4      	b.n	1088 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    109e:	4819      	ldr	r0, [pc, #100]	; (1104 <_sercom_get_default_pad+0x90>)
    10a0:	e7f2      	b.n	1088 <_sercom_get_default_pad+0x14>
    10a2:	4819      	ldr	r0, [pc, #100]	; (1108 <_sercom_get_default_pad+0x94>)
    10a4:	e7f0      	b.n	1088 <_sercom_get_default_pad+0x14>
    10a6:	4819      	ldr	r0, [pc, #100]	; (110c <_sercom_get_default_pad+0x98>)
    10a8:	e7ee      	b.n	1088 <_sercom_get_default_pad+0x14>
    10aa:	2901      	cmp	r1, #1
    10ac:	d007      	beq.n	10be <_sercom_get_default_pad+0x4a>
    10ae:	2900      	cmp	r1, #0
    10b0:	d01d      	beq.n	10ee <_sercom_get_default_pad+0x7a>
    10b2:	2902      	cmp	r1, #2
    10b4:	d005      	beq.n	10c2 <_sercom_get_default_pad+0x4e>
    10b6:	2903      	cmp	r1, #3
    10b8:	d005      	beq.n	10c6 <_sercom_get_default_pad+0x52>
	return 0;
    10ba:	2000      	movs	r0, #0
    10bc:	e7e4      	b.n	1088 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10be:	4814      	ldr	r0, [pc, #80]	; (1110 <_sercom_get_default_pad+0x9c>)
    10c0:	e7e2      	b.n	1088 <_sercom_get_default_pad+0x14>
    10c2:	4814      	ldr	r0, [pc, #80]	; (1114 <_sercom_get_default_pad+0xa0>)
    10c4:	e7e0      	b.n	1088 <_sercom_get_default_pad+0x14>
    10c6:	4814      	ldr	r0, [pc, #80]	; (1118 <_sercom_get_default_pad+0xa4>)
    10c8:	e7de      	b.n	1088 <_sercom_get_default_pad+0x14>
    10ca:	2901      	cmp	r1, #1
    10cc:	d007      	beq.n	10de <_sercom_get_default_pad+0x6a>
    10ce:	2900      	cmp	r1, #0
    10d0:	d00f      	beq.n	10f2 <_sercom_get_default_pad+0x7e>
    10d2:	2902      	cmp	r1, #2
    10d4:	d005      	beq.n	10e2 <_sercom_get_default_pad+0x6e>
    10d6:	2903      	cmp	r1, #3
    10d8:	d005      	beq.n	10e6 <_sercom_get_default_pad+0x72>
	return 0;
    10da:	2000      	movs	r0, #0
    10dc:	e7d4      	b.n	1088 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10de:	480f      	ldr	r0, [pc, #60]	; (111c <_sercom_get_default_pad+0xa8>)
    10e0:	e7d2      	b.n	1088 <_sercom_get_default_pad+0x14>
    10e2:	480f      	ldr	r0, [pc, #60]	; (1120 <_sercom_get_default_pad+0xac>)
    10e4:	e7d0      	b.n	1088 <_sercom_get_default_pad+0x14>
    10e6:	480f      	ldr	r0, [pc, #60]	; (1124 <_sercom_get_default_pad+0xb0>)
    10e8:	e7ce      	b.n	1088 <_sercom_get_default_pad+0x14>
    10ea:	480f      	ldr	r0, [pc, #60]	; (1128 <_sercom_get_default_pad+0xb4>)
    10ec:	e7cc      	b.n	1088 <_sercom_get_default_pad+0x14>
    10ee:	480f      	ldr	r0, [pc, #60]	; (112c <_sercom_get_default_pad+0xb8>)
    10f0:	e7ca      	b.n	1088 <_sercom_get_default_pad+0x14>
    10f2:	480f      	ldr	r0, [pc, #60]	; (1130 <_sercom_get_default_pad+0xbc>)
    10f4:	e7c8      	b.n	1088 <_sercom_get_default_pad+0x14>
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	42000c00 	.word	0x42000c00
    10fc:	42001000 	.word	0x42001000
    1100:	42000800 	.word	0x42000800
    1104:	00050003 	.word	0x00050003
    1108:	00060003 	.word	0x00060003
    110c:	00070003 	.word	0x00070003
    1110:	00170002 	.word	0x00170002
    1114:	001e0003 	.word	0x001e0003
    1118:	001f0003 	.word	0x001f0003
    111c:	00170003 	.word	0x00170003
    1120:	00100003 	.word	0x00100003
    1124:	00190003 	.word	0x00190003
    1128:	00040003 	.word	0x00040003
    112c:	00160002 	.word	0x00160002
    1130:	00160003 	.word	0x00160003

00001134 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1134:	b530      	push	{r4, r5, lr}
    1136:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1138:	aa01      	add	r2, sp, #4
    113a:	4b0b      	ldr	r3, [pc, #44]	; (1168 <_sercom_get_sercom_inst_index+0x34>)
    113c:	cb32      	ldmia	r3!, {r1, r4, r5}
    113e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1140:	0003      	movs	r3, r0
    1142:	9a01      	ldr	r2, [sp, #4]
    1144:	4282      	cmp	r2, r0
    1146:	d00c      	beq.n	1162 <_sercom_get_sercom_inst_index+0x2e>
    1148:	9a02      	ldr	r2, [sp, #8]
    114a:	4282      	cmp	r2, r0
    114c:	d007      	beq.n	115e <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    114e:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1150:	9a03      	ldr	r2, [sp, #12]
    1152:	429a      	cmp	r2, r3
    1154:	d001      	beq.n	115a <_sercom_get_sercom_inst_index+0x26>
}
    1156:	b005      	add	sp, #20
    1158:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    115a:	3002      	adds	r0, #2
    115c:	e002      	b.n	1164 <_sercom_get_sercom_inst_index+0x30>
    115e:	2001      	movs	r0, #1
    1160:	e000      	b.n	1164 <_sercom_get_sercom_inst_index+0x30>
    1162:	2000      	movs	r0, #0
			return i;
    1164:	b2c0      	uxtb	r0, r0
    1166:	e7f6      	b.n	1156 <_sercom_get_sercom_inst_index+0x22>
    1168:	000036e4 	.word	0x000036e4

0000116c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    116c:	4770      	bx	lr
	...

00001170 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1170:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1172:	4b0a      	ldr	r3, [pc, #40]	; (119c <_sercom_set_handler+0x2c>)
    1174:	781b      	ldrb	r3, [r3, #0]
    1176:	2b00      	cmp	r3, #0
    1178:	d10c      	bne.n	1194 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    117a:	4c09      	ldr	r4, [pc, #36]	; (11a0 <_sercom_set_handler+0x30>)
    117c:	4d09      	ldr	r5, [pc, #36]	; (11a4 <_sercom_set_handler+0x34>)
    117e:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1180:	4b09      	ldr	r3, [pc, #36]	; (11a8 <_sercom_set_handler+0x38>)
    1182:	2200      	movs	r2, #0
    1184:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1186:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1188:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    118a:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    118c:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    118e:	3201      	adds	r2, #1
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <_sercom_set_handler+0x2c>)
    1192:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1194:	0080      	lsls	r0, r0, #2
    1196:	4b02      	ldr	r3, [pc, #8]	; (11a0 <_sercom_set_handler+0x30>)
    1198:	50c1      	str	r1, [r0, r3]
}
    119a:	bd30      	pop	{r4, r5, pc}
    119c:	200000da 	.word	0x200000da
    11a0:	200000dc 	.word	0x200000dc
    11a4:	0000116d 	.word	0x0000116d
    11a8:	20000374 	.word	0x20000374

000011ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    11ac:	b510      	push	{r4, lr}
    11ae:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    11b0:	ac01      	add	r4, sp, #4
    11b2:	2309      	movs	r3, #9
    11b4:	7023      	strb	r3, [r4, #0]
    11b6:	3301      	adds	r3, #1
    11b8:	7063      	strb	r3, [r4, #1]
    11ba:	3301      	adds	r3, #1
    11bc:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11be:	4b02      	ldr	r3, [pc, #8]	; (11c8 <_sercom_get_interrupt_vector+0x1c>)
    11c0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11c2:	5620      	ldrsb	r0, [r4, r0]
}
    11c4:	b002      	add	sp, #8
    11c6:	bd10      	pop	{r4, pc}
    11c8:	00001135 	.word	0x00001135

000011cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11cc:	b510      	push	{r4, lr}
    11ce:	4b02      	ldr	r3, [pc, #8]	; (11d8 <SERCOM0_Handler+0xc>)
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	2000      	movs	r0, #0
    11d4:	4798      	blx	r3
    11d6:	bd10      	pop	{r4, pc}
    11d8:	200000dc 	.word	0x200000dc

000011dc <SERCOM1_Handler>:
    11dc:	b510      	push	{r4, lr}
    11de:	4b02      	ldr	r3, [pc, #8]	; (11e8 <SERCOM1_Handler+0xc>)
    11e0:	685b      	ldr	r3, [r3, #4]
    11e2:	2001      	movs	r0, #1
    11e4:	4798      	blx	r3
    11e6:	bd10      	pop	{r4, pc}
    11e8:	200000dc 	.word	0x200000dc

000011ec <SERCOM2_Handler>:
    11ec:	b510      	push	{r4, lr}
    11ee:	4b02      	ldr	r3, [pc, #8]	; (11f8 <SERCOM2_Handler+0xc>)
    11f0:	689b      	ldr	r3, [r3, #8]
    11f2:	2002      	movs	r0, #2
    11f4:	4798      	blx	r3
    11f6:	bd10      	pop	{r4, pc}
    11f8:	200000dc 	.word	0x200000dc

000011fc <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1200:	6804      	ldr	r4, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1202:	0020      	movs	r0, r4
    1204:	4b0e      	ldr	r3, [pc, #56]	; (1240 <spi_reset+0x44>)
    1206:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1208:	231f      	movs	r3, #31
    120a:	4018      	ands	r0, r3
    120c:	3b1e      	subs	r3, #30
    120e:	4083      	lsls	r3, r0
    1210:	2280      	movs	r2, #128	; 0x80
    1212:	490c      	ldr	r1, [pc, #48]	; (1244 <spi_reset+0x48>)
    1214:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1216:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1218:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    121a:	2b00      	cmp	r3, #0
    121c:	d1fc      	bne.n	1218 <spi_reset+0x1c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    121e:	338f      	adds	r3, #143	; 0x8f
    1220:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1222:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1224:	6823      	ldr	r3, [r4, #0]
    1226:	2202      	movs	r2, #2
    1228:	4393      	bics	r3, r2
    122a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    122c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    122e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1230:	2b00      	cmp	r3, #0
    1232:	d1fc      	bne.n	122e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1234:	6823      	ldr	r3, [r4, #0]
    1236:	2201      	movs	r2, #1
    1238:	4313      	orrs	r3, r2
    123a:	6023      	str	r3, [r4, #0]
}
    123c:	bd70      	pop	{r4, r5, r6, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	000011ad 	.word	0x000011ad
    1244:	e000e100 	.word	0xe000e100

00001248 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1248:	b5f0      	push	{r4, r5, r6, r7, lr}
    124a:	b08b      	sub	sp, #44	; 0x2c
    124c:	0005      	movs	r5, r0
    124e:	000c      	movs	r4, r1
    1250:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1252:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1254:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1256:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1258:	079b      	lsls	r3, r3, #30
    125a:	d501      	bpl.n	1260 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    125c:	b00b      	add	sp, #44	; 0x2c
    125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1260:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1262:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1264:	07db      	lsls	r3, r3, #31
    1266:	d4f9      	bmi.n	125c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1268:	0008      	movs	r0, r1
    126a:	4b6f      	ldr	r3, [pc, #444]	; (1428 <spi_init+0x1e0>)
    126c:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    126e:	4a6f      	ldr	r2, [pc, #444]	; (142c <spi_init+0x1e4>)
    1270:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1272:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1274:	2301      	movs	r3, #1
    1276:	40bb      	lsls	r3, r7
    1278:	430b      	orrs	r3, r1
    127a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    127c:	a909      	add	r1, sp, #36	; 0x24
    127e:	2724      	movs	r7, #36	; 0x24
    1280:	5df3      	ldrb	r3, [r6, r7]
    1282:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1284:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1286:	b2c3      	uxtb	r3, r0
    1288:	9301      	str	r3, [sp, #4]
    128a:	0018      	movs	r0, r3
    128c:	4b68      	ldr	r3, [pc, #416]	; (1430 <spi_init+0x1e8>)
    128e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1290:	9801      	ldr	r0, [sp, #4]
    1292:	4b68      	ldr	r3, [pc, #416]	; (1434 <spi_init+0x1ec>)
    1294:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1296:	5df0      	ldrb	r0, [r6, r7]
    1298:	2100      	movs	r1, #0
    129a:	4b67      	ldr	r3, [pc, #412]	; (1438 <spi_init+0x1f0>)
    129c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    129e:	7833      	ldrb	r3, [r6, #0]
    12a0:	2b01      	cmp	r3, #1
    12a2:	d03f      	beq.n	1324 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    12a4:	7833      	ldrb	r3, [r6, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d103      	bne.n	12b2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    12aa:	6823      	ldr	r3, [r4, #0]
    12ac:	2208      	movs	r2, #8
    12ae:	4313      	orrs	r3, r2
    12b0:	6023      	str	r3, [r4, #0]
    12b2:	002b      	movs	r3, r5
    12b4:	330c      	adds	r3, #12
    12b6:	0029      	movs	r1, r5
    12b8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    12ba:	2200      	movs	r2, #0
    12bc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    12be:	428b      	cmp	r3, r1
    12c0:	d1fc      	bne.n	12bc <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    12c2:	2300      	movs	r3, #0
    12c4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    12c6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    12c8:	2400      	movs	r4, #0
    12ca:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    12cc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    12ce:	3336      	adds	r3, #54	; 0x36
    12d0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    12d2:	3301      	adds	r3, #1
    12d4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    12d6:	3301      	adds	r3, #1
    12d8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    12da:	3b35      	subs	r3, #53	; 0x35
    12dc:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    12de:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    12e0:	6828      	ldr	r0, [r5, #0]
    12e2:	4b51      	ldr	r3, [pc, #324]	; (1428 <spi_init+0x1e0>)
    12e4:	4798      	blx	r3
    12e6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    12e8:	4954      	ldr	r1, [pc, #336]	; (143c <spi_init+0x1f4>)
    12ea:	4b55      	ldr	r3, [pc, #340]	; (1440 <spi_init+0x1f8>)
    12ec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12ee:	00bf      	lsls	r7, r7, #2
    12f0:	4b54      	ldr	r3, [pc, #336]	; (1444 <spi_init+0x1fc>)
    12f2:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    12f4:	682f      	ldr	r7, [r5, #0]
    12f6:	ab04      	add	r3, sp, #16
    12f8:	2280      	movs	r2, #128	; 0x80
    12fa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12fc:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12fe:	3a7f      	subs	r2, #127	; 0x7f
    1300:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1302:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1304:	7833      	ldrb	r3, [r6, #0]
    1306:	2b00      	cmp	r3, #0
    1308:	d102      	bne.n	1310 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    130a:	2200      	movs	r2, #0
    130c:	ab04      	add	r3, sp, #16
    130e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1310:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1312:	9305      	str	r3, [sp, #20]
    1314:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1316:	9306      	str	r3, [sp, #24]
    1318:	6b33      	ldr	r3, [r6, #48]	; 0x30
    131a:	9307      	str	r3, [sp, #28]
    131c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    131e:	9308      	str	r3, [sp, #32]
    1320:	2400      	movs	r4, #0
    1322:	e00b      	b.n	133c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1324:	6823      	ldr	r3, [r4, #0]
    1326:	220c      	movs	r2, #12
    1328:	4313      	orrs	r3, r2
    132a:	6023      	str	r3, [r4, #0]
    132c:	e7ba      	b.n	12a4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    132e:	0038      	movs	r0, r7
    1330:	4b45      	ldr	r3, [pc, #276]	; (1448 <spi_init+0x200>)
    1332:	4798      	blx	r3
    1334:	e00a      	b.n	134c <spi_init+0x104>
    1336:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1338:	2c04      	cmp	r4, #4
    133a:	d010      	beq.n	135e <spi_init+0x116>
    133c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    133e:	00a3      	lsls	r3, r4, #2
    1340:	aa02      	add	r2, sp, #8
    1342:	200c      	movs	r0, #12
    1344:	1812      	adds	r2, r2, r0
    1346:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1348:	2800      	cmp	r0, #0
    134a:	d0f0      	beq.n	132e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    134c:	1c43      	adds	r3, r0, #1
    134e:	d0f2      	beq.n	1336 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1350:	a904      	add	r1, sp, #16
    1352:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1354:	0c00      	lsrs	r0, r0, #16
    1356:	b2c0      	uxtb	r0, r0
    1358:	4b3c      	ldr	r3, [pc, #240]	; (144c <spi_init+0x204>)
    135a:	4798      	blx	r3
    135c:	e7eb      	b.n	1336 <spi_init+0xee>
	module->mode             = config->mode;
    135e:	7833      	ldrb	r3, [r6, #0]
    1360:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1362:	7c33      	ldrb	r3, [r6, #16]
    1364:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1366:	7cb3      	ldrb	r3, [r6, #18]
    1368:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    136a:	7d33      	ldrb	r3, [r6, #20]
    136c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    136e:	2200      	movs	r2, #0
    1370:	ab02      	add	r3, sp, #8
    1372:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1374:	7833      	ldrb	r3, [r6, #0]
    1376:	2b01      	cmp	r3, #1
    1378:	d012      	beq.n	13a0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    137a:	7833      	ldrb	r3, [r6, #0]
    137c:	2b00      	cmp	r3, #0
    137e:	d126      	bne.n	13ce <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1380:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1382:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    1384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1386:	7ff1      	ldrb	r1, [r6, #31]
    1388:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    138a:	7fb4      	ldrb	r4, [r6, #30]
    138c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    138e:	4319      	orrs	r1, r3
    1390:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1392:	2320      	movs	r3, #32
    1394:	5cf3      	ldrb	r3, [r6, r3]
    1396:	2b00      	cmp	r3, #0
    1398:	d01b      	beq.n	13d2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    139a:	2340      	movs	r3, #64	; 0x40
    139c:	431a      	orrs	r2, r3
    139e:	e018      	b.n	13d2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13a0:	6828      	ldr	r0, [r5, #0]
    13a2:	4b21      	ldr	r3, [pc, #132]	; (1428 <spi_init+0x1e0>)
    13a4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13a6:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    13a8:	b2c0      	uxtb	r0, r0
    13aa:	4b29      	ldr	r3, [pc, #164]	; (1450 <spi_init+0x208>)
    13ac:	4798      	blx	r3
    13ae:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    13b0:	ab02      	add	r3, sp, #8
    13b2:	1d9a      	adds	r2, r3, #6
    13b4:	69b0      	ldr	r0, [r6, #24]
    13b6:	4b27      	ldr	r3, [pc, #156]	; (1454 <spi_init+0x20c>)
    13b8:	4798      	blx	r3
    13ba:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    13bc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    13be:	2b00      	cmp	r3, #0
    13c0:	d000      	beq.n	13c4 <spi_init+0x17c>
    13c2:	e74b      	b.n	125c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    13c4:	ab02      	add	r3, sp, #8
    13c6:	3306      	adds	r3, #6
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	733b      	strb	r3, [r7, #12]
    13cc:	e7d5      	b.n	137a <spi_init+0x132>
	uint32_t ctrlb = 0;
    13ce:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    13d0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    13d2:	6873      	ldr	r3, [r6, #4]
    13d4:	68b1      	ldr	r1, [r6, #8]
    13d6:	430b      	orrs	r3, r1
    13d8:	68f1      	ldr	r1, [r6, #12]
    13da:	430b      	orrs	r3, r1
    13dc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    13de:	7c31      	ldrb	r1, [r6, #16]
    13e0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    13e2:	7c71      	ldrb	r1, [r6, #17]
    13e4:	2900      	cmp	r1, #0
    13e6:	d103      	bne.n	13f0 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13e8:	491b      	ldr	r1, [pc, #108]	; (1458 <spi_init+0x210>)
    13ea:	7889      	ldrb	r1, [r1, #2]
    13ec:	0789      	lsls	r1, r1, #30
    13ee:	d501      	bpl.n	13f4 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    13f0:	2180      	movs	r1, #128	; 0x80
    13f2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    13f4:	7cb1      	ldrb	r1, [r6, #18]
    13f6:	2900      	cmp	r1, #0
    13f8:	d002      	beq.n	1400 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    13fa:	2180      	movs	r1, #128	; 0x80
    13fc:	0289      	lsls	r1, r1, #10
    13fe:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1400:	7cf1      	ldrb	r1, [r6, #19]
    1402:	2900      	cmp	r1, #0
    1404:	d002      	beq.n	140c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1406:	2180      	movs	r1, #128	; 0x80
    1408:	0089      	lsls	r1, r1, #2
    140a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    140c:	7d31      	ldrb	r1, [r6, #20]
    140e:	2900      	cmp	r1, #0
    1410:	d002      	beq.n	1418 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1412:	2180      	movs	r1, #128	; 0x80
    1414:	0189      	lsls	r1, r1, #6
    1416:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1418:	6839      	ldr	r1, [r7, #0]
    141a:	430b      	orrs	r3, r1
    141c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	431a      	orrs	r2, r3
    1422:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1424:	2000      	movs	r0, #0
    1426:	e719      	b.n	125c <spi_init+0x14>
    1428:	00001135 	.word	0x00001135
    142c:	40000400 	.word	0x40000400
    1430:	000027e1 	.word	0x000027e1
    1434:	00002755 	.word	0x00002755
    1438:	00001029 	.word	0x00001029
    143c:	000014bd 	.word	0x000014bd
    1440:	00001171 	.word	0x00001171
    1444:	20000374 	.word	0x20000374
    1448:	00001075 	.word	0x00001075
    144c:	000028d9 	.word	0x000028d9
    1450:	000027fd 	.word	0x000027fd
    1454:	00001001 	.word	0x00001001
    1458:	41002000 	.word	0x41002000

0000145c <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    145c:	1c93      	adds	r3, r2, #2
    145e:	009b      	lsls	r3, r3, #2
    1460:	18c3      	adds	r3, r0, r3
    1462:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    1464:	2136      	movs	r1, #54	; 0x36
    1466:	2301      	movs	r3, #1
    1468:	4093      	lsls	r3, r2
    146a:	001a      	movs	r2, r3
    146c:	5c43      	ldrb	r3, [r0, r1]
    146e:	4313      	orrs	r3, r2
    1470:	5443      	strb	r3, [r0, r1]
}
    1472:	4770      	bx	lr

00001474 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1474:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);
	
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1476:	2417      	movs	r4, #23
	if (length == 0) {
    1478:	2b00      	cmp	r3, #0
    147a:	d101      	bne.n	1480 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
	
	return STATUS_OK;
}
    147c:	0020      	movs	r0, r4
    147e:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    1480:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1482:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    1484:	2d00      	cmp	r5, #0
    1486:	d0f9      	beq.n	147c <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    1488:	341c      	adds	r4, #28
    148a:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    148c:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    148e:	2d05      	cmp	r5, #5
    1490:	d0f4      	beq.n	147c <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    1492:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    1494:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    1496:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    1498:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    149a:	2205      	movs	r2, #5
    149c:	2338      	movs	r3, #56	; 0x38
    149e:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
    14a0:	3b36      	subs	r3, #54	; 0x36
    14a2:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    14a4:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    14a6:	759a      	strb	r2, [r3, #22]
	hw->INTFLAG.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    14a8:	3280      	adds	r2, #128	; 0x80
    14aa:	761a      	strb	r2, [r3, #24]
	if (module->mode == SPI_MODE_SLAVE) {
    14ac:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    14ae:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
    14b0:	2a00      	cmp	r2, #0
    14b2:	d1e3      	bne.n	147c <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14b4:	3202      	adds	r2, #2
    14b6:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14b8:	759a      	strb	r2, [r3, #22]
    14ba:	e7df      	b.n	147c <spi_transceive_buffer_job+0x8>

000014bc <_spi_interrupt_handler>:

extern volatile bool spi_reset_1 ;


void _spi_interrupt_handler(uint8_t instance)
{
    14bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	
	//*PORT_SET	=  G2_RGB;
	
	/* Get device instance from the look-up table */
	struct spi_module *module = (struct spi_module *)_sercom_instances[instance];
    14be:	0080      	lsls	r0, r0, #2
    14c0:	4b50      	ldr	r3, [pc, #320]	; (1604 <_spi_interrupt_handler+0x148>)
    14c2:	58c5      	ldr	r5, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14c4:	682e      	ldr	r6, [r5, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback & module->registered_callback;
    14c6:	2337      	movs	r3, #55	; 0x37
    14c8:	5cef      	ldrb	r7, [r5, r3]
    14ca:	2236      	movs	r2, #54	; 0x36
    14cc:	5caa      	ldrb	r2, [r5, r2]
    14ce:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    14d0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    14d2:	7db4      	ldrb	r4, [r6, #22]
    14d4:	401c      	ands	r4, r3
	
	/* Data register empty interrupt */ 
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) 
    14d6:	07e3      	lsls	r3, r4, #31
    14d8:	d514      	bpl.n	1504 <_spi_interrupt_handler+0x48>
	{
		if((module->mode == SPI_MODE_SLAVE) &&(module->dir != SPI_DIRECTION_READ))
    14da:	796b      	ldrb	r3, [r5, #5]
    14dc:	2b00      	cmp	r3, #0
    14de:	d111      	bne.n	1504 <_spi_interrupt_handler+0x48>
    14e0:	7a6b      	ldrb	r3, [r5, #9]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d00e      	beq.n	1504 <_spi_interrupt_handler+0x48>
		 {
			//_spi_write(module);
			//*PORT_SET	=  B2_RGB;
			data_to_send = *(module->tx_buffer_ptr);
    14e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    14e8:	781a      	ldrb	r2, [r3, #0]
			(module->tx_buffer_ptr)++;
    14ea:	3301      	adds	r3, #1
    14ec:	62eb      	str	r3, [r5, #44]	; 0x2c
			spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    14ee:	62b2      	str	r2, [r6, #40]	; 0x28
			(module->remaining_tx_buffer_length)--;
    14f0:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    14f2:	3b01      	subs	r3, #1
    14f4:	b29b      	uxth	r3, r3
    14f6:	86ab      	strh	r3, [r5, #52]	; 0x34
		
			if (module->remaining_tx_buffer_length == 0) 
    14f8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    14fa:	b29b      	uxth	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	d101      	bne.n	1504 <_spi_interrupt_handler+0x48>
			{
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1500:	3301      	adds	r3, #1
    1502:	7533      	strb	r3, [r6, #20]
			//*PORT_CLEAR	=  B2_RGB;
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1504:	0763      	lsls	r3, r4, #29
    1506:	d505      	bpl.n	1514 <_spi_interrupt_handler+0x58>
		/* Check for overflow */
		//*PORT_SET	=  B2_RGB;
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) 
    1508:	8b73      	ldrh	r3, [r6, #26]
    150a:	075b      	lsls	r3, r3, #29
    150c:	d51d      	bpl.n	154a <_spi_interrupt_handler+0x8e>
		{
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    150e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1510:	2304      	movs	r3, #4
    1512:	8373      	strh	r3, [r6, #26]
			}
			
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1514:	07a3      	lsls	r3, r4, #30
    1516:	d50a      	bpl.n	152e <_spi_interrupt_handler+0x72>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1518:	796b      	ldrb	r3, [r5, #5]
    151a:	2b00      	cmp	r3, #0
    151c:	d111      	bne.n	1542 <_spi_interrupt_handler+0x86>
			
			spi_reset_1 = true;
    151e:	2201      	movs	r2, #1
    1520:	4b39      	ldr	r3, [pc, #228]	; (1608 <_spi_interrupt_handler+0x14c>)
    1522:	701a      	strb	r2, [r3, #0]
			if(module->dir == SPI_DIRECTION_BOTH) {
    1524:	7a6b      	ldrb	r3, [r5, #9]
    1526:	2b02      	cmp	r3, #2
    1528:	d058      	beq.n	15dc <_spi_interrupt_handler+0x120>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					
				}
			}
			
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    152a:	2302      	movs	r3, #2
    152c:	7633      	strb	r3, [r6, #24]

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
        
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    152e:	0723      	lsls	r3, r4, #28
    1530:	d507      	bpl.n	1542 <_spi_interrupt_handler+0x86>
			if (module->mode == SPI_MODE_SLAVE) {
    1532:	796b      	ldrb	r3, [r5, #5]
    1534:	2b00      	cmp	r3, #0
    1536:	d104      	bne.n	1542 <_spi_interrupt_handler+0x86>
				//*PORT_SET	=  B2_RGB;
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1538:	3308      	adds	r3, #8
    153a:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    153c:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    153e:	06bb      	lsls	r3, r7, #26
    1540:	d452      	bmi.n	15e8 <_spi_interrupt_handler+0x12c>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1542:	b264      	sxtb	r4, r4
    1544:	2c00      	cmp	r4, #0
    1546:	db53      	blt.n	15f0 <_spi_interrupt_handler+0x134>
	}
#  endif
	
	
  
}
    1548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    154a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    154c:	b2db      	uxtb	r3, r3
    154e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1550:	7013      	strb	r3, [r2, #0]
				module->rx_buffer_ptr += 1;
    1552:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1554:	1c4b      	adds	r3, r1, #1
    1556:	62ab      	str	r3, [r5, #40]	; 0x28
				module->remaining_rx_buffer_length--;
    1558:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    155a:	3b01      	subs	r3, #1
    155c:	b29b      	uxth	r3, r3
    155e:	862b      	strh	r3, [r5, #48]	; 0x30
				buffer_length++;
    1560:	4a2a      	ldr	r2, [pc, #168]	; (160c <_spi_interrupt_handler+0x150>)
    1562:	7813      	ldrb	r3, [r2, #0]
    1564:	3301      	adds	r3, #1
    1566:	b2db      	uxtb	r3, r3
    1568:	7013      	strb	r3, [r2, #0]
				if(buffer_length == 1)
    156a:	2b01      	cmp	r3, #1
    156c:	d01b      	beq.n	15a6 <_spi_interrupt_handler+0xea>
				if (module->remaining_rx_buffer_length == 0) 
    156e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    1570:	b29b      	uxth	r3, r3
    1572:	2b00      	cmp	r3, #0
    1574:	d1ce      	bne.n	1514 <_spi_interrupt_handler+0x58>
					buffer_length = 0;
    1576:	4a25      	ldr	r2, [pc, #148]	; (160c <_spi_interrupt_handler+0x150>)
    1578:	7013      	strb	r3, [r2, #0]
					transcation_start = false;
    157a:	4a25      	ldr	r2, [pc, #148]	; (1610 <_spi_interrupt_handler+0x154>)
    157c:	7013      	strb	r3, [r2, #0]
					serial_timeout = false;
    157e:	4a25      	ldr	r2, [pc, #148]	; (1614 <_spi_interrupt_handler+0x158>)
    1580:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ;
    1582:	4a25      	ldr	r2, [pc, #148]	; (1618 <_spi_interrupt_handler+0x15c>)
    1584:	7013      	strb	r3, [r2, #0]
					module->status = STATUS_OK;
    1586:	2238      	movs	r2, #56	; 0x38
    1588:	54ab      	strb	r3, [r5, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    158a:	3304      	adds	r3, #4
    158c:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    158e:	7a6b      	ldrb	r3, [r5, #9]
    1590:	2b02      	cmp	r3, #2
    1592:	d01d      	beq.n	15d0 <_spi_interrupt_handler+0x114>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1594:	7a6b      	ldrb	r3, [r5, #9]
    1596:	2b00      	cmp	r3, #0
    1598:	d1bc      	bne.n	1514 <_spi_interrupt_handler+0x58>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    159a:	07bb      	lsls	r3, r7, #30
    159c:	d5ba      	bpl.n	1514 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    159e:	0028      	movs	r0, r5
    15a0:	692b      	ldr	r3, [r5, #16]
    15a2:	4798      	blx	r3
    15a4:	e7b6      	b.n	1514 <_spi_interrupt_handler+0x58>
					transcation_start = true;
    15a6:	2201      	movs	r2, #1
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <_spi_interrupt_handler+0x154>)
    15aa:	701a      	strb	r2, [r3, #0]
					serial_timeout = false;
    15ac:	2300      	movs	r3, #0
    15ae:	4a19      	ldr	r2, [pc, #100]	; (1614 <_spi_interrupt_handler+0x158>)
    15b0:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ; 
    15b2:	4a19      	ldr	r2, [pc, #100]	; (1618 <_spi_interrupt_handler+0x15c>)
    15b4:	7013      	strb	r3, [r2, #0]
					if ((*(module->rx_buffer_ptr-1) == WR_SPI_INT_SET_ALL )) 
    15b6:	780b      	ldrb	r3, [r1, #0]
    15b8:	b2db      	uxtb	r3, r3
    15ba:	2bda      	cmp	r3, #218	; 0xda
    15bc:	d1d7      	bne.n	156e <_spi_interrupt_handler+0xb2>
						module->remaining_tx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
    15be:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    15c0:	3306      	adds	r3, #6
    15c2:	b29b      	uxth	r3, r3
    15c4:	86ab      	strh	r3, [r5, #52]	; 0x34
						module->remaining_rx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
    15c6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    15c8:	3306      	adds	r3, #6
    15ca:	b29b      	uxth	r3, r3
    15cc:	862b      	strh	r3, [r5, #48]	; 0x30
    15ce:	e7ce      	b.n	156e <_spi_interrupt_handler+0xb2>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    15d0:	077b      	lsls	r3, r7, #29
    15d2:	d59f      	bpl.n	1514 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    15d4:	0028      	movs	r0, r5
    15d6:	696b      	ldr	r3, [r5, #20]
    15d8:	4798      	blx	r3
    15da:	e79b      	b.n	1514 <_spi_interrupt_handler+0x58>
				if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    15dc:	077b      	lsls	r3, r7, #29
    15de:	d5a4      	bpl.n	152a <_spi_interrupt_handler+0x6e>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    15e0:	0028      	movs	r0, r5
    15e2:	696b      	ldr	r3, [r5, #20]
    15e4:	4798      	blx	r3
    15e6:	e7a0      	b.n	152a <_spi_interrupt_handler+0x6e>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    15e8:	0028      	movs	r0, r5
    15ea:	6a2b      	ldr	r3, [r5, #32]
    15ec:	4798      	blx	r3
    15ee:	e7a8      	b.n	1542 <_spi_interrupt_handler+0x86>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    15f0:	2380      	movs	r3, #128	; 0x80
    15f2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    15f4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    15f6:	067b      	lsls	r3, r7, #25
    15f8:	d5a6      	bpl.n	1548 <_spi_interrupt_handler+0x8c>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    15fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15fc:	0028      	movs	r0, r5
    15fe:	4798      	blx	r3
}
    1600:	e7a2      	b.n	1548 <_spi_interrupt_handler+0x8c>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	20000374 	.word	0x20000374
    1608:	200001ac 	.word	0x200001ac
    160c:	200000e8 	.word	0x200000e8
    1610:	200001ad 	.word	0x200001ad
    1614:	200001aa 	.word	0x200001aa
    1618:	200001ab 	.word	0x200001ab

0000161c <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    161c:	2000      	movs	r0, #0
    161e:	4770      	bx	lr

00001620 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1620:	b530      	push	{r4, r5, lr}
    1622:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1624:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1626:	2903      	cmp	r1, #3
    1628:	d900      	bls.n	162c <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    162a:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    162c:	4d11      	ldr	r5, [pc, #68]	; (1674 <_tcc_set_compare_value+0x54>)
    162e:	42aa      	cmp	r2, r5
    1630:	d8fb      	bhi.n	162a <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    1632:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    1634:	2b00      	cmp	r3, #0
    1636:	d010      	beq.n	165a <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    1638:	2480      	movs	r4, #128	; 0x80
    163a:	0264      	lsls	r4, r4, #9
    163c:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    163e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1640:	421c      	tst	r4, r3
    1642:	d1fc      	bne.n	163e <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1644:	2480      	movs	r4, #128	; 0x80
    1646:	0324      	lsls	r4, r4, #12
    1648:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    164a:	6883      	ldr	r3, [r0, #8]
    164c:	421c      	tst	r4, r3
    164e:	d1fc      	bne.n	164a <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    1650:	311c      	adds	r1, #28
    1652:	0089      	lsls	r1, r1, #2
    1654:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    1656:	2000      	movs	r0, #0
    1658:	e7e7      	b.n	162a <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    165a:	2480      	movs	r4, #128	; 0x80
    165c:	0064      	lsls	r4, r4, #1
    165e:	408c      	lsls	r4, r1
    1660:	6883      	ldr	r3, [r0, #8]
    1662:	421c      	tst	r4, r3
    1664:	d1fc      	bne.n	1660 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    1666:	3110      	adds	r1, #16
    1668:	0089      	lsls	r1, r1, #2
    166a:	1841      	adds	r1, r0, r1
    166c:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    166e:	2000      	movs	r0, #0
    1670:	e7db      	b.n	162a <_tcc_set_compare_value+0xa>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	00ffffff 	.word	0x00ffffff

00001678 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    1678:	2300      	movs	r3, #0
    167a:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    167c:	4a4c      	ldr	r2, [pc, #304]	; (17b0 <tcc_get_config_defaults+0x138>)
    167e:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1680:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1682:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1684:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1686:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1688:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    168a:	61c3      	str	r3, [r0, #28]
    168c:	6203      	str	r3, [r0, #32]
    168e:	6243      	str	r3, [r0, #36]	; 0x24
    1690:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1692:	7503      	strb	r3, [r0, #20]
    1694:	7543      	strb	r3, [r0, #21]
    1696:	7583      	strb	r3, [r0, #22]
    1698:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    169a:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    169c:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    169e:	7403      	strb	r3, [r0, #16]
    16a0:	7443      	strb	r3, [r0, #17]
    16a2:	7483      	strb	r3, [r0, #18]
    16a4:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    16a6:	222c      	movs	r2, #44	; 0x2c
    16a8:	5483      	strb	r3, [r0, r2]
    16aa:	3201      	adds	r2, #1
    16ac:	5483      	strb	r3, [r0, r2]
    16ae:	3201      	adds	r2, #1
    16b0:	5483      	strb	r3, [r0, r2]
    16b2:	3201      	adds	r2, #1
    16b4:	5483      	strb	r3, [r0, r2]
    16b6:	3201      	adds	r2, #1
    16b8:	5483      	strb	r3, [r0, r2]
    16ba:	3201      	adds	r2, #1
    16bc:	5483      	strb	r3, [r0, r2]
    16be:	3201      	adds	r2, #1
    16c0:	5483      	strb	r3, [r0, r2]
    16c2:	3201      	adds	r2, #1
    16c4:	5483      	strb	r3, [r0, r2]
    16c6:	3201      	adds	r2, #1
    16c8:	5483      	strb	r3, [r0, r2]
    16ca:	3201      	adds	r2, #1
    16cc:	5483      	strb	r3, [r0, r2]
    16ce:	3201      	adds	r2, #1
    16d0:	5483      	strb	r3, [r0, r2]
    16d2:	3201      	adds	r2, #1
    16d4:	5483      	strb	r3, [r0, r2]
    16d6:	3201      	adds	r2, #1
    16d8:	5483      	strb	r3, [r0, r2]
    16da:	3201      	adds	r2, #1
    16dc:	5483      	strb	r3, [r0, r2]
    16de:	3201      	adds	r2, #1
    16e0:	5483      	strb	r3, [r0, r2]
    16e2:	3201      	adds	r2, #1
    16e4:	5483      	strb	r3, [r0, r2]
    16e6:	3201      	adds	r2, #1
    16e8:	5483      	strb	r3, [r0, r2]
    16ea:	3201      	adds	r2, #1
    16ec:	5483      	strb	r3, [r0, r2]
    16ee:	3201      	adds	r2, #1
    16f0:	5483      	strb	r3, [r0, r2]
    16f2:	3201      	adds	r2, #1
    16f4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    16f6:	3201      	adds	r2, #1
    16f8:	5483      	strb	r3, [r0, r2]
    16fa:	3201      	adds	r2, #1
    16fc:	5483      	strb	r3, [r0, r2]
    16fe:	3201      	adds	r2, #1
    1700:	5483      	strb	r3, [r0, r2]
    1702:	3201      	adds	r2, #1
    1704:	5483      	strb	r3, [r0, r2]
    1706:	3201      	adds	r2, #1
    1708:	5483      	strb	r3, [r0, r2]
    170a:	3201      	adds	r2, #1
    170c:	5483      	strb	r3, [r0, r2]
    170e:	3201      	adds	r2, #1
    1710:	5483      	strb	r3, [r0, r2]
    1712:	3201      	adds	r2, #1
    1714:	5483      	strb	r3, [r0, r2]
    1716:	3201      	adds	r2, #1
    1718:	5483      	strb	r3, [r0, r2]
    171a:	3201      	adds	r2, #1
    171c:	5483      	strb	r3, [r0, r2]
    171e:	3201      	adds	r2, #1
    1720:	5483      	strb	r3, [r0, r2]
    1722:	3201      	adds	r2, #1
    1724:	5483      	strb	r3, [r0, r2]
    1726:	3201      	adds	r2, #1
    1728:	5483      	strb	r3, [r0, r2]
    172a:	3201      	adds	r2, #1
    172c:	5483      	strb	r3, [r0, r2]
    172e:	3201      	adds	r2, #1
    1730:	5483      	strb	r3, [r0, r2]
    1732:	3201      	adds	r2, #1
    1734:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1736:	3201      	adds	r2, #1
    1738:	5483      	strb	r3, [r0, r2]
    173a:	3201      	adds	r2, #1
    173c:	5483      	strb	r3, [r0, r2]
    173e:	3201      	adds	r2, #1
    1740:	5483      	strb	r3, [r0, r2]
    1742:	3201      	adds	r2, #1
    1744:	5483      	strb	r3, [r0, r2]
    1746:	3201      	adds	r2, #1
    1748:	5483      	strb	r3, [r0, r2]
    174a:	3201      	adds	r2, #1
    174c:	5483      	strb	r3, [r0, r2]
    174e:	3201      	adds	r2, #1
    1750:	5483      	strb	r3, [r0, r2]
    1752:	3201      	adds	r2, #1
    1754:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1756:	3241      	adds	r2, #65	; 0x41
    1758:	5483      	strb	r3, [r0, r2]
    175a:	6583      	str	r3, [r0, #88]	; 0x58
    175c:	6783      	str	r3, [r0, #120]	; 0x78
    175e:	3201      	adds	r2, #1
    1760:	5483      	strb	r3, [r0, r2]
    1762:	65c3      	str	r3, [r0, #92]	; 0x5c
    1764:	67c3      	str	r3, [r0, #124]	; 0x7c
    1766:	3201      	adds	r2, #1
    1768:	5483      	strb	r3, [r0, r2]
    176a:	6603      	str	r3, [r0, #96]	; 0x60
    176c:	3a1a      	subs	r2, #26
    176e:	5083      	str	r3, [r0, r2]
    1770:	321b      	adds	r2, #27
    1772:	5483      	strb	r3, [r0, r2]
    1774:	6643      	str	r3, [r0, #100]	; 0x64
    1776:	3a17      	subs	r2, #23
    1778:	5083      	str	r3, [r0, r2]
    177a:	3218      	adds	r2, #24
    177c:	5483      	strb	r3, [r0, r2]
    177e:	6683      	str	r3, [r0, #104]	; 0x68
    1780:	3a14      	subs	r2, #20
    1782:	5083      	str	r3, [r0, r2]
    1784:	3215      	adds	r2, #21
    1786:	5483      	strb	r3, [r0, r2]
    1788:	66c3      	str	r3, [r0, #108]	; 0x6c
    178a:	3a11      	subs	r2, #17
    178c:	5083      	str	r3, [r0, r2]
    178e:	3212      	adds	r2, #18
    1790:	5483      	strb	r3, [r0, r2]
    1792:	6703      	str	r3, [r0, #112]	; 0x70
    1794:	3a0e      	subs	r2, #14
    1796:	5083      	str	r3, [r0, r2]
    1798:	320f      	adds	r2, #15
    179a:	5483      	strb	r3, [r0, r2]
    179c:	6743      	str	r3, [r0, #116]	; 0x74
    179e:	3a0b      	subs	r2, #11
    17a0:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    17a2:	2101      	movs	r1, #1
    17a4:	320c      	adds	r2, #12
    17a6:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    17a8:	3201      	adds	r2, #1
    17aa:	5483      	strb	r3, [r0, r2]
}
    17ac:	4770      	bx	lr
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00ffffff 	.word	0x00ffffff

000017b4 <tcc_init>:
{
    17b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17b6:	46de      	mov	lr, fp
    17b8:	4657      	mov	r7, sl
    17ba:	464e      	mov	r6, r9
    17bc:	4645      	mov	r5, r8
    17be:	b5e0      	push	{r5, r6, r7, lr}
    17c0:	b08d      	sub	sp, #52	; 0x34
    17c2:	0006      	movs	r6, r0
    17c4:	000c      	movs	r4, r1
    17c6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    17c8:	0008      	movs	r0, r1
    17ca:	4bcd      	ldr	r3, [pc, #820]	; (1b00 <tcc_init+0x34c>)
    17cc:	4798      	blx	r3
    17ce:	0003      	movs	r3, r0
    17d0:	49cc      	ldr	r1, [pc, #816]	; (1b04 <tcc_init+0x350>)
    17d2:	6a0a      	ldr	r2, [r1, #32]
    17d4:	2020      	movs	r0, #32
    17d6:	4302      	orrs	r2, r0
    17d8:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    17da:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    17dc:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    17de:	0792      	lsls	r2, r2, #30
    17e0:	d506      	bpl.n	17f0 <tcc_init+0x3c>
}
    17e2:	b00d      	add	sp, #52	; 0x34
    17e4:	bc3c      	pop	{r2, r3, r4, r5}
    17e6:	4690      	mov	r8, r2
    17e8:	4699      	mov	r9, r3
    17ea:	46a2      	mov	sl, r4
    17ec:	46ab      	mov	fp, r5
    17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    17f0:	6822      	ldr	r2, [r4, #0]
    17f2:	2701      	movs	r7, #1
    17f4:	4017      	ands	r7, r2
    17f6:	d1f4      	bne.n	17e2 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    17f8:	4ac3      	ldr	r2, [pc, #780]	; (1b08 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    17fa:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    17fc:	6829      	ldr	r1, [r5, #0]
    17fe:	4291      	cmp	r1, r2
    1800:	d8ef      	bhi.n	17e2 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    1802:	6869      	ldr	r1, [r5, #4]
    1804:	4291      	cmp	r1, r2
    1806:	d8ec      	bhi.n	17e2 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    1808:	69e9      	ldr	r1, [r5, #28]
    180a:	4291      	cmp	r1, r2
    180c:	d900      	bls.n	1810 <tcc_init+0x5c>
    180e:	e18b      	b.n	1b28 <tcc_init+0x374>
    1810:	6a29      	ldr	r1, [r5, #32]
    1812:	4291      	cmp	r1, r2
    1814:	d900      	bls.n	1818 <tcc_init+0x64>
    1816:	e189      	b.n	1b2c <tcc_init+0x378>
    1818:	6a69      	ldr	r1, [r5, #36]	; 0x24
    181a:	4291      	cmp	r1, r2
    181c:	d900      	bls.n	1820 <tcc_init+0x6c>
    181e:	e187      	b.n	1b30 <tcc_init+0x37c>
    1820:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1822:	4291      	cmp	r1, r2
    1824:	d900      	bls.n	1828 <tcc_init+0x74>
    1826:	e185      	b.n	1b34 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    1828:	7c2a      	ldrb	r2, [r5, #16]
    182a:	3a01      	subs	r2, #1
    182c:	4250      	negs	r0, r2
    182e:	4150      	adcs	r0, r2
    1830:	0602      	lsls	r2, r0, #24
    1832:	9201      	str	r2, [sp, #4]
    1834:	7c6a      	ldrb	r2, [r5, #17]
    1836:	2a01      	cmp	r2, #1
    1838:	d031      	beq.n	189e <tcc_init+0xea>
    183a:	7caa      	ldrb	r2, [r5, #18]
    183c:	2a01      	cmp	r2, #1
    183e:	d034      	beq.n	18aa <tcc_init+0xf6>
    1840:	7cea      	ldrb	r2, [r5, #19]
    1842:	2a01      	cmp	r2, #1
    1844:	d037      	beq.n	18b6 <tcc_init+0x102>
	if (config->run_in_standby) {
    1846:	22a1      	movs	r2, #161	; 0xa1
    1848:	5caa      	ldrb	r2, [r5, r2]
    184a:	2a00      	cmp	r2, #0
    184c:	d004      	beq.n	1858 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    184e:	2280      	movs	r2, #128	; 0x80
    1850:	0112      	lsls	r2, r2, #4
    1852:	9901      	ldr	r1, [sp, #4]
    1854:	4311      	orrs	r1, r2
    1856:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    1858:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    185a:	1e51      	subs	r1, r2, #1
    185c:	418a      	sbcs	r2, r1
    185e:	0092      	lsls	r2, r2, #2
    1860:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1862:	7a6a      	ldrb	r2, [r5, #9]
    1864:	2a01      	cmp	r2, #1
    1866:	d02c      	beq.n	18c2 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    1868:	2235      	movs	r2, #53	; 0x35
    186a:	5caa      	ldrb	r2, [r5, r2]
    186c:	2a03      	cmp	r2, #3
    186e:	d900      	bls.n	1872 <tcc_init+0xbe>
    1870:	e162      	b.n	1b38 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    1872:	212c      	movs	r1, #44	; 0x2c
    1874:	5c69      	ldrb	r1, [r5, r1]
    1876:	290f      	cmp	r1, #15
    1878:	d900      	bls.n	187c <tcc_init+0xc8>
    187a:	e15d      	b.n	1b38 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    187c:	7b28      	ldrb	r0, [r5, #12]
    187e:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1880:	7ae8      	ldrb	r0, [r5, #11]
    1882:	9005      	str	r0, [sp, #20]
    1884:	202d      	movs	r0, #45	; 0x2d
    1886:	4682      	mov	sl, r0
    1888:	44aa      	add	sl, r5
    188a:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    188c:	9702      	str	r7, [sp, #8]
    188e:	4684      	mov	ip, r0
    1890:	9606      	str	r6, [sp, #24]
    1892:	000e      	movs	r6, r1
    1894:	46a0      	mov	r8, r4
    1896:	4654      	mov	r4, sl
    1898:	46a9      	mov	r9, r5
    189a:	9307      	str	r3, [sp, #28]
    189c:	e047      	b.n	192e <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    189e:	2280      	movs	r2, #128	; 0x80
    18a0:	0492      	lsls	r2, r2, #18
    18a2:	9901      	ldr	r1, [sp, #4]
    18a4:	4311      	orrs	r1, r2
    18a6:	9101      	str	r1, [sp, #4]
    18a8:	e7c7      	b.n	183a <tcc_init+0x86>
    18aa:	2280      	movs	r2, #128	; 0x80
    18ac:	04d2      	lsls	r2, r2, #19
    18ae:	9901      	ldr	r1, [sp, #4]
    18b0:	4311      	orrs	r1, r2
    18b2:	9101      	str	r1, [sp, #4]
    18b4:	e7c4      	b.n	1840 <tcc_init+0x8c>
    18b6:	2280      	movs	r2, #128	; 0x80
    18b8:	0512      	lsls	r2, r2, #20
    18ba:	9901      	ldr	r1, [sp, #4]
    18bc:	4311      	orrs	r1, r2
    18be:	9101      	str	r1, [sp, #4]
    18c0:	e7c1      	b.n	1846 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    18c2:	9903      	ldr	r1, [sp, #12]
    18c4:	4311      	orrs	r1, r2
    18c6:	9103      	str	r1, [sp, #12]
    18c8:	e7ce      	b.n	1868 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    18ca:	0292      	lsls	r2, r2, #10
    18cc:	25c0      	movs	r5, #192	; 0xc0
    18ce:	012d      	lsls	r5, r5, #4
    18d0:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    18d2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    18d4:	790d      	ldrb	r5, [r1, #4]
    18d6:	2603      	movs	r6, #3
    18d8:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    18da:	4332      	orrs	r2, r6
    18dc:	4655      	mov	r5, sl
    18de:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    18e0:	794e      	ldrb	r6, [r1, #5]
    18e2:	0176      	lsls	r6, r6, #5
    18e4:	2560      	movs	r5, #96	; 0x60
    18e6:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    18e8:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    18ea:	798d      	ldrb	r5, [r1, #6]
    18ec:	022d      	lsls	r5, r5, #8
    18ee:	26c0      	movs	r6, #192	; 0xc0
    18f0:	00b6      	lsls	r6, r6, #2
    18f2:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    18f4:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    18f6:	79cd      	ldrb	r5, [r1, #7]
    18f8:	032d      	lsls	r5, r5, #12
    18fa:	26e0      	movs	r6, #224	; 0xe0
    18fc:	01f6      	lsls	r6, r6, #7
    18fe:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1900:	432a      	orrs	r2, r5
    1902:	4310      	orrs	r0, r2
    1904:	4303      	orrs	r3, r0
    1906:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    1908:	ab08      	add	r3, sp, #32
    190a:	4662      	mov	r2, ip
    190c:	2008      	movs	r0, #8
    190e:	181b      	adds	r3, r3, r0
    1910:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1912:	2a04      	cmp	r2, #4
    1914:	d028      	beq.n	1968 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    1916:	7c8a      	ldrb	r2, [r1, #18]
    1918:	2a03      	cmp	r2, #3
    191a:	d900      	bls.n	191e <tcc_init+0x16a>
    191c:	e10c      	b.n	1b38 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    191e:	7a4e      	ldrb	r6, [r1, #9]
    1920:	340a      	adds	r4, #10
    1922:	2304      	movs	r3, #4
    1924:	469a      	mov	sl, r3
    1926:	44d4      	add	ip, sl
    1928:	2e0f      	cmp	r6, #15
    192a:	d900      	bls.n	192e <tcc_init+0x17a>
    192c:	e104      	b.n	1b38 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    192e:	0636      	lsls	r6, r6, #24
    1930:	23f0      	movs	r3, #240	; 0xf0
    1932:	051b      	lsls	r3, r3, #20
    1934:	401e      	ands	r6, r3
    1936:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1938:	7825      	ldrb	r5, [r4, #0]
    193a:	042d      	lsls	r5, r5, #16
    193c:	23ff      	movs	r3, #255	; 0xff
    193e:	041b      	lsls	r3, r3, #16
    1940:	401d      	ands	r5, r3
    1942:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1944:	7863      	ldrb	r3, [r4, #1]
    1946:	2080      	movs	r0, #128	; 0x80
    1948:	2b00      	cmp	r3, #0
    194a:	d100      	bne.n	194e <tcc_init+0x19a>
    194c:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    194e:	788f      	ldrb	r7, [r1, #2]
    1950:	2308      	movs	r3, #8
    1952:	2f00      	cmp	r7, #0
    1954:	d100      	bne.n	1958 <tcc_init+0x1a4>
    1956:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1958:	78cf      	ldrb	r7, [r1, #3]
    195a:	46bb      	mov	fp, r7
    195c:	2710      	movs	r7, #16
    195e:	465d      	mov	r5, fp
    1960:	2d00      	cmp	r5, #0
    1962:	d1b2      	bne.n	18ca <tcc_init+0x116>
    1964:	9f02      	ldr	r7, [sp, #8]
    1966:	e7b0      	b.n	18ca <tcc_init+0x116>
    1968:	9e06      	ldr	r6, [sp, #24]
    196a:	4644      	mov	r4, r8
    196c:	464d      	mov	r5, r9
    196e:	9b07      	ldr	r3, [sp, #28]
    1970:	4648      	mov	r0, r9
    1972:	3050      	adds	r0, #80	; 0x50
    1974:	4649      	mov	r1, r9
    1976:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1978:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    197a:	2780      	movs	r7, #128	; 0x80
    197c:	027f      	lsls	r7, r7, #9
    197e:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1980:	2701      	movs	r7, #1
    1982:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1984:	2702      	movs	r7, #2
    1986:	37ff      	adds	r7, #255	; 0xff
    1988:	46ba      	mov	sl, r7
    198a:	001f      	movs	r7, r3
    198c:	0013      	movs	r3, r2
    198e:	46a0      	mov	r8, r4
    1990:	003c      	movs	r4, r7
    1992:	e007      	b.n	19a4 <tcc_init+0x1f0>
    1994:	4657      	mov	r7, sl
    1996:	4097      	lsls	r7, r2
    1998:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    199a:	3201      	adds	r2, #1
    199c:	3001      	adds	r0, #1
    199e:	3102      	adds	r1, #2
    19a0:	2a08      	cmp	r2, #8
    19a2:	d00e      	beq.n	19c2 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    19a4:	7807      	ldrb	r7, [r0, #0]
    19a6:	2f00      	cmp	r7, #0
    19a8:	d002      	beq.n	19b0 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    19aa:	4667      	mov	r7, ip
    19ac:	4097      	lsls	r7, r2
    19ae:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    19b0:	780f      	ldrb	r7, [r1, #0]
    19b2:	2f00      	cmp	r7, #0
    19b4:	d0f1      	beq.n	199a <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    19b6:	2f02      	cmp	r7, #2
    19b8:	d0ec      	beq.n	1994 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    19ba:	464f      	mov	r7, r9
    19bc:	4097      	lsls	r7, r2
    19be:	433b      	orrs	r3, r7
    19c0:	e7eb      	b.n	199a <tcc_init+0x1e6>
    19c2:	0022      	movs	r2, r4
    19c4:	4644      	mov	r4, r8
    19c6:	4698      	mov	r8, r3
    19c8:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    19ca:	7e6a      	ldrb	r2, [r5, #25]
    19cc:	0112      	lsls	r2, r2, #4
    19ce:	2130      	movs	r1, #48	; 0x30
    19d0:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    19d2:	7e28      	ldrb	r0, [r5, #24]
    19d4:	2207      	movs	r2, #7
    19d6:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    19d8:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    19da:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    19dc:	2080      	movs	r0, #128	; 0x80
    19de:	0240      	lsls	r0, r0, #9
    19e0:	000f      	movs	r7, r1
    19e2:	e002      	b.n	19ea <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    19e4:	3201      	adds	r2, #1
    19e6:	2a04      	cmp	r2, #4
    19e8:	d007      	beq.n	19fa <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    19ea:	18a9      	adds	r1, r5, r2
    19ec:	7d09      	ldrb	r1, [r1, #20]
    19ee:	2900      	cmp	r1, #0
    19f0:	d0f8      	beq.n	19e4 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    19f2:	0001      	movs	r1, r0
    19f4:	4091      	lsls	r1, r2
    19f6:	430f      	orrs	r7, r1
    19f8:	e7f4      	b.n	19e4 <tcc_init+0x230>
    19fa:	46b9      	mov	r9, r7
    19fc:	1d32      	adds	r2, r6, #4
    19fe:	0030      	movs	r0, r6
    1a00:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1a02:	2100      	movs	r1, #0
    1a04:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1a06:	4290      	cmp	r0, r2
    1a08:	d1fc      	bne.n	1a04 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    1a0a:	2200      	movs	r2, #0
    1a0c:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1a0e:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1a10:	009b      	lsls	r3, r3, #2
    1a12:	4a3e      	ldr	r2, [pc, #248]	; (1b0c <tcc_init+0x358>)
    1a14:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    1a16:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1a18:	23a0      	movs	r3, #160	; 0xa0
    1a1a:	5cea      	ldrb	r2, [r5, r3]
    1a1c:	3b64      	subs	r3, #100	; 0x64
    1a1e:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1a20:	a909      	add	r1, sp, #36	; 0x24
    1a22:	7aab      	ldrb	r3, [r5, #10]
    1a24:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1a26:	2011      	movs	r0, #17
    1a28:	4b39      	ldr	r3, [pc, #228]	; (1b10 <tcc_init+0x35c>)
    1a2a:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1a2c:	2011      	movs	r0, #17
    1a2e:	4b39      	ldr	r3, [pc, #228]	; (1b14 <tcc_init+0x360>)
    1a30:	4798      	blx	r3
    1a32:	002f      	movs	r7, r5
    1a34:	3798      	adds	r7, #152	; 0x98
    1a36:	002e      	movs	r6, r5
    1a38:	3658      	adds	r6, #88	; 0x58
    1a3a:	2378      	movs	r3, #120	; 0x78
    1a3c:	469a      	mov	sl, r3
    1a3e:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a40:	3b77      	subs	r3, #119	; 0x77
    1a42:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    1a44:	0023      	movs	r3, r4
    1a46:	4654      	mov	r4, sl
    1a48:	469a      	mov	sl, r3
    1a4a:	e003      	b.n	1a54 <tcc_init+0x2a0>
    1a4c:	3701      	adds	r7, #1
    1a4e:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1a50:	42b4      	cmp	r4, r6
    1a52:	d014      	beq.n	1a7e <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    1a54:	783b      	ldrb	r3, [r7, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d0f8      	beq.n	1a4c <tcc_init+0x298>
    1a5a:	ab08      	add	r3, sp, #32
    1a5c:	465a      	mov	r2, fp
    1a5e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1a60:	2300      	movs	r3, #0
    1a62:	aa08      	add	r2, sp, #32
    1a64:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1a66:	0013      	movs	r3, r2
    1a68:	2220      	movs	r2, #32
    1a6a:	18b2      	adds	r2, r6, r2
    1a6c:	7812      	ldrb	r2, [r2, #0]
    1a6e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a70:	465a      	mov	r2, fp
    1a72:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    1a74:	7830      	ldrb	r0, [r6, #0]
    1a76:	0019      	movs	r1, r3
    1a78:	4b27      	ldr	r3, [pc, #156]	; (1b18 <tcc_init+0x364>)
    1a7a:	4798      	blx	r3
    1a7c:	e7e6      	b.n	1a4c <tcc_init+0x298>
    1a7e:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1a80:	9b04      	ldr	r3, [sp, #16]
    1a82:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1a84:	9a05      	ldr	r2, [sp, #20]
    1a86:	0212      	lsls	r2, r2, #8
    1a88:	4313      	orrs	r3, r2
    1a8a:	9a01      	ldr	r2, [sp, #4]
    1a8c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1a8e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1a90:	2204      	movs	r2, #4
    1a92:	68a3      	ldr	r3, [r4, #8]
    1a94:	421a      	tst	r2, r3
    1a96:	d1fc      	bne.n	1a92 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    1a98:	23ff      	movs	r3, #255	; 0xff
    1a9a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1a9c:	2204      	movs	r2, #4
    1a9e:	68a3      	ldr	r3, [r4, #8]
    1aa0:	421a      	tst	r2, r3
    1aa2:	d1fc      	bne.n	1a9e <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    1aa4:	466b      	mov	r3, sp
    1aa6:	7b1b      	ldrb	r3, [r3, #12]
    1aa8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1aac:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ab0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    1ab2:	4643      	mov	r3, r8
    1ab4:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1ab6:	4a19      	ldr	r2, [pc, #100]	; (1b1c <tcc_init+0x368>)
    1ab8:	68a3      	ldr	r3, [r4, #8]
    1aba:	4213      	tst	r3, r2
    1abc:	d1fc      	bne.n	1ab8 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    1abe:	464b      	mov	r3, r9
    1ac0:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1ac2:	2210      	movs	r2, #16
    1ac4:	68a3      	ldr	r3, [r4, #8]
    1ac6:	421a      	tst	r2, r3
    1ac8:	d1fc      	bne.n	1ac4 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    1aca:	682b      	ldr	r3, [r5, #0]
    1acc:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1ace:	4a14      	ldr	r2, [pc, #80]	; (1b20 <tcc_init+0x36c>)
    1ad0:	68a3      	ldr	r3, [r4, #8]
    1ad2:	4213      	tst	r3, r2
    1ad4:	d1fc      	bne.n	1ad0 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    1ad6:	686b      	ldr	r3, [r5, #4]
    1ad8:	6423      	str	r3, [r4, #64]	; 0x40
    1ada:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1adc:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1ade:	4811      	ldr	r0, [pc, #68]	; (1b24 <tcc_init+0x370>)
    1ae0:	0002      	movs	r2, r0
    1ae2:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    1ae4:	68a3      	ldr	r3, [r4, #8]
    1ae6:	421a      	tst	r2, r3
    1ae8:	d1fc      	bne.n	1ae4 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    1aea:	cd04      	ldmia	r5!, {r2}
    1aec:	000b      	movs	r3, r1
    1aee:	3310      	adds	r3, #16
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	18e3      	adds	r3, r4, r3
    1af4:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1af6:	3101      	adds	r1, #1
    1af8:	2904      	cmp	r1, #4
    1afa:	d1f1      	bne.n	1ae0 <tcc_init+0x32c>
	return STATUS_OK;
    1afc:	2000      	movs	r0, #0
    1afe:	e670      	b.n	17e2 <tcc_init+0x2e>
    1b00:	0000161d 	.word	0x0000161d
    1b04:	40000400 	.word	0x40000400
    1b08:	00ffffff 	.word	0x00ffffff
    1b0c:	20000380 	.word	0x20000380
    1b10:	000027e1 	.word	0x000027e1
    1b14:	00002755 	.word	0x00002755
    1b18:	000028d9 	.word	0x000028d9
    1b1c:	00020040 	.word	0x00020040
    1b20:	00040080 	.word	0x00040080
    1b24:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1b28:	2017      	movs	r0, #23
    1b2a:	e65a      	b.n	17e2 <tcc_init+0x2e>
    1b2c:	2017      	movs	r0, #23
    1b2e:	e658      	b.n	17e2 <tcc_init+0x2e>
    1b30:	2017      	movs	r0, #23
    1b32:	e656      	b.n	17e2 <tcc_init+0x2e>
    1b34:	2017      	movs	r0, #23
    1b36:	e654      	b.n	17e2 <tcc_init+0x2e>
    1b38:	2017      	movs	r0, #23
    1b3a:	e652      	b.n	17e2 <tcc_init+0x2e>

00001b3c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1b3c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1b3e:	233c      	movs	r3, #60	; 0x3c
    1b40:	5cc3      	ldrb	r3, [r0, r3]
    1b42:	4c01      	ldr	r4, [pc, #4]	; (1b48 <tcc_set_compare_value+0xc>)
    1b44:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1b46:	bd10      	pop	{r4, pc}
    1b48:	00001621 	.word	0x00001621

00001b4c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b4e:	46c6      	mov	lr, r8
    1b50:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1b52:	0080      	lsls	r0, r0, #2
    1b54:	4b0e      	ldr	r3, [pc, #56]	; (1b90 <_tcc_interrupt_handler+0x44>)
    1b56:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1b58:	683b      	ldr	r3, [r7, #0]
    1b5a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1b60:	4013      	ands	r3, r2
    1b62:	401e      	ands	r6, r3
    1b64:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1b66:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <_tcc_interrupt_handler+0x48>)
    1b68:	4698      	mov	r8, r3
    1b6a:	e002      	b.n	1b72 <_tcc_interrupt_handler+0x26>
    1b6c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1b6e:	2c30      	cmp	r4, #48	; 0x30
    1b70:	d00a      	beq.n	1b88 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1b72:	4643      	mov	r3, r8
    1b74:	58e5      	ldr	r5, [r4, r3]
    1b76:	4235      	tst	r5, r6
    1b78:	d0f8      	beq.n	1b6c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1b7a:	193b      	adds	r3, r7, r4
    1b7c:	685b      	ldr	r3, [r3, #4]
    1b7e:	0038      	movs	r0, r7
    1b80:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1b82:	683b      	ldr	r3, [r7, #0]
    1b84:	62dd      	str	r5, [r3, #44]	; 0x2c
    1b86:	e7f1      	b.n	1b6c <_tcc_interrupt_handler+0x20>
		}
	}
}
    1b88:	bc04      	pop	{r2}
    1b8a:	4690      	mov	r8, r2
    1b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	20000380 	.word	0x20000380
    1b94:	000036f0 	.word	0x000036f0

00001b98 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1b98:	b510      	push	{r4, lr}
    1b9a:	2000      	movs	r0, #0
    1b9c:	4b01      	ldr	r3, [pc, #4]	; (1ba4 <TCC0_Handler+0xc>)
    1b9e:	4798      	blx	r3
    1ba0:	bd10      	pop	{r4, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	00001b4d 	.word	0x00001b4d

00001ba8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1ba8:	1c93      	adds	r3, r2, #2
    1baa:	009b      	lsls	r3, r3, #2
    1bac:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1bae:	2a02      	cmp	r2, #2
    1bb0:	d009      	beq.n	1bc6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1bb2:	2a03      	cmp	r2, #3
    1bb4:	d00c      	beq.n	1bd0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1bb6:	2301      	movs	r3, #1
    1bb8:	4093      	lsls	r3, r2
    1bba:	001a      	movs	r2, r3
    1bbc:	7e03      	ldrb	r3, [r0, #24]
    1bbe:	4313      	orrs	r3, r2
    1bc0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1bc2:	2000      	movs	r0, #0
    1bc4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1bc6:	7e03      	ldrb	r3, [r0, #24]
    1bc8:	2210      	movs	r2, #16
    1bca:	4313      	orrs	r3, r2
    1bcc:	7603      	strb	r3, [r0, #24]
    1bce:	e7f8      	b.n	1bc2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1bd0:	7e03      	ldrb	r3, [r0, #24]
    1bd2:	2220      	movs	r2, #32
    1bd4:	4313      	orrs	r3, r2
    1bd6:	7603      	strb	r3, [r0, #24]
    1bd8:	e7f3      	b.n	1bc2 <tc_register_callback+0x1a>
	...

00001bdc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1bdc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1bde:	0080      	lsls	r0, r0, #2
    1be0:	4b16      	ldr	r3, [pc, #88]	; (1c3c <_tc_interrupt_handler+0x60>)
    1be2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1be4:	6823      	ldr	r3, [r4, #0]
    1be6:	7b9d      	ldrb	r5, [r3, #14]
    1be8:	7e22      	ldrb	r2, [r4, #24]
    1bea:	7e63      	ldrb	r3, [r4, #25]
    1bec:	4013      	ands	r3, r2
    1bee:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1bf0:	07eb      	lsls	r3, r5, #31
    1bf2:	d406      	bmi.n	1c02 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1bf4:	07ab      	lsls	r3, r5, #30
    1bf6:	d40b      	bmi.n	1c10 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1bf8:	06eb      	lsls	r3, r5, #27
    1bfa:	d410      	bmi.n	1c1e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1bfc:	06ab      	lsls	r3, r5, #26
    1bfe:	d415      	bmi.n	1c2c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1c00:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c02:	0020      	movs	r0, r4
    1c04:	68a3      	ldr	r3, [r4, #8]
    1c06:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c08:	2301      	movs	r3, #1
    1c0a:	6822      	ldr	r2, [r4, #0]
    1c0c:	7393      	strb	r3, [r2, #14]
    1c0e:	e7f1      	b.n	1bf4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c10:	0020      	movs	r0, r4
    1c12:	68e3      	ldr	r3, [r4, #12]
    1c14:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c16:	2302      	movs	r3, #2
    1c18:	6822      	ldr	r2, [r4, #0]
    1c1a:	7393      	strb	r3, [r2, #14]
    1c1c:	e7ec      	b.n	1bf8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c1e:	0020      	movs	r0, r4
    1c20:	6923      	ldr	r3, [r4, #16]
    1c22:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c24:	2310      	movs	r3, #16
    1c26:	6822      	ldr	r2, [r4, #0]
    1c28:	7393      	strb	r3, [r2, #14]
    1c2a:	e7e7      	b.n	1bfc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c2c:	0020      	movs	r0, r4
    1c2e:	6963      	ldr	r3, [r4, #20]
    1c30:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c32:	6823      	ldr	r3, [r4, #0]
    1c34:	2220      	movs	r2, #32
    1c36:	739a      	strb	r2, [r3, #14]
}
    1c38:	e7e2      	b.n	1c00 <_tc_interrupt_handler+0x24>
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	20000384 	.word	0x20000384

00001c40 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1c40:	b510      	push	{r4, lr}
    1c42:	2000      	movs	r0, #0
    1c44:	4b01      	ldr	r3, [pc, #4]	; (1c4c <TC1_Handler+0xc>)
    1c46:	4798      	blx	r3
    1c48:	bd10      	pop	{r4, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	00001bdd 	.word	0x00001bdd

00001c50 <TC2_Handler>:
    1c50:	b510      	push	{r4, lr}
    1c52:	2001      	movs	r0, #1
    1c54:	4b01      	ldr	r3, [pc, #4]	; (1c5c <TC2_Handler+0xc>)
    1c56:	4798      	blx	r3
    1c58:	bd10      	pop	{r4, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001bdd 	.word	0x00001bdd

00001c60 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1c60:	4b06      	ldr	r3, [pc, #24]	; (1c7c <_tc_get_inst_index+0x1c>)
    1c62:	4298      	cmp	r0, r3
    1c64:	d008      	beq.n	1c78 <_tc_get_inst_index+0x18>
    1c66:	4a06      	ldr	r2, [pc, #24]	; (1c80 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1c68:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1c6a:	4290      	cmp	r0, r2
    1c6c:	d001      	beq.n	1c72 <_tc_get_inst_index+0x12>
}
    1c6e:	0018      	movs	r0, r3
    1c70:	4770      	bx	lr
    1c72:	3301      	adds	r3, #1
			return i;
    1c74:	b2db      	uxtb	r3, r3
    1c76:	e7fa      	b.n	1c6e <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c78:	2300      	movs	r3, #0
    1c7a:	e7fb      	b.n	1c74 <_tc_get_inst_index+0x14>
    1c7c:	42001800 	.word	0x42001800
    1c80:	42001c00 	.word	0x42001c00

00001c84 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	b085      	sub	sp, #20
    1c88:	0004      	movs	r4, r0
    1c8a:	000d      	movs	r5, r1
    1c8c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1c8e:	0008      	movs	r0, r1
    1c90:	4b82      	ldr	r3, [pc, #520]	; (1e9c <tc_init+0x218>)
    1c92:	4798      	blx	r3
    1c94:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1c96:	ab03      	add	r3, sp, #12
    1c98:	2212      	movs	r2, #18
    1c9a:	701a      	strb	r2, [r3, #0]
    1c9c:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1c9e:	ab02      	add	r3, sp, #8
    1ca0:	322e      	adds	r2, #46	; 0x2e
    1ca2:	801a      	strh	r2, [r3, #0]
    1ca4:	3240      	adds	r2, #64	; 0x40
    1ca6:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1ca8:	2300      	movs	r3, #0
    1caa:	60a3      	str	r3, [r4, #8]
    1cac:	60e3      	str	r3, [r4, #12]
    1cae:	6123      	str	r3, [r4, #16]
    1cb0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1cb2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1cb4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1cb6:	0082      	lsls	r2, r0, #2
    1cb8:	4b79      	ldr	r3, [pc, #484]	; (1ea0 <tc_init+0x21c>)
    1cba:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1cbc:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1cbe:	78b3      	ldrb	r3, [r6, #2]
    1cc0:	2b08      	cmp	r3, #8
    1cc2:	d006      	beq.n	1cd2 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1cc4:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1cc6:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1cc8:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1cca:	07db      	lsls	r3, r3, #31
    1ccc:	d505      	bpl.n	1cda <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1cce:	b005      	add	sp, #20
    1cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1cd2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1cd4:	07fa      	lsls	r2, r7, #31
    1cd6:	d4fa      	bmi.n	1cce <tc_init+0x4a>
    1cd8:	e7f4      	b.n	1cc4 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1cda:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1cdc:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1cde:	06db      	lsls	r3, r3, #27
    1ce0:	d4f5      	bmi.n	1cce <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1ce2:	882b      	ldrh	r3, [r5, #0]
    1ce4:	079b      	lsls	r3, r3, #30
    1ce6:	d4f2      	bmi.n	1cce <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1ce8:	7c33      	ldrb	r3, [r6, #16]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d000      	beq.n	1cf0 <tc_init+0x6c>
    1cee:	e07a      	b.n	1de6 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1cf0:	7f33      	ldrb	r3, [r6, #28]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d000      	beq.n	1cf8 <tc_init+0x74>
    1cf6:	e082      	b.n	1dfe <tc_init+0x17a>
    1cf8:	496a      	ldr	r1, [pc, #424]	; (1ea4 <tc_init+0x220>)
    1cfa:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1cfc:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1cfe:	ab02      	add	r3, sp, #8
    1d00:	5ad3      	ldrh	r3, [r2, r3]
    1d02:	4303      	orrs	r3, r0
    1d04:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1d06:	78b3      	ldrb	r3, [r6, #2]
    1d08:	2b08      	cmp	r3, #8
    1d0a:	d100      	bne.n	1d0e <tc_init+0x8a>
    1d0c:	e087      	b.n	1e1e <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1d0e:	7833      	ldrb	r3, [r6, #0]
    1d10:	466a      	mov	r2, sp
    1d12:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1d14:	ab03      	add	r3, sp, #12
    1d16:	5ddf      	ldrb	r7, [r3, r7]
    1d18:	4669      	mov	r1, sp
    1d1a:	0038      	movs	r0, r7
    1d1c:	4b62      	ldr	r3, [pc, #392]	; (1ea8 <tc_init+0x224>)
    1d1e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1d20:	0038      	movs	r0, r7
    1d22:	4b62      	ldr	r3, [pc, #392]	; (1eac <tc_init+0x228>)
    1d24:	4798      	blx	r3
	ctrla_tmp =
    1d26:	8931      	ldrh	r1, [r6, #8]
    1d28:	88b3      	ldrh	r3, [r6, #4]
    1d2a:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1d2c:	78b1      	ldrb	r1, [r6, #2]
    1d2e:	79b2      	ldrb	r2, [r6, #6]
    1d30:	4311      	orrs	r1, r2
	ctrla_tmp =
    1d32:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1d34:	7873      	ldrb	r3, [r6, #1]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d002      	beq.n	1d40 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1d3a:	2380      	movs	r3, #128	; 0x80
    1d3c:	011b      	lsls	r3, r3, #4
    1d3e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d40:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d42:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1d44:	b25b      	sxtb	r3, r3
    1d46:	2b00      	cmp	r3, #0
    1d48:	dbfb      	blt.n	1d42 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1d4a:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1d4c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1d4e:	1e4b      	subs	r3, r1, #1
    1d50:	4199      	sbcs	r1, r3
    1d52:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1d54:	7bb3      	ldrb	r3, [r6, #14]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d001      	beq.n	1d5e <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1d5a:	2301      	movs	r3, #1
    1d5c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d60:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1d62:	b25b      	sxtb	r3, r3
    1d64:	2b00      	cmp	r3, #0
    1d66:	dbfb      	blt.n	1d60 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1d68:	23ff      	movs	r3, #255	; 0xff
    1d6a:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1d6c:	2900      	cmp	r1, #0
    1d6e:	d005      	beq.n	1d7c <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d72:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1d74:	b25b      	sxtb	r3, r3
    1d76:	2b00      	cmp	r3, #0
    1d78:	dbfb      	blt.n	1d72 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1d7a:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1d7c:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1d7e:	7af3      	ldrb	r3, [r6, #11]
    1d80:	2b00      	cmp	r3, #0
    1d82:	d001      	beq.n	1d88 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d84:	2310      	movs	r3, #16
    1d86:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1d88:	7b33      	ldrb	r3, [r6, #12]
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d001      	beq.n	1d92 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d8e:	2320      	movs	r3, #32
    1d90:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d92:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d94:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1d96:	b25b      	sxtb	r3, r3
    1d98:	2b00      	cmp	r3, #0
    1d9a:	dbfb      	blt.n	1d94 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d9c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d9e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1da0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1da2:	b25b      	sxtb	r3, r3
    1da4:	2b00      	cmp	r3, #0
    1da6:	dbfb      	blt.n	1da0 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1da8:	7923      	ldrb	r3, [r4, #4]
    1daa:	2b04      	cmp	r3, #4
    1dac:	d03f      	beq.n	1e2e <tc_init+0x1aa>
    1dae:	2b08      	cmp	r3, #8
    1db0:	d05e      	beq.n	1e70 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1db2:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1db4:	2b00      	cmp	r3, #0
    1db6:	d000      	beq.n	1dba <tc_init+0x136>
    1db8:	e789      	b.n	1cce <tc_init+0x4a>
    1dba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dbc:	b25b      	sxtb	r3, r3
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	dbfb      	blt.n	1dba <tc_init+0x136>
				= config->counter_16_bit.value;
    1dc2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1dc4:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dc6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dc8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dca:	b25b      	sxtb	r3, r3
    1dcc:	2b00      	cmp	r3, #0
    1dce:	dbfb      	blt.n	1dc8 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1dd0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1dd2:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dd4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dd6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1dd8:	b25b      	sxtb	r3, r3
    1dda:	2b00      	cmp	r3, #0
    1ddc:	dbfb      	blt.n	1dd6 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1dde:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1de0:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1de2:	2000      	movs	r0, #0
    1de4:	e773      	b.n	1cce <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1de6:	a901      	add	r1, sp, #4
    1de8:	2301      	movs	r3, #1
    1dea:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1dec:	2200      	movs	r2, #0
    1dee:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1df0:	7e32      	ldrb	r2, [r6, #24]
    1df2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1df4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1df6:	7d30      	ldrb	r0, [r6, #20]
    1df8:	4b2d      	ldr	r3, [pc, #180]	; (1eb0 <tc_init+0x22c>)
    1dfa:	4798      	blx	r3
    1dfc:	e778      	b.n	1cf0 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1dfe:	a901      	add	r1, sp, #4
    1e00:	2301      	movs	r3, #1
    1e02:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1e04:	2200      	movs	r2, #0
    1e06:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1e08:	3224      	adds	r2, #36	; 0x24
    1e0a:	18b2      	adds	r2, r6, r2
    1e0c:	7812      	ldrb	r2, [r2, #0]
    1e0e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1e10:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1e12:	331f      	adds	r3, #31
    1e14:	18f3      	adds	r3, r6, r3
    1e16:	7818      	ldrb	r0, [r3, #0]
    1e18:	4b25      	ldr	r3, [pc, #148]	; (1eb0 <tc_init+0x22c>)
    1e1a:	4798      	blx	r3
    1e1c:	e76c      	b.n	1cf8 <tc_init+0x74>
    1e1e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1e20:	1c7a      	adds	r2, r7, #1
    1e22:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1e24:	ab02      	add	r3, sp, #8
    1e26:	5ad3      	ldrh	r3, [r2, r3]
    1e28:	4303      	orrs	r3, r0
    1e2a:	620b      	str	r3, [r1, #32]
    1e2c:	e76f      	b.n	1d0e <tc_init+0x8a>
    1e2e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e30:	b25b      	sxtb	r3, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	dbfb      	blt.n	1e2e <tc_init+0x1aa>
					config->counter_8_bit.value;
    1e36:	2328      	movs	r3, #40	; 0x28
    1e38:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1e3a:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e3c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e3e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e40:	b25b      	sxtb	r3, r3
    1e42:	2b00      	cmp	r3, #0
    1e44:	dbfb      	blt.n	1e3e <tc_init+0x1ba>
					config->counter_8_bit.period;
    1e46:	2329      	movs	r3, #41	; 0x29
    1e48:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1e4a:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e4e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e50:	b25b      	sxtb	r3, r3
    1e52:	2b00      	cmp	r3, #0
    1e54:	dbfb      	blt.n	1e4e <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1e56:	232a      	movs	r3, #42	; 0x2a
    1e58:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1e5a:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e5c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e5e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e60:	b25b      	sxtb	r3, r3
    1e62:	2b00      	cmp	r3, #0
    1e64:	dbfb      	blt.n	1e5e <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1e66:	232b      	movs	r3, #43	; 0x2b
    1e68:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1e6a:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e72e      	b.n	1cce <tc_init+0x4a>
    1e70:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e72:	b25b      	sxtb	r3, r3
    1e74:	2b00      	cmp	r3, #0
    1e76:	dbfb      	blt.n	1e70 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1e78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e7a:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e7c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e7e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e80:	b25b      	sxtb	r3, r3
    1e82:	2b00      	cmp	r3, #0
    1e84:	dbfb      	blt.n	1e7e <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1e86:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1e88:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e8a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e8c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e8e:	b25b      	sxtb	r3, r3
    1e90:	2b00      	cmp	r3, #0
    1e92:	dbfb      	blt.n	1e8c <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1e94:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1e96:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1e98:	2000      	movs	r0, #0
    1e9a:	e718      	b.n	1cce <tc_init+0x4a>
    1e9c:	00001c61 	.word	0x00001c61
    1ea0:	20000384 	.word	0x20000384
    1ea4:	40000400 	.word	0x40000400
    1ea8:	000027e1 	.word	0x000027e1
    1eac:	00002755 	.word	0x00002755
    1eb0:	000028d9 	.word	0x000028d9

00001eb4 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1eb4:	6802      	ldr	r2, [r0, #0]
    1eb6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1eb8:	b25b      	sxtb	r3, r3
    1eba:	2b00      	cmp	r3, #0
    1ebc:	dbfb      	blt.n	1eb6 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1ebe:	7903      	ldrb	r3, [r0, #4]
    1ec0:	2b04      	cmp	r3, #4
    1ec2:	d005      	beq.n	1ed0 <tc_set_count_value+0x1c>
    1ec4:	2b08      	cmp	r3, #8
    1ec6:	d00b      	beq.n	1ee0 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1ec8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d004      	beq.n	1ed8 <tc_set_count_value+0x24>
	}
}
    1ece:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1ed0:	b2c9      	uxtb	r1, r1
    1ed2:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    1ed4:	2000      	movs	r0, #0
    1ed6:	e7fa      	b.n	1ece <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1ed8:	b289      	uxth	r1, r1
    1eda:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    1edc:	2000      	movs	r0, #0
    1ede:	e7f6      	b.n	1ece <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1ee0:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    1ee2:	2000      	movs	r0, #0
    1ee4:	e7f3      	b.n	1ece <tc_set_count_value+0x1a>

00001ee6 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1ee6:	6802      	ldr	r2, [r0, #0]
    1ee8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1eea:	b25b      	sxtb	r3, r3
    1eec:	2b00      	cmp	r3, #0
    1eee:	dbfb      	blt.n	1ee8 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1ef0:	7903      	ldrb	r3, [r0, #4]
    1ef2:	2b04      	cmp	r3, #4
    1ef4:	d005      	beq.n	1f02 <tc_get_count_value+0x1c>
    1ef6:	2b08      	cmp	r3, #8
    1ef8:	d009      	beq.n	1f0e <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1efa:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1efc:	2b00      	cmp	r3, #0
    1efe:	d003      	beq.n	1f08 <tc_get_count_value+0x22>
}
    1f00:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1f02:	7c10      	ldrb	r0, [r2, #16]
    1f04:	b2c0      	uxtb	r0, r0
    1f06:	e7fb      	b.n	1f00 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1f08:	8a10      	ldrh	r0, [r2, #16]
    1f0a:	b280      	uxth	r0, r0
    1f0c:	e7f8      	b.n	1f00 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1f0e:	6910      	ldr	r0, [r2, #16]
    1f10:	e7f6      	b.n	1f00 <tc_get_count_value+0x1a>
	...

00001f14 <convertColorSPIData>:
#define TWOBITSPIVALUES {0x88,0x8E,0xE8,0xEE}
const	uint8_t SPIDataConertConsArray[] = TWOBITSPIVALUES;


static uint8_t* convertColorSPIData(colorInfo* colorData )
{
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f16:	46d6      	mov	lr, sl
    1f18:	464f      	mov	r7, r9
    1f1a:	4646      	mov	r6, r8
    1f1c:	b5c0      	push	{r6, r7, lr}
    1f1e:	b082      	sub	sp, #8
    1f20:	4682      	mov	sl, r0
	volatile static uint8_t SPIData[NoBytesLED];
	volatile uint8_t i =0;
    1f22:	466b      	mov	r3, sp
    1f24:	1dda      	adds	r2, r3, #7
    1f26:	2300      	movs	r3, #0
    1f28:	7013      	strb	r3, [r2, #0]
	uint8_t countSPIData = 0;
	volatile uint8_t temp =0;
    1f2a:	4669      	mov	r1, sp
    1f2c:	718b      	strb	r3, [r1, #6]
	volatile uint8_t twoBitValue = 0;
    1f2e:	4669      	mov	r1, sp
    1f30:	714b      	strb	r3, [r1, #5]
	for(i=0;i<4;i++)
    1f32:	7013      	strb	r3, [r2, #0]
    1f34:	7813      	ldrb	r3, [r2, #0]
    1f36:	b2db      	uxtb	r3, r3
    1f38:	2b03      	cmp	r3, #3
    1f3a:	d900      	bls.n	1f3e <convertColorSPIData+0x2a>
    1f3c:	e089      	b.n	2052 <convertColorSPIData+0x13e>
    1f3e:	2300      	movs	r3, #0
	{
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1f40:	466a      	mov	r2, sp
    1f42:	1dd1      	adds	r1, r2, #7
    1f44:	22c0      	movs	r2, #192	; 0xc0
    1f46:	4694      	mov	ip, r2
    1f48:	2703      	movs	r7, #3
    1f4a:	466a      	mov	r2, sp
    1f4c:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1f4e:	4e42      	ldr	r6, [pc, #264]	; (2058 <convertColorSPIData+0x144>)
    1f50:	4d42      	ldr	r5, [pc, #264]	; (205c <convertColorSPIData+0x148>)
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1f52:	780a      	ldrb	r2, [r1, #0]
    1f54:	7808      	ldrb	r0, [r1, #0]
    1f56:	4680      	mov	r8, r0
    1f58:	0052      	lsls	r2, r2, #1
    1f5a:	4660      	mov	r0, ip
    1f5c:	4110      	asrs	r0, r2
    1f5e:	4652      	mov	r2, sl
    1f60:	7852      	ldrb	r2, [r2, #1]
    1f62:	4002      	ands	r2, r0
    1f64:	4640      	mov	r0, r8
    1f66:	1a38      	subs	r0, r7, r0
    1f68:	0040      	lsls	r0, r0, #1
    1f6a:	4102      	asrs	r2, r0
    1f6c:	b2d2      	uxtb	r2, r2
    1f6e:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1f70:	7822      	ldrb	r2, [r4, #0]
    1f72:	b2d2      	uxtb	r2, r2
    1f74:	5cb2      	ldrb	r2, [r6, r2]
    1f76:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1f78:	3301      	adds	r3, #1
    1f7a:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1f7c:	780a      	ldrb	r2, [r1, #0]
    1f7e:	3201      	adds	r2, #1
    1f80:	b2d2      	uxtb	r2, r2
    1f82:	700a      	strb	r2, [r1, #0]
    1f84:	780a      	ldrb	r2, [r1, #0]
    1f86:	b2d2      	uxtb	r2, r2
    1f88:	2a03      	cmp	r2, #3
    1f8a:	d9e2      	bls.n	1f52 <convertColorSPIData+0x3e>
	}
	for(i=0;i<4;i++)
    1f8c:	466a      	mov	r2, sp
    1f8e:	2100      	movs	r1, #0
    1f90:	71d1      	strb	r1, [r2, #7]
    1f92:	3207      	adds	r2, #7
    1f94:	7812      	ldrb	r2, [r2, #0]
    1f96:	b2d2      	uxtb	r2, r2
    1f98:	2a03      	cmp	r2, #3
    1f9a:	d825      	bhi.n	1fe8 <convertColorSPIData+0xd4>
	{
		//temp = (0x30>>(i*2));
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    1f9c:	466a      	mov	r2, sp
    1f9e:	1dd1      	adds	r1, r2, #7
    1fa0:	22c0      	movs	r2, #192	; 0xc0
    1fa2:	4694      	mov	ip, r2
    1fa4:	2703      	movs	r7, #3
    1fa6:	466a      	mov	r2, sp
    1fa8:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1faa:	4e2b      	ldr	r6, [pc, #172]	; (2058 <convertColorSPIData+0x144>)
    1fac:	4d2b      	ldr	r5, [pc, #172]	; (205c <convertColorSPIData+0x148>)
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    1fae:	780a      	ldrb	r2, [r1, #0]
    1fb0:	7808      	ldrb	r0, [r1, #0]
    1fb2:	4680      	mov	r8, r0
    1fb4:	0052      	lsls	r2, r2, #1
    1fb6:	4660      	mov	r0, ip
    1fb8:	4110      	asrs	r0, r2
    1fba:	4652      	mov	r2, sl
    1fbc:	7812      	ldrb	r2, [r2, #0]
    1fbe:	4002      	ands	r2, r0
    1fc0:	4640      	mov	r0, r8
    1fc2:	1a38      	subs	r0, r7, r0
    1fc4:	0040      	lsls	r0, r0, #1
    1fc6:	4102      	asrs	r2, r0
    1fc8:	b2d2      	uxtb	r2, r2
    1fca:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1fcc:	7822      	ldrb	r2, [r4, #0]
    1fce:	b2d2      	uxtb	r2, r2
    1fd0:	5cb2      	ldrb	r2, [r6, r2]
    1fd2:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1fd4:	3301      	adds	r3, #1
    1fd6:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1fd8:	780a      	ldrb	r2, [r1, #0]
    1fda:	3201      	adds	r2, #1
    1fdc:	b2d2      	uxtb	r2, r2
    1fde:	700a      	strb	r2, [r1, #0]
    1fe0:	780a      	ldrb	r2, [r1, #0]
    1fe2:	b2d2      	uxtb	r2, r2
    1fe4:	2a03      	cmp	r2, #3
    1fe6:	d9e2      	bls.n	1fae <convertColorSPIData+0x9a>
	}
	for(i=0;i<4;i++)
    1fe8:	466a      	mov	r2, sp
    1fea:	2100      	movs	r1, #0
    1fec:	71d1      	strb	r1, [r2, #7]
    1fee:	3207      	adds	r2, #7
    1ff0:	7812      	ldrb	r2, [r2, #0]
    1ff2:	b2d2      	uxtb	r2, r2
    1ff4:	2a03      	cmp	r2, #3
    1ff6:	d825      	bhi.n	2044 <convertColorSPIData+0x130>
	{
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    1ff8:	466a      	mov	r2, sp
    1ffa:	1dd1      	adds	r1, r2, #7
    1ffc:	22c0      	movs	r2, #192	; 0xc0
    1ffe:	4694      	mov	ip, r2
    2000:	2703      	movs	r7, #3
    2002:	466a      	mov	r2, sp
    2004:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2006:	4e14      	ldr	r6, [pc, #80]	; (2058 <convertColorSPIData+0x144>)
    2008:	4d14      	ldr	r5, [pc, #80]	; (205c <convertColorSPIData+0x148>)
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    200a:	780a      	ldrb	r2, [r1, #0]
    200c:	7808      	ldrb	r0, [r1, #0]
    200e:	4680      	mov	r8, r0
    2010:	0052      	lsls	r2, r2, #1
    2012:	4660      	mov	r0, ip
    2014:	4110      	asrs	r0, r2
    2016:	4652      	mov	r2, sl
    2018:	7892      	ldrb	r2, [r2, #2]
    201a:	4002      	ands	r2, r0
    201c:	4640      	mov	r0, r8
    201e:	1a38      	subs	r0, r7, r0
    2020:	0040      	lsls	r0, r0, #1
    2022:	4102      	asrs	r2, r0
    2024:	b2d2      	uxtb	r2, r2
    2026:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2028:	7822      	ldrb	r2, [r4, #0]
    202a:	b2d2      	uxtb	r2, r2
    202c:	5cb2      	ldrb	r2, [r6, r2]
    202e:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    2030:	3301      	adds	r3, #1
    2032:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    2034:	780a      	ldrb	r2, [r1, #0]
    2036:	3201      	adds	r2, #1
    2038:	b2d2      	uxtb	r2, r2
    203a:	700a      	strb	r2, [r1, #0]
    203c:	780a      	ldrb	r2, [r1, #0]
    203e:	b2d2      	uxtb	r2, r2
    2040:	2a03      	cmp	r2, #3
    2042:	d9e2      	bls.n	200a <convertColorSPIData+0xf6>
	}
	return SPIData;
}
    2044:	4805      	ldr	r0, [pc, #20]	; (205c <convertColorSPIData+0x148>)
    2046:	b002      	add	sp, #8
    2048:	bc1c      	pop	{r2, r3, r4}
    204a:	4690      	mov	r8, r2
    204c:	4699      	mov	r9, r3
    204e:	46a2      	mov	sl, r4
    2050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t countSPIData = 0;
    2052:	2300      	movs	r3, #0
    2054:	e79a      	b.n	1f8c <convertColorSPIData+0x78>
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	00003720 	.word	0x00003720
    205c:	200000ec 	.word	0x200000ec

00002060 <RGBPI55SetAllLED>:

void RGBPI55SetAllLED(colorInfo*  colorLED)
{
    2060:	b5f0      	push	{r4, r5, r6, r7, lr}
    2062:	46c6      	mov	lr, r8
    2064:	b500      	push	{lr}
    2066:	0006      	movs	r6, r0
    2068:	253c      	movs	r5, #60	; 0x3c
	static uint8_t counter = 31;
	uint8_t i,j =0;
	
	for(j = 0 ; j < NOLEDS ; j++)
	{
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    206a:	4b1e      	ldr	r3, [pc, #120]	; (20e4 <RGBPI55SetAllLED+0x84>)
    206c:	4698      	mov	r8, r3
		startArrayAddress   = j*NoBytesLED + STARTZEROS ;
		for(i = 0 ; i < NoBytesLED ; i++)
		{
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    206e:	4c1e      	ldr	r4, [pc, #120]	; (20e8 <RGBPI55SetAllLED+0x88>)
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    2070:	0030      	movs	r0, r6
    2072:	47c0      	blx	r8
    2074:	0007      	movs	r7, r0
    2076:	370c      	adds	r7, #12
    2078:	0003      	movs	r3, r0
    207a:	1a28      	subs	r0, r5, r0
    207c:	18c2      	adds	r2, r0, r3
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    207e:	7819      	ldrb	r1, [r3, #0]
    2080:	54a1      	strb	r1, [r4, r2]
    2082:	3301      	adds	r3, #1
		for(i = 0 ; i < NoBytesLED ; i++)
    2084:	42bb      	cmp	r3, r7
    2086:	d1f9      	bne.n	207c <RGBPI55SetAllLED+0x1c>
    2088:	3603      	adds	r6, #3
    208a:	350c      	adds	r5, #12
	for(j = 0 ; j < NOLEDS ; j++)
    208c:	2d60      	cmp	r5, #96	; 0x60
    208e:	d1ef      	bne.n	2070 <RGBPI55SetAllLED+0x10>
		}
	}
	//port_pin_set_output_level(PROFILE_PIN,true);
	while(transferOngoing == true);
    2090:	4b16      	ldr	r3, [pc, #88]	; (20ec <RGBPI55SetAllLED+0x8c>)
    2092:	781b      	ldrb	r3, [r3, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d1fd      	bne.n	2094 <RGBPI55SetAllLED+0x34>
	while(transferDone == false)
    2098:	4b15      	ldr	r3, [pc, #84]	; (20f0 <RGBPI55SetAllLED+0x90>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2b00      	cmp	r3, #0
    209e:	d119      	bne.n	20d4 <RGBPI55SetAllLED+0x74>
	{
		
		if(counter>30)
    20a0:	4e14      	ldr	r6, [pc, #80]	; (20f4 <RGBPI55SetAllLED+0x94>)
		{
			
			//delay_cycles_us(1);
			counter = 0;
    20a2:	0037      	movs	r7, r6
			while(dma_start_transfer_job(&example_resource) == STATUS_OK);
    20a4:	4d14      	ldr	r5, [pc, #80]	; (20f8 <RGBPI55SetAllLED+0x98>)
    20a6:	e00a      	b.n	20be <RGBPI55SetAllLED+0x5e>
			
		}
		counter++;
    20a8:	4a12      	ldr	r2, [pc, #72]	; (20f4 <RGBPI55SetAllLED+0x94>)
    20aa:	7813      	ldrb	r3, [r2, #0]
    20ac:	3301      	adds	r3, #1
    20ae:	7013      	strb	r3, [r2, #0]
		delay_cycles_us(30);
    20b0:	201e      	movs	r0, #30
    20b2:	4b12      	ldr	r3, [pc, #72]	; (20fc <RGBPI55SetAllLED+0x9c>)
    20b4:	4798      	blx	r3
	while(transferDone == false)
    20b6:	4b0e      	ldr	r3, [pc, #56]	; (20f0 <RGBPI55SetAllLED+0x90>)
    20b8:	781b      	ldrb	r3, [r3, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d10a      	bne.n	20d4 <RGBPI55SetAllLED+0x74>
		if(counter>30)
    20be:	7833      	ldrb	r3, [r6, #0]
    20c0:	2b1e      	cmp	r3, #30
    20c2:	d9f1      	bls.n	20a8 <RGBPI55SetAllLED+0x48>
			counter = 0;
    20c4:	2300      	movs	r3, #0
    20c6:	703b      	strb	r3, [r7, #0]
			while(dma_start_transfer_job(&example_resource) == STATUS_OK);
    20c8:	4c0d      	ldr	r4, [pc, #52]	; (2100 <RGBPI55SetAllLED+0xa0>)
    20ca:	0028      	movs	r0, r5
    20cc:	47a0      	blx	r4
    20ce:	2800      	cmp	r0, #0
    20d0:	d0fb      	beq.n	20ca <RGBPI55SetAllLED+0x6a>
    20d2:	e7e9      	b.n	20a8 <RGBPI55SetAllLED+0x48>
	//{
	//	 errr= dma_start_transfer_job(&example_resource);
	//	delay_cycles_ms(1);
	//}
	
	transferOngoing = false;
    20d4:	2300      	movs	r3, #0
    20d6:	4a05      	ldr	r2, [pc, #20]	; (20ec <RGBPI55SetAllLED+0x8c>)
    20d8:	7013      	strb	r3, [r2, #0]
	transferDone = false;
    20da:	4a05      	ldr	r2, [pc, #20]	; (20f0 <RGBPI55SetAllLED+0x90>)
    20dc:	7013      	strb	r3, [r2, #0]
}
    20de:	bc04      	pop	{r2}
    20e0:	4690      	mov	r8, r2
    20e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e4:	00001f15 	.word	0x00001f15
    20e8:	20000800 	.word	0x20000800
    20ec:	20000101 	.word	0x20000101
    20f0:	200001ae 	.word	0x200001ae
    20f4:	20000014 	.word	0x20000014
    20f8:	2000038c 	.word	0x2000038c
    20fc:	00000989 	.word	0x00000989
    2100:	00000cad 	.word	0x00000cad

00002104 <clearLEDS>:
	transferOngoing = false;
	transferDone = false;
}

void clearLEDS()
{
    2104:	b510      	push	{r4, lr}
	 static colorInfo colorLED[3];
	 uint8_t i =0;
	 for(i=0;i<3;i++)
	 {
		colorLED[i].RBrightness = 0;
    2106:	4807      	ldr	r0, [pc, #28]	; (2124 <clearLEDS+0x20>)
    2108:	2300      	movs	r3, #0
    210a:	7003      	strb	r3, [r0, #0]
		colorLED[i].GBrightness = 0;
    210c:	7043      	strb	r3, [r0, #1]
		colorLED[i].BBrightness = 0;
    210e:	7083      	strb	r3, [r0, #2]
		colorLED[i].RBrightness = 0;
    2110:	70c3      	strb	r3, [r0, #3]
		colorLED[i].GBrightness = 0;
    2112:	7103      	strb	r3, [r0, #4]
		colorLED[i].BBrightness = 0;
    2114:	7143      	strb	r3, [r0, #5]
		colorLED[i].RBrightness = 0;
    2116:	7183      	strb	r3, [r0, #6]
		colorLED[i].GBrightness = 0;
    2118:	71c3      	strb	r3, [r0, #7]
		colorLED[i].BBrightness = 0;
    211a:	7203      	strb	r3, [r0, #8]
	 }
	 RGBPI55SetAllLED(colorLED);
    211c:	4b02      	ldr	r3, [pc, #8]	; (2128 <clearLEDS+0x24>)
    211e:	4798      	blx	r3
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	200000f8 	.word	0x200000f8
    2128:	00002061 	.word	0x00002061

0000212c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    212c:	4770      	bx	lr
	...

00002130 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2130:	4b0c      	ldr	r3, [pc, #48]	; (2164 <cpu_irq_enter_critical+0x34>)
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	2b00      	cmp	r3, #0
    2136:	d106      	bne.n	2146 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2138:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    213c:	2b00      	cmp	r3, #0
    213e:	d007      	beq.n	2150 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2140:	2200      	movs	r2, #0
    2142:	4b09      	ldr	r3, [pc, #36]	; (2168 <cpu_irq_enter_critical+0x38>)
    2144:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2146:	4a07      	ldr	r2, [pc, #28]	; (2164 <cpu_irq_enter_critical+0x34>)
    2148:	6813      	ldr	r3, [r2, #0]
    214a:	3301      	adds	r3, #1
    214c:	6013      	str	r3, [r2, #0]
}
    214e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2150:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2152:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2156:	2200      	movs	r2, #0
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <cpu_irq_enter_critical+0x3c>)
    215a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    215c:	3201      	adds	r2, #1
    215e:	4b02      	ldr	r3, [pc, #8]	; (2168 <cpu_irq_enter_critical+0x38>)
    2160:	701a      	strb	r2, [r3, #0]
    2162:	e7f0      	b.n	2146 <cpu_irq_enter_critical+0x16>
    2164:	20000104 	.word	0x20000104
    2168:	20000108 	.word	0x20000108
    216c:	20000015 	.word	0x20000015

00002170 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2170:	4b08      	ldr	r3, [pc, #32]	; (2194 <cpu_irq_leave_critical+0x24>)
    2172:	681a      	ldr	r2, [r3, #0]
    2174:	3a01      	subs	r2, #1
    2176:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2178:	681b      	ldr	r3, [r3, #0]
    217a:	2b00      	cmp	r3, #0
    217c:	d109      	bne.n	2192 <cpu_irq_leave_critical+0x22>
    217e:	4b06      	ldr	r3, [pc, #24]	; (2198 <cpu_irq_leave_critical+0x28>)
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d005      	beq.n	2192 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2186:	2201      	movs	r2, #1
    2188:	4b04      	ldr	r3, [pc, #16]	; (219c <cpu_irq_leave_critical+0x2c>)
    218a:	701a      	strb	r2, [r3, #0]
    218c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2190:	b662      	cpsie	i
	}
}
    2192:	4770      	bx	lr
    2194:	20000104 	.word	0x20000104
    2198:	20000108 	.word	0x20000108
    219c:	20000015 	.word	0x20000015

000021a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    21a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    21a2:	2808      	cmp	r0, #8
    21a4:	d803      	bhi.n	21ae <system_clock_source_get_hz+0xe>
    21a6:	0080      	lsls	r0, r0, #2
    21a8:	4b1b      	ldr	r3, [pc, #108]	; (2218 <system_clock_source_get_hz+0x78>)
    21aa:	581b      	ldr	r3, [r3, r0]
    21ac:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    21ae:	2000      	movs	r0, #0
    21b0:	e030      	b.n	2214 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    21b2:	4b1a      	ldr	r3, [pc, #104]	; (221c <system_clock_source_get_hz+0x7c>)
    21b4:	6918      	ldr	r0, [r3, #16]
    21b6:	e02d      	b.n	2214 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    21b8:	4b19      	ldr	r3, [pc, #100]	; (2220 <system_clock_source_get_hz+0x80>)
    21ba:	6a1b      	ldr	r3, [r3, #32]
    21bc:	059b      	lsls	r3, r3, #22
    21be:	0f9b      	lsrs	r3, r3, #30
    21c0:	4818      	ldr	r0, [pc, #96]	; (2224 <system_clock_source_get_hz+0x84>)
    21c2:	40d8      	lsrs	r0, r3
    21c4:	e026      	b.n	2214 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    21c6:	4b15      	ldr	r3, [pc, #84]	; (221c <system_clock_source_get_hz+0x7c>)
    21c8:	6958      	ldr	r0, [r3, #20]
    21ca:	e023      	b.n	2214 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    21cc:	4b13      	ldr	r3, [pc, #76]	; (221c <system_clock_source_get_hz+0x7c>)
    21ce:	681b      	ldr	r3, [r3, #0]
			return 0;
    21d0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    21d2:	079b      	lsls	r3, r3, #30
    21d4:	d51e      	bpl.n	2214 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21d6:	4912      	ldr	r1, [pc, #72]	; (2220 <system_clock_source_get_hz+0x80>)
    21d8:	2210      	movs	r2, #16
    21da:	68cb      	ldr	r3, [r1, #12]
    21dc:	421a      	tst	r2, r3
    21de:	d0fc      	beq.n	21da <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    21e0:	4b0e      	ldr	r3, [pc, #56]	; (221c <system_clock_source_get_hz+0x7c>)
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	075b      	lsls	r3, r3, #29
    21e6:	d401      	bmi.n	21ec <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    21e8:	480f      	ldr	r0, [pc, #60]	; (2228 <system_clock_source_get_hz+0x88>)
    21ea:	e013      	b.n	2214 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    21ec:	2000      	movs	r0, #0
    21ee:	4b0f      	ldr	r3, [pc, #60]	; (222c <system_clock_source_get_hz+0x8c>)
    21f0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    21f2:	4b0a      	ldr	r3, [pc, #40]	; (221c <system_clock_source_get_hz+0x7c>)
    21f4:	689b      	ldr	r3, [r3, #8]
    21f6:	041b      	lsls	r3, r3, #16
    21f8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    21fa:	4358      	muls	r0, r3
    21fc:	e00a      	b.n	2214 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    21fe:	2350      	movs	r3, #80	; 0x50
    2200:	4a07      	ldr	r2, [pc, #28]	; (2220 <system_clock_source_get_hz+0x80>)
    2202:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2204:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2206:	075b      	lsls	r3, r3, #29
    2208:	d504      	bpl.n	2214 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    220a:	4b04      	ldr	r3, [pc, #16]	; (221c <system_clock_source_get_hz+0x7c>)
    220c:	68d8      	ldr	r0, [r3, #12]
    220e:	e001      	b.n	2214 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2210:	2080      	movs	r0, #128	; 0x80
    2212:	0200      	lsls	r0, r0, #8
	}
}
    2214:	bd10      	pop	{r4, pc}
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	00003724 	.word	0x00003724
    221c:	2000010c 	.word	0x2000010c
    2220:	40000800 	.word	0x40000800
    2224:	007a1200 	.word	0x007a1200
    2228:	02dc6c00 	.word	0x02dc6c00
    222c:	000027fd 	.word	0x000027fd

00002230 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2230:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2232:	490c      	ldr	r1, [pc, #48]	; (2264 <system_clock_source_osc8m_set_config+0x34>)
    2234:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2236:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2238:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    223a:	7840      	ldrb	r0, [r0, #1]
    223c:	2201      	movs	r2, #1
    223e:	4010      	ands	r0, r2
    2240:	0180      	lsls	r0, r0, #6
    2242:	2640      	movs	r6, #64	; 0x40
    2244:	43b3      	bics	r3, r6
    2246:	4303      	orrs	r3, r0
    2248:	402a      	ands	r2, r5
    224a:	01d2      	lsls	r2, r2, #7
    224c:	2080      	movs	r0, #128	; 0x80
    224e:	4383      	bics	r3, r0
    2250:	4313      	orrs	r3, r2
    2252:	2203      	movs	r2, #3
    2254:	4022      	ands	r2, r4
    2256:	0212      	lsls	r2, r2, #8
    2258:	4803      	ldr	r0, [pc, #12]	; (2268 <system_clock_source_osc8m_set_config+0x38>)
    225a:	4003      	ands	r3, r0
    225c:	4313      	orrs	r3, r2
    225e:	620b      	str	r3, [r1, #32]
}
    2260:	bd70      	pop	{r4, r5, r6, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	40000800 	.word	0x40000800
    2268:	fffffcff 	.word	0xfffffcff

0000226c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    226c:	b5f0      	push	{r4, r5, r6, r7, lr}
    226e:	46ce      	mov	lr, r9
    2270:	4647      	mov	r7, r8
    2272:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2274:	4b19      	ldr	r3, [pc, #100]	; (22dc <system_clock_source_osc32k_set_config+0x70>)
    2276:	4699      	mov	r9, r3
    2278:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    227a:	7841      	ldrb	r1, [r0, #1]
    227c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    227e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2280:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2282:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2284:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2286:	7880      	ldrb	r0, [r0, #2]
    2288:	2101      	movs	r1, #1
    228a:	4008      	ands	r0, r1
    228c:	0080      	lsls	r0, r0, #2
    228e:	2204      	movs	r2, #4
    2290:	4393      	bics	r3, r2
    2292:	4303      	orrs	r3, r0
    2294:	4660      	mov	r0, ip
    2296:	4008      	ands	r0, r1
    2298:	00c0      	lsls	r0, r0, #3
    229a:	3204      	adds	r2, #4
    229c:	4393      	bics	r3, r2
    229e:	4303      	orrs	r3, r0
    22a0:	0038      	movs	r0, r7
    22a2:	4008      	ands	r0, r1
    22a4:	0180      	lsls	r0, r0, #6
    22a6:	2740      	movs	r7, #64	; 0x40
    22a8:	43bb      	bics	r3, r7
    22aa:	4303      	orrs	r3, r0
    22ac:	0030      	movs	r0, r6
    22ae:	4008      	ands	r0, r1
    22b0:	01c0      	lsls	r0, r0, #7
    22b2:	2680      	movs	r6, #128	; 0x80
    22b4:	43b3      	bics	r3, r6
    22b6:	4303      	orrs	r3, r0
    22b8:	2007      	movs	r0, #7
    22ba:	4005      	ands	r5, r0
    22bc:	022d      	lsls	r5, r5, #8
    22be:	4808      	ldr	r0, [pc, #32]	; (22e0 <system_clock_source_osc32k_set_config+0x74>)
    22c0:	4003      	ands	r3, r0
    22c2:	432b      	orrs	r3, r5
    22c4:	4021      	ands	r1, r4
    22c6:	0309      	lsls	r1, r1, #12
    22c8:	4806      	ldr	r0, [pc, #24]	; (22e4 <system_clock_source_osc32k_set_config+0x78>)
    22ca:	4003      	ands	r3, r0
    22cc:	430b      	orrs	r3, r1
    22ce:	464a      	mov	r2, r9
    22d0:	6193      	str	r3, [r2, #24]
}
    22d2:	bc0c      	pop	{r2, r3}
    22d4:	4690      	mov	r8, r2
    22d6:	4699      	mov	r9, r3
    22d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	40000800 	.word	0x40000800
    22e0:	fffff8ff 	.word	0xfffff8ff
    22e4:	ffffefff 	.word	0xffffefff

000022e8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    22e8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22ea:	7a03      	ldrb	r3, [r0, #8]
    22ec:	069b      	lsls	r3, r3, #26
    22ee:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    22f0:	8942      	ldrh	r2, [r0, #10]
    22f2:	0592      	lsls	r2, r2, #22
    22f4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22f6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    22f8:	4918      	ldr	r1, [pc, #96]	; (235c <system_clock_source_dfll_set_config+0x74>)
    22fa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    22fc:	7983      	ldrb	r3, [r0, #6]
    22fe:	79c2      	ldrb	r2, [r0, #7]
    2300:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2302:	8842      	ldrh	r2, [r0, #2]
    2304:	8884      	ldrh	r4, [r0, #4]
    2306:	4322      	orrs	r2, r4
    2308:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    230a:	7842      	ldrb	r2, [r0, #1]
    230c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    230e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2310:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2312:	7803      	ldrb	r3, [r0, #0]
    2314:	2b04      	cmp	r3, #4
    2316:	d011      	beq.n	233c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2318:	2b20      	cmp	r3, #32
    231a:	d10e      	bne.n	233a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    231c:	7b03      	ldrb	r3, [r0, #12]
    231e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2320:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2322:	4313      	orrs	r3, r2
    2324:	89c2      	ldrh	r2, [r0, #14]
    2326:	0412      	lsls	r2, r2, #16
    2328:	490d      	ldr	r1, [pc, #52]	; (2360 <system_clock_source_dfll_set_config+0x78>)
    232a:	400a      	ands	r2, r1
    232c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    232e:	4a0b      	ldr	r2, [pc, #44]	; (235c <system_clock_source_dfll_set_config+0x74>)
    2330:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2332:	6811      	ldr	r1, [r2, #0]
    2334:	4b0b      	ldr	r3, [pc, #44]	; (2364 <system_clock_source_dfll_set_config+0x7c>)
    2336:	430b      	orrs	r3, r1
    2338:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    233a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    233c:	7b03      	ldrb	r3, [r0, #12]
    233e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2340:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2342:	4313      	orrs	r3, r2
    2344:	89c2      	ldrh	r2, [r0, #14]
    2346:	0412      	lsls	r2, r2, #16
    2348:	4905      	ldr	r1, [pc, #20]	; (2360 <system_clock_source_dfll_set_config+0x78>)
    234a:	400a      	ands	r2, r1
    234c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    234e:	4a03      	ldr	r2, [pc, #12]	; (235c <system_clock_source_dfll_set_config+0x74>)
    2350:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2352:	6813      	ldr	r3, [r2, #0]
    2354:	2104      	movs	r1, #4
    2356:	430b      	orrs	r3, r1
    2358:	6013      	str	r3, [r2, #0]
    235a:	e7ee      	b.n	233a <system_clock_source_dfll_set_config+0x52>
    235c:	2000010c 	.word	0x2000010c
    2360:	03ff0000 	.word	0x03ff0000
    2364:	00000424 	.word	0x00000424

00002368 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2368:	2808      	cmp	r0, #8
    236a:	d803      	bhi.n	2374 <system_clock_source_enable+0xc>
    236c:	0080      	lsls	r0, r0, #2
    236e:	4b25      	ldr	r3, [pc, #148]	; (2404 <system_clock_source_enable+0x9c>)
    2370:	581b      	ldr	r3, [r3, r0]
    2372:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2374:	2017      	movs	r0, #23
    2376:	e044      	b.n	2402 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2378:	4a23      	ldr	r2, [pc, #140]	; (2408 <system_clock_source_enable+0xa0>)
    237a:	6a13      	ldr	r3, [r2, #32]
    237c:	2102      	movs	r1, #2
    237e:	430b      	orrs	r3, r1
    2380:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2382:	2000      	movs	r0, #0
    2384:	e03d      	b.n	2402 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2386:	4a20      	ldr	r2, [pc, #128]	; (2408 <system_clock_source_enable+0xa0>)
    2388:	6993      	ldr	r3, [r2, #24]
    238a:	2102      	movs	r1, #2
    238c:	430b      	orrs	r3, r1
    238e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2390:	2000      	movs	r0, #0
		break;
    2392:	e036      	b.n	2402 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2394:	4a1c      	ldr	r2, [pc, #112]	; (2408 <system_clock_source_enable+0xa0>)
    2396:	8a13      	ldrh	r3, [r2, #16]
    2398:	2102      	movs	r1, #2
    239a:	430b      	orrs	r3, r1
    239c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    239e:	2000      	movs	r0, #0
		break;
    23a0:	e02f      	b.n	2402 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    23a2:	4a19      	ldr	r2, [pc, #100]	; (2408 <system_clock_source_enable+0xa0>)
    23a4:	8a93      	ldrh	r3, [r2, #20]
    23a6:	2102      	movs	r1, #2
    23a8:	430b      	orrs	r3, r1
    23aa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    23ac:	2000      	movs	r0, #0
		break;
    23ae:	e028      	b.n	2402 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    23b0:	4916      	ldr	r1, [pc, #88]	; (240c <system_clock_source_enable+0xa4>)
    23b2:	680b      	ldr	r3, [r1, #0]
    23b4:	2202      	movs	r2, #2
    23b6:	4313      	orrs	r3, r2
    23b8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    23ba:	4b13      	ldr	r3, [pc, #76]	; (2408 <system_clock_source_enable+0xa0>)
    23bc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23be:	0019      	movs	r1, r3
    23c0:	320e      	adds	r2, #14
    23c2:	68cb      	ldr	r3, [r1, #12]
    23c4:	421a      	tst	r2, r3
    23c6:	d0fc      	beq.n	23c2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    23c8:	4a10      	ldr	r2, [pc, #64]	; (240c <system_clock_source_enable+0xa4>)
    23ca:	6891      	ldr	r1, [r2, #8]
    23cc:	4b0e      	ldr	r3, [pc, #56]	; (2408 <system_clock_source_enable+0xa0>)
    23ce:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    23d0:	6852      	ldr	r2, [r2, #4]
    23d2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    23d4:	2200      	movs	r2, #0
    23d6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23d8:	0019      	movs	r1, r3
    23da:	3210      	adds	r2, #16
    23dc:	68cb      	ldr	r3, [r1, #12]
    23de:	421a      	tst	r2, r3
    23e0:	d0fc      	beq.n	23dc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    23e2:	4b0a      	ldr	r3, [pc, #40]	; (240c <system_clock_source_enable+0xa4>)
    23e4:	681b      	ldr	r3, [r3, #0]
    23e6:	b29b      	uxth	r3, r3
    23e8:	4a07      	ldr	r2, [pc, #28]	; (2408 <system_clock_source_enable+0xa0>)
    23ea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    23ec:	2000      	movs	r0, #0
    23ee:	e008      	b.n	2402 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    23f0:	4905      	ldr	r1, [pc, #20]	; (2408 <system_clock_source_enable+0xa0>)
    23f2:	2244      	movs	r2, #68	; 0x44
    23f4:	5c8b      	ldrb	r3, [r1, r2]
    23f6:	2002      	movs	r0, #2
    23f8:	4303      	orrs	r3, r0
    23fa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    23fc:	2000      	movs	r0, #0
		break;
    23fe:	e000      	b.n	2402 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2400:	2000      	movs	r0, #0
}
    2402:	4770      	bx	lr
    2404:	00003748 	.word	0x00003748
    2408:	40000800 	.word	0x40000800
    240c:	2000010c 	.word	0x2000010c

00002410 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2410:	b5f0      	push	{r4, r5, r6, r7, lr}
    2412:	46d6      	mov	lr, sl
    2414:	464f      	mov	r7, r9
    2416:	4646      	mov	r6, r8
    2418:	b5c0      	push	{r6, r7, lr}
    241a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    241c:	22c2      	movs	r2, #194	; 0xc2
    241e:	00d2      	lsls	r2, r2, #3
    2420:	4b53      	ldr	r3, [pc, #332]	; (2570 <system_clock_init+0x160>)
    2422:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2424:	4953      	ldr	r1, [pc, #332]	; (2574 <system_clock_init+0x164>)
    2426:	684b      	ldr	r3, [r1, #4]
    2428:	221e      	movs	r2, #30
    242a:	4393      	bics	r3, r2
    242c:	3a1c      	subs	r2, #28
    242e:	4313      	orrs	r3, r2
    2430:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2432:	ab01      	add	r3, sp, #4
    2434:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2436:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2438:	4d4f      	ldr	r5, [pc, #316]	; (2578 <system_clock_init+0x168>)
    243a:	b2e0      	uxtb	r0, r4
    243c:	a901      	add	r1, sp, #4
    243e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2440:	3401      	adds	r4, #1
    2442:	2c18      	cmp	r4, #24
    2444:	d1f9      	bne.n	243a <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    2446:	4c4d      	ldr	r4, [pc, #308]	; (257c <system_clock_init+0x16c>)
	SYSCTRL->OSC32K.bit.CALIB =
    2448:	6823      	ldr	r3, [r4, #0]
    244a:	04db      	lsls	r3, r3, #19
    244c:	4948      	ldr	r1, [pc, #288]	; (2570 <system_clock_init+0x160>)
    244e:	698a      	ldr	r2, [r1, #24]
    2450:	0e5b      	lsrs	r3, r3, #25
    2452:	041b      	lsls	r3, r3, #16
    2454:	484a      	ldr	r0, [pc, #296]	; (2580 <system_clock_init+0x170>)
    2456:	4002      	ands	r2, r0
    2458:	4313      	orrs	r3, r2
    245a:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    245c:	a80a      	add	r0, sp, #40	; 0x28
    245e:	2301      	movs	r3, #1
    2460:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2462:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    2464:	2500      	movs	r5, #0
    2466:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    2468:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    246a:	3306      	adds	r3, #6
    246c:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    246e:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2470:	4b44      	ldr	r3, [pc, #272]	; (2584 <system_clock_init+0x174>)
    2472:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2474:	2004      	movs	r0, #4
    2476:	4b44      	ldr	r3, [pc, #272]	; (2588 <system_clock_init+0x178>)
    2478:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    247a:	ab05      	add	r3, sp, #20
    247c:	2200      	movs	r2, #0
    247e:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2480:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2482:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2484:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2486:	213f      	movs	r1, #63	; 0x3f
    2488:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    248a:	393b      	subs	r1, #59	; 0x3b
    248c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    248e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2490:	6823      	ldr	r3, [r4, #0]
    2492:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2494:	2b3f      	cmp	r3, #63	; 0x3f
    2496:	d069      	beq.n	256c <system_clock_init+0x15c>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2498:	a805      	add	r0, sp, #20
    249a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    249c:	23b7      	movs	r3, #183	; 0xb7
    249e:	00db      	lsls	r3, r3, #3
    24a0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    24a2:	2307      	movs	r3, #7
    24a4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    24a6:	3338      	adds	r3, #56	; 0x38
    24a8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    24aa:	4b38      	ldr	r3, [pc, #224]	; (258c <system_clock_init+0x17c>)
    24ac:	4798      	blx	r3
	config->run_in_standby  = false;
    24ae:	a804      	add	r0, sp, #16
    24b0:	2500      	movs	r5, #0
    24b2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    24b4:	2601      	movs	r6, #1
    24b6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    24b8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    24ba:	4b35      	ldr	r3, [pc, #212]	; (2590 <system_clock_init+0x180>)
    24bc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    24be:	2006      	movs	r0, #6
    24c0:	4b31      	ldr	r3, [pc, #196]	; (2588 <system_clock_init+0x178>)
    24c2:	4699      	mov	r9, r3
    24c4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    24c6:	4b33      	ldr	r3, [pc, #204]	; (2594 <system_clock_init+0x184>)
    24c8:	4798      	blx	r3
	config->division_factor    = 1;
    24ca:	ac01      	add	r4, sp, #4
    24cc:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    24ce:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    24d0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24d2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    24d4:	2304      	movs	r3, #4
    24d6:	7023      	strb	r3, [r4, #0]
    24d8:	0021      	movs	r1, r4
    24da:	2001      	movs	r0, #1
    24dc:	4b2e      	ldr	r3, [pc, #184]	; (2598 <system_clock_init+0x188>)
    24de:	4698      	mov	r8, r3
    24e0:	4798      	blx	r3
    24e2:	2001      	movs	r0, #1
    24e4:	4f2d      	ldr	r7, [pc, #180]	; (259c <system_clock_init+0x18c>)
    24e6:	47b8      	blx	r7
	config->division_factor    = 1;
    24e8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    24ea:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    24ec:	2306      	movs	r3, #6
    24ee:	469a      	mov	sl, r3
    24f0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    24f2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24f4:	7265      	strb	r5, [r4, #9]
    24f6:	0021      	movs	r1, r4
    24f8:	2003      	movs	r0, #3
    24fa:	47c0      	blx	r8
    24fc:	2003      	movs	r0, #3
    24fe:	47b8      	blx	r7
	config->high_when_disabled = false;
    2500:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2502:	4653      	mov	r3, sl
    2504:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2506:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2508:	7265      	strb	r5, [r4, #9]
    250a:	2302      	movs	r3, #2
    250c:	6063      	str	r3, [r4, #4]
    250e:	0021      	movs	r1, r4
    2510:	2004      	movs	r0, #4
    2512:	47c0      	blx	r8
    2514:	2004      	movs	r0, #4
    2516:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2518:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    251a:	0021      	movs	r1, r4
    251c:	2000      	movs	r0, #0
    251e:	4b16      	ldr	r3, [pc, #88]	; (2578 <system_clock_init+0x168>)
    2520:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2522:	2000      	movs	r0, #0
    2524:	4b1e      	ldr	r3, [pc, #120]	; (25a0 <system_clock_init+0x190>)
    2526:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2528:	2007      	movs	r0, #7
    252a:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    252c:	4910      	ldr	r1, [pc, #64]	; (2570 <system_clock_init+0x160>)
    252e:	22d0      	movs	r2, #208	; 0xd0
    2530:	68cb      	ldr	r3, [r1, #12]
    2532:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2534:	2bd0      	cmp	r3, #208	; 0xd0
    2536:	d1fb      	bne.n	2530 <system_clock_init+0x120>
	PM->CPUSEL.reg = (uint32_t)divider;
    2538:	4a1a      	ldr	r2, [pc, #104]	; (25a4 <system_clock_init+0x194>)
    253a:	2300      	movs	r3, #0
    253c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    253e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2540:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2542:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2544:	a901      	add	r1, sp, #4
    2546:	2201      	movs	r2, #1
    2548:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    254a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    254c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    254e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2550:	3307      	adds	r3, #7
    2552:	700b      	strb	r3, [r1, #0]
    2554:	2000      	movs	r0, #0
    2556:	4b10      	ldr	r3, [pc, #64]	; (2598 <system_clock_init+0x188>)
    2558:	4798      	blx	r3
    255a:	2000      	movs	r0, #0
    255c:	4b0f      	ldr	r3, [pc, #60]	; (259c <system_clock_init+0x18c>)
    255e:	4798      	blx	r3
#endif
}
    2560:	b00c      	add	sp, #48	; 0x30
    2562:	bc1c      	pop	{r2, r3, r4}
    2564:	4690      	mov	r8, r2
    2566:	4699      	mov	r9, r3
    2568:	46a2      	mov	sl, r4
    256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    256c:	3b20      	subs	r3, #32
    256e:	e793      	b.n	2498 <system_clock_init+0x88>
    2570:	40000800 	.word	0x40000800
    2574:	41004000 	.word	0x41004000
    2578:	000027e1 	.word	0x000027e1
    257c:	00806024 	.word	0x00806024
    2580:	ff80ffff 	.word	0xff80ffff
    2584:	0000226d 	.word	0x0000226d
    2588:	00002369 	.word	0x00002369
    258c:	000022e9 	.word	0x000022e9
    2590:	00002231 	.word	0x00002231
    2594:	000025a9 	.word	0x000025a9
    2598:	000025cd 	.word	0x000025cd
    259c:	00002685 	.word	0x00002685
    25a0:	00002755 	.word	0x00002755
    25a4:	40000400 	.word	0x40000400

000025a8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    25a8:	4a06      	ldr	r2, [pc, #24]	; (25c4 <system_gclk_init+0x1c>)
    25aa:	6993      	ldr	r3, [r2, #24]
    25ac:	2108      	movs	r1, #8
    25ae:	430b      	orrs	r3, r1
    25b0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    25b2:	2201      	movs	r2, #1
    25b4:	4b04      	ldr	r3, [pc, #16]	; (25c8 <system_gclk_init+0x20>)
    25b6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    25b8:	0019      	movs	r1, r3
    25ba:	780b      	ldrb	r3, [r1, #0]
    25bc:	4213      	tst	r3, r2
    25be:	d1fc      	bne.n	25ba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    25c0:	4770      	bx	lr
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	40000400 	.word	0x40000400
    25c8:	40000c00 	.word	0x40000c00

000025cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    25cc:	b570      	push	{r4, r5, r6, lr}
    25ce:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    25d0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    25d2:	780d      	ldrb	r5, [r1, #0]
    25d4:	022d      	lsls	r5, r5, #8
    25d6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    25d8:	784b      	ldrb	r3, [r1, #1]
    25da:	2b00      	cmp	r3, #0
    25dc:	d002      	beq.n	25e4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    25de:	2380      	movs	r3, #128	; 0x80
    25e0:	02db      	lsls	r3, r3, #11
    25e2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    25e4:	7a4b      	ldrb	r3, [r1, #9]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d002      	beq.n	25f0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    25ea:	2380      	movs	r3, #128	; 0x80
    25ec:	031b      	lsls	r3, r3, #12
    25ee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    25f0:	6848      	ldr	r0, [r1, #4]
    25f2:	2801      	cmp	r0, #1
    25f4:	d910      	bls.n	2618 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    25f6:	1e43      	subs	r3, r0, #1
    25f8:	4218      	tst	r0, r3
    25fa:	d134      	bne.n	2666 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25fc:	2802      	cmp	r0, #2
    25fe:	d930      	bls.n	2662 <system_gclk_gen_set_config+0x96>
    2600:	2302      	movs	r3, #2
    2602:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2604:	3201      	adds	r2, #1
						mask <<= 1) {
    2606:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2608:	4298      	cmp	r0, r3
    260a:	d8fb      	bhi.n	2604 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    260c:	0212      	lsls	r2, r2, #8
    260e:	4332      	orrs	r2, r6
    2610:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2612:	2380      	movs	r3, #128	; 0x80
    2614:	035b      	lsls	r3, r3, #13
    2616:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2618:	7a0b      	ldrb	r3, [r1, #8]
    261a:	2b00      	cmp	r3, #0
    261c:	d002      	beq.n	2624 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    261e:	2380      	movs	r3, #128	; 0x80
    2620:	039b      	lsls	r3, r3, #14
    2622:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2624:	4a13      	ldr	r2, [pc, #76]	; (2674 <system_gclk_gen_set_config+0xa8>)
    2626:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2628:	b25b      	sxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	dbfb      	blt.n	2626 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    262e:	4b12      	ldr	r3, [pc, #72]	; (2678 <system_gclk_gen_set_config+0xac>)
    2630:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2632:	4b12      	ldr	r3, [pc, #72]	; (267c <system_gclk_gen_set_config+0xb0>)
    2634:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2636:	4a0f      	ldr	r2, [pc, #60]	; (2674 <system_gclk_gen_set_config+0xa8>)
    2638:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    263a:	b25b      	sxtb	r3, r3
    263c:	2b00      	cmp	r3, #0
    263e:	dbfb      	blt.n	2638 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2640:	4b0c      	ldr	r3, [pc, #48]	; (2674 <system_gclk_gen_set_config+0xa8>)
    2642:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2644:	001a      	movs	r2, r3
    2646:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2648:	b25b      	sxtb	r3, r3
    264a:	2b00      	cmp	r3, #0
    264c:	dbfb      	blt.n	2646 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    264e:	4a09      	ldr	r2, [pc, #36]	; (2674 <system_gclk_gen_set_config+0xa8>)
    2650:	6853      	ldr	r3, [r2, #4]
    2652:	2180      	movs	r1, #128	; 0x80
    2654:	0249      	lsls	r1, r1, #9
    2656:	400b      	ands	r3, r1
    2658:	431d      	orrs	r5, r3
    265a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    265c:	4b08      	ldr	r3, [pc, #32]	; (2680 <system_gclk_gen_set_config+0xb4>)
    265e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2660:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2662:	2200      	movs	r2, #0
    2664:	e7d2      	b.n	260c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2666:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2668:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    266a:	2380      	movs	r3, #128	; 0x80
    266c:	029b      	lsls	r3, r3, #10
    266e:	431d      	orrs	r5, r3
    2670:	e7d2      	b.n	2618 <system_gclk_gen_set_config+0x4c>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	40000c00 	.word	0x40000c00
    2678:	00002131 	.word	0x00002131
    267c:	40000c08 	.word	0x40000c08
    2680:	00002171 	.word	0x00002171

00002684 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2684:	b510      	push	{r4, lr}
    2686:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2688:	4a0b      	ldr	r2, [pc, #44]	; (26b8 <system_gclk_gen_enable+0x34>)
    268a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    268c:	b25b      	sxtb	r3, r3
    268e:	2b00      	cmp	r3, #0
    2690:	dbfb      	blt.n	268a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2692:	4b0a      	ldr	r3, [pc, #40]	; (26bc <system_gclk_gen_enable+0x38>)
    2694:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2696:	4b0a      	ldr	r3, [pc, #40]	; (26c0 <system_gclk_gen_enable+0x3c>)
    2698:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    269a:	4a07      	ldr	r2, [pc, #28]	; (26b8 <system_gclk_gen_enable+0x34>)
    269c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    269e:	b25b      	sxtb	r3, r3
    26a0:	2b00      	cmp	r3, #0
    26a2:	dbfb      	blt.n	269c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    26a4:	4a04      	ldr	r2, [pc, #16]	; (26b8 <system_gclk_gen_enable+0x34>)
    26a6:	6851      	ldr	r1, [r2, #4]
    26a8:	2380      	movs	r3, #128	; 0x80
    26aa:	025b      	lsls	r3, r3, #9
    26ac:	430b      	orrs	r3, r1
    26ae:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    26b0:	4b04      	ldr	r3, [pc, #16]	; (26c4 <system_gclk_gen_enable+0x40>)
    26b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26b4:	bd10      	pop	{r4, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	40000c00 	.word	0x40000c00
    26bc:	00002131 	.word	0x00002131
    26c0:	40000c04 	.word	0x40000c04
    26c4:	00002171 	.word	0x00002171

000026c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26cc:	4a1a      	ldr	r2, [pc, #104]	; (2738 <system_gclk_gen_get_hz+0x70>)
    26ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26d0:	b25b      	sxtb	r3, r3
    26d2:	2b00      	cmp	r3, #0
    26d4:	dbfb      	blt.n	26ce <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    26d6:	4b19      	ldr	r3, [pc, #100]	; (273c <system_gclk_gen_get_hz+0x74>)
    26d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26da:	4b19      	ldr	r3, [pc, #100]	; (2740 <system_gclk_gen_get_hz+0x78>)
    26dc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26de:	4a16      	ldr	r2, [pc, #88]	; (2738 <system_gclk_gen_get_hz+0x70>)
    26e0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26e2:	b25b      	sxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	dbfb      	blt.n	26e0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    26e8:	4e13      	ldr	r6, [pc, #76]	; (2738 <system_gclk_gen_get_hz+0x70>)
    26ea:	6870      	ldr	r0, [r6, #4]
    26ec:	04c0      	lsls	r0, r0, #19
    26ee:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26f0:	4b14      	ldr	r3, [pc, #80]	; (2744 <system_gclk_gen_get_hz+0x7c>)
    26f2:	4798      	blx	r3
    26f4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26f6:	4b12      	ldr	r3, [pc, #72]	; (2740 <system_gclk_gen_get_hz+0x78>)
    26f8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26fa:	6876      	ldr	r6, [r6, #4]
    26fc:	02f6      	lsls	r6, r6, #11
    26fe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2700:	4b11      	ldr	r3, [pc, #68]	; (2748 <system_gclk_gen_get_hz+0x80>)
    2702:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2704:	4a0c      	ldr	r2, [pc, #48]	; (2738 <system_gclk_gen_get_hz+0x70>)
    2706:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2708:	b25b      	sxtb	r3, r3
    270a:	2b00      	cmp	r3, #0
    270c:	dbfb      	blt.n	2706 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    270e:	4b0a      	ldr	r3, [pc, #40]	; (2738 <system_gclk_gen_get_hz+0x70>)
    2710:	689c      	ldr	r4, [r3, #8]
    2712:	0224      	lsls	r4, r4, #8
    2714:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2716:	4b0d      	ldr	r3, [pc, #52]	; (274c <system_gclk_gen_get_hz+0x84>)
    2718:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    271a:	2e00      	cmp	r6, #0
    271c:	d107      	bne.n	272e <system_gclk_gen_get_hz+0x66>
    271e:	2c01      	cmp	r4, #1
    2720:	d907      	bls.n	2732 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2722:	0021      	movs	r1, r4
    2724:	0028      	movs	r0, r5
    2726:	4b0a      	ldr	r3, [pc, #40]	; (2750 <system_gclk_gen_get_hz+0x88>)
    2728:	4798      	blx	r3
    272a:	0005      	movs	r5, r0
    272c:	e001      	b.n	2732 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    272e:	3401      	adds	r4, #1
    2730:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2732:	0028      	movs	r0, r5
    2734:	bd70      	pop	{r4, r5, r6, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	40000c00 	.word	0x40000c00
    273c:	00002131 	.word	0x00002131
    2740:	40000c04 	.word	0x40000c04
    2744:	000021a1 	.word	0x000021a1
    2748:	40000c08 	.word	0x40000c08
    274c:	00002171 	.word	0x00002171
    2750:	00003389 	.word	0x00003389

00002754 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2754:	b510      	push	{r4, lr}
    2756:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2758:	4b06      	ldr	r3, [pc, #24]	; (2774 <system_gclk_chan_enable+0x20>)
    275a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    275c:	4b06      	ldr	r3, [pc, #24]	; (2778 <system_gclk_chan_enable+0x24>)
    275e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2760:	4a06      	ldr	r2, [pc, #24]	; (277c <system_gclk_chan_enable+0x28>)
    2762:	8853      	ldrh	r3, [r2, #2]
    2764:	2180      	movs	r1, #128	; 0x80
    2766:	01c9      	lsls	r1, r1, #7
    2768:	430b      	orrs	r3, r1
    276a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    276c:	4b04      	ldr	r3, [pc, #16]	; (2780 <system_gclk_chan_enable+0x2c>)
    276e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2770:	bd10      	pop	{r4, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	00002131 	.word	0x00002131
    2778:	40000c02 	.word	0x40000c02
    277c:	40000c00 	.word	0x40000c00
    2780:	00002171 	.word	0x00002171

00002784 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2784:	b510      	push	{r4, lr}
    2786:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2788:	4b0f      	ldr	r3, [pc, #60]	; (27c8 <system_gclk_chan_disable+0x44>)
    278a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    278c:	4b0f      	ldr	r3, [pc, #60]	; (27cc <system_gclk_chan_disable+0x48>)
    278e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2790:	4a0f      	ldr	r2, [pc, #60]	; (27d0 <system_gclk_chan_disable+0x4c>)
    2792:	8853      	ldrh	r3, [r2, #2]
    2794:	051b      	lsls	r3, r3, #20
    2796:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2798:	8853      	ldrh	r3, [r2, #2]
    279a:	490e      	ldr	r1, [pc, #56]	; (27d4 <system_gclk_chan_disable+0x50>)
    279c:	400b      	ands	r3, r1
    279e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    27a0:	8853      	ldrh	r3, [r2, #2]
    27a2:	490d      	ldr	r1, [pc, #52]	; (27d8 <system_gclk_chan_disable+0x54>)
    27a4:	400b      	ands	r3, r1
    27a6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    27a8:	0011      	movs	r1, r2
    27aa:	2280      	movs	r2, #128	; 0x80
    27ac:	01d2      	lsls	r2, r2, #7
    27ae:	884b      	ldrh	r3, [r1, #2]
    27b0:	4213      	tst	r3, r2
    27b2:	d1fc      	bne.n	27ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    27b4:	4906      	ldr	r1, [pc, #24]	; (27d0 <system_gclk_chan_disable+0x4c>)
    27b6:	884a      	ldrh	r2, [r1, #2]
    27b8:	0203      	lsls	r3, r0, #8
    27ba:	4806      	ldr	r0, [pc, #24]	; (27d4 <system_gclk_chan_disable+0x50>)
    27bc:	4002      	ands	r2, r0
    27be:	4313      	orrs	r3, r2
    27c0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    27c2:	4b06      	ldr	r3, [pc, #24]	; (27dc <system_gclk_chan_disable+0x58>)
    27c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27c6:	bd10      	pop	{r4, pc}
    27c8:	00002131 	.word	0x00002131
    27cc:	40000c02 	.word	0x40000c02
    27d0:	40000c00 	.word	0x40000c00
    27d4:	fffff0ff 	.word	0xfffff0ff
    27d8:	ffffbfff 	.word	0xffffbfff
    27dc:	00002171 	.word	0x00002171

000027e0 <system_gclk_chan_set_config>:
{
    27e0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    27e2:	780c      	ldrb	r4, [r1, #0]
    27e4:	0224      	lsls	r4, r4, #8
    27e6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    27e8:	4b02      	ldr	r3, [pc, #8]	; (27f4 <system_gclk_chan_set_config+0x14>)
    27ea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27ec:	b2a4      	uxth	r4, r4
    27ee:	4b02      	ldr	r3, [pc, #8]	; (27f8 <system_gclk_chan_set_config+0x18>)
    27f0:	805c      	strh	r4, [r3, #2]
}
    27f2:	bd10      	pop	{r4, pc}
    27f4:	00002785 	.word	0x00002785
    27f8:	40000c00 	.word	0x40000c00

000027fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    27fc:	b510      	push	{r4, lr}
    27fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <system_gclk_chan_get_hz+0x20>)
    2802:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2804:	4b06      	ldr	r3, [pc, #24]	; (2820 <system_gclk_chan_get_hz+0x24>)
    2806:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2808:	4b06      	ldr	r3, [pc, #24]	; (2824 <system_gclk_chan_get_hz+0x28>)
    280a:	885c      	ldrh	r4, [r3, #2]
    280c:	0524      	lsls	r4, r4, #20
    280e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2810:	4b05      	ldr	r3, [pc, #20]	; (2828 <system_gclk_chan_get_hz+0x2c>)
    2812:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2814:	0020      	movs	r0, r4
    2816:	4b05      	ldr	r3, [pc, #20]	; (282c <system_gclk_chan_get_hz+0x30>)
    2818:	4798      	blx	r3
}
    281a:	bd10      	pop	{r4, pc}
    281c:	00002131 	.word	0x00002131
    2820:	40000c02 	.word	0x40000c02
    2824:	40000c00 	.word	0x40000c00
    2828:	00002171 	.word	0x00002171
    282c:	000026c9 	.word	0x000026c9

00002830 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2830:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2832:	78d3      	ldrb	r3, [r2, #3]
    2834:	2b00      	cmp	r3, #0
    2836:	d135      	bne.n	28a4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2838:	7813      	ldrb	r3, [r2, #0]
    283a:	2b80      	cmp	r3, #128	; 0x80
    283c:	d029      	beq.n	2892 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    283e:	061b      	lsls	r3, r3, #24
    2840:	2480      	movs	r4, #128	; 0x80
    2842:	0264      	lsls	r4, r4, #9
    2844:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2846:	7854      	ldrb	r4, [r2, #1]
    2848:	2502      	movs	r5, #2
    284a:	43ac      	bics	r4, r5
    284c:	d106      	bne.n	285c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    284e:	7894      	ldrb	r4, [r2, #2]
    2850:	2c00      	cmp	r4, #0
    2852:	d120      	bne.n	2896 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2854:	2480      	movs	r4, #128	; 0x80
    2856:	02a4      	lsls	r4, r4, #10
    2858:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    285a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    285c:	7854      	ldrb	r4, [r2, #1]
    285e:	3c01      	subs	r4, #1
    2860:	2c01      	cmp	r4, #1
    2862:	d91c      	bls.n	289e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2864:	040d      	lsls	r5, r1, #16
    2866:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2868:	24a0      	movs	r4, #160	; 0xa0
    286a:	05e4      	lsls	r4, r4, #23
    286c:	432c      	orrs	r4, r5
    286e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2870:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2872:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2874:	24d0      	movs	r4, #208	; 0xd0
    2876:	0624      	lsls	r4, r4, #24
    2878:	432c      	orrs	r4, r5
    287a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    287c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    287e:	78d4      	ldrb	r4, [r2, #3]
    2880:	2c00      	cmp	r4, #0
    2882:	d122      	bne.n	28ca <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2884:	035b      	lsls	r3, r3, #13
    2886:	d51c      	bpl.n	28c2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2888:	7893      	ldrb	r3, [r2, #2]
    288a:	2b01      	cmp	r3, #1
    288c:	d01e      	beq.n	28cc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    288e:	6141      	str	r1, [r0, #20]
    2890:	e017      	b.n	28c2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2892:	2300      	movs	r3, #0
    2894:	e7d7      	b.n	2846 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2896:	24c0      	movs	r4, #192	; 0xc0
    2898:	02e4      	lsls	r4, r4, #11
    289a:	4323      	orrs	r3, r4
    289c:	e7dd      	b.n	285a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    289e:	4c0d      	ldr	r4, [pc, #52]	; (28d4 <_system_pinmux_config+0xa4>)
    28a0:	4023      	ands	r3, r4
    28a2:	e7df      	b.n	2864 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    28a4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    28a6:	040c      	lsls	r4, r1, #16
    28a8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    28aa:	23a0      	movs	r3, #160	; 0xa0
    28ac:	05db      	lsls	r3, r3, #23
    28ae:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28b0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    28b2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28b4:	23d0      	movs	r3, #208	; 0xd0
    28b6:	061b      	lsls	r3, r3, #24
    28b8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28ba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    28bc:	78d3      	ldrb	r3, [r2, #3]
    28be:	2b00      	cmp	r3, #0
    28c0:	d103      	bne.n	28ca <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28c2:	7853      	ldrb	r3, [r2, #1]
    28c4:	3b01      	subs	r3, #1
    28c6:	2b01      	cmp	r3, #1
    28c8:	d902      	bls.n	28d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    28ca:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    28cc:	6181      	str	r1, [r0, #24]
    28ce:	e7f8      	b.n	28c2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    28d0:	6081      	str	r1, [r0, #8]
}
    28d2:	e7fa      	b.n	28ca <_system_pinmux_config+0x9a>
    28d4:	fffbffff 	.word	0xfffbffff

000028d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    28d8:	b510      	push	{r4, lr}
    28da:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28dc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    28de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    28e0:	2900      	cmp	r1, #0
    28e2:	d104      	bne.n	28ee <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    28e4:	0943      	lsrs	r3, r0, #5
    28e6:	01db      	lsls	r3, r3, #7
    28e8:	4905      	ldr	r1, [pc, #20]	; (2900 <system_pinmux_pin_set_config+0x28>)
    28ea:	468c      	mov	ip, r1
    28ec:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    28ee:	241f      	movs	r4, #31
    28f0:	4020      	ands	r0, r4
    28f2:	2101      	movs	r1, #1
    28f4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    28f6:	0018      	movs	r0, r3
    28f8:	4b02      	ldr	r3, [pc, #8]	; (2904 <system_pinmux_pin_set_config+0x2c>)
    28fa:	4798      	blx	r3
}
    28fc:	bd10      	pop	{r4, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	41004400 	.word	0x41004400
    2904:	00002831 	.word	0x00002831

00002908 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2908:	4770      	bx	lr
	...

0000290c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    290c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    290e:	4b05      	ldr	r3, [pc, #20]	; (2924 <system_init+0x18>)
    2910:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <system_init+0x1c>)
    2914:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2916:	4b05      	ldr	r3, [pc, #20]	; (292c <system_init+0x20>)
    2918:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    291a:	4b05      	ldr	r3, [pc, #20]	; (2930 <system_init+0x24>)
    291c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    291e:	4b05      	ldr	r3, [pc, #20]	; (2934 <system_init+0x28>)
    2920:	4798      	blx	r3
}
    2922:	bd10      	pop	{r4, pc}
    2924:	00002411 	.word	0x00002411
    2928:	0000212d 	.word	0x0000212d
    292c:	00002909 	.word	0x00002909
    2930:	00000ee5 	.word	0x00000ee5
    2934:	00002909 	.word	0x00002909

00002938 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2938:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    293a:	4a26      	ldr	r2, [pc, #152]	; (29d4 <Reset_Handler+0x9c>)
    293c:	4b26      	ldr	r3, [pc, #152]	; (29d8 <Reset_Handler+0xa0>)
    293e:	429a      	cmp	r2, r3
    2940:	d011      	beq.n	2966 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2942:	001a      	movs	r2, r3
    2944:	4b25      	ldr	r3, [pc, #148]	; (29dc <Reset_Handler+0xa4>)
    2946:	429a      	cmp	r2, r3
    2948:	d20d      	bcs.n	2966 <Reset_Handler+0x2e>
    294a:	4a25      	ldr	r2, [pc, #148]	; (29e0 <Reset_Handler+0xa8>)
    294c:	3303      	adds	r3, #3
    294e:	1a9b      	subs	r3, r3, r2
    2950:	089b      	lsrs	r3, r3, #2
    2952:	3301      	adds	r3, #1
    2954:	009b      	lsls	r3, r3, #2
    2956:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2958:	481f      	ldr	r0, [pc, #124]	; (29d8 <Reset_Handler+0xa0>)
    295a:	491e      	ldr	r1, [pc, #120]	; (29d4 <Reset_Handler+0x9c>)
    295c:	588c      	ldr	r4, [r1, r2]
    295e:	5084      	str	r4, [r0, r2]
    2960:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2962:	429a      	cmp	r2, r3
    2964:	d1fa      	bne.n	295c <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2966:	4a1f      	ldr	r2, [pc, #124]	; (29e4 <Reset_Handler+0xac>)
    2968:	4b1f      	ldr	r3, [pc, #124]	; (29e8 <Reset_Handler+0xb0>)
    296a:	429a      	cmp	r2, r3
    296c:	d20a      	bcs.n	2984 <Reset_Handler+0x4c>
    296e:	43d3      	mvns	r3, r2
    2970:	491d      	ldr	r1, [pc, #116]	; (29e8 <Reset_Handler+0xb0>)
    2972:	185b      	adds	r3, r3, r1
    2974:	2103      	movs	r1, #3
    2976:	438b      	bics	r3, r1
    2978:	3304      	adds	r3, #4
    297a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    297c:	2100      	movs	r1, #0
    297e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2980:	4293      	cmp	r3, r2
    2982:	d1fc      	bne.n	297e <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2984:	4a19      	ldr	r2, [pc, #100]	; (29ec <Reset_Handler+0xb4>)
    2986:	21ff      	movs	r1, #255	; 0xff
    2988:	4b19      	ldr	r3, [pc, #100]	; (29f0 <Reset_Handler+0xb8>)
    298a:	438b      	bics	r3, r1
    298c:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    298e:	39fd      	subs	r1, #253	; 0xfd
    2990:	2390      	movs	r3, #144	; 0x90
    2992:	005b      	lsls	r3, r3, #1
    2994:	4a17      	ldr	r2, [pc, #92]	; (29f4 <Reset_Handler+0xbc>)
    2996:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2998:	4b17      	ldr	r3, [pc, #92]	; (29f8 <Reset_Handler+0xc0>)
    299a:	7b9a      	ldrb	r2, [r3, #14]
    299c:	312e      	adds	r1, #46	; 0x2e
    299e:	438a      	bics	r2, r1
    29a0:	2120      	movs	r1, #32
    29a2:	430a      	orrs	r2, r1
    29a4:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    29a6:	7b9a      	ldrb	r2, [r3, #14]
    29a8:	210c      	movs	r1, #12
    29aa:	438a      	bics	r2, r1
    29ac:	2108      	movs	r1, #8
    29ae:	430a      	orrs	r2, r1
    29b0:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    29b2:	7b9a      	ldrb	r2, [r3, #14]
    29b4:	2103      	movs	r1, #3
    29b6:	438a      	bics	r2, r1
    29b8:	2102      	movs	r1, #2
    29ba:	430a      	orrs	r2, r1
    29bc:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    29be:	4a0f      	ldr	r2, [pc, #60]	; (29fc <Reset_Handler+0xc4>)
    29c0:	6853      	ldr	r3, [r2, #4]
    29c2:	2180      	movs	r1, #128	; 0x80
    29c4:	430b      	orrs	r3, r1
    29c6:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    29c8:	4b0d      	ldr	r3, [pc, #52]	; (2a00 <Reset_Handler+0xc8>)
    29ca:	4798      	blx	r3

        /* Branch to main function */
        main();
    29cc:	4b0d      	ldr	r3, [pc, #52]	; (2a04 <Reset_Handler+0xcc>)
    29ce:	4798      	blx	r3
    29d0:	e7fe      	b.n	29d0 <Reset_Handler+0x98>
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	00003790 	.word	0x00003790
    29d8:	20000000 	.word	0x20000000
    29dc:	20000018 	.word	0x20000018
    29e0:	20000004 	.word	0x20000004
    29e4:	20000020 	.word	0x20000020
    29e8:	200008ec 	.word	0x200008ec
    29ec:	e000ed00 	.word	0xe000ed00
    29f0:	00000000 	.word	0x00000000
    29f4:	41007000 	.word	0x41007000
    29f8:	41004800 	.word	0x41004800
    29fc:	41004000 	.word	0x41004000
    2a00:	00003675 	.word	0x00003675
    2a04:	000032d1 	.word	0x000032d1

00002a08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTSET.reg = pin_mask;
    2a0a:	4d06      	ldr	r5, [pc, #24]	; (2a24 <Dummy_Handler+0x1c>)
    2a0c:	2680      	movs	r6, #128	; 0x80
    2a0e:	0076      	lsls	r6, r6, #1
    2a10:	0037      	movs	r7, r6
    2a12:	61af      	str	r7, [r5, #24]
        while (1) {
			port_pin_set_output_level(PROFILE_PIN_2,true);
			delay_cycles_us(10);
    2a14:	200a      	movs	r0, #10
    2a16:	4c04      	ldr	r4, [pc, #16]	; (2a28 <Dummy_Handler+0x20>)
    2a18:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    2a1a:	616e      	str	r6, [r5, #20]
			port_pin_set_output_level(PROFILE_PIN_2,false);
			delay_cycles_us(10);
    2a1c:	200a      	movs	r0, #10
    2a1e:	47a0      	blx	r4
    2a20:	e7f7      	b.n	2a12 <Dummy_Handler+0xa>
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	41004400 	.word	0x41004400
    2a28:	00000989 	.word	0x00000989

00002a2c <transfer_done>:
	
}

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    2a2c:	2201      	movs	r2, #1
    2a2e:	4b01      	ldr	r3, [pc, #4]	; (2a34 <transfer_done+0x8>)
    2a30:	701a      	strb	r2, [r3, #0]
}
    2a32:	4770      	bx	lr
    2a34:	200001ae 	.word	0x200001ae

00002a38 <sourceRegisterInit>:
{
    2a38:	2300      	movs	r3, #0
		DMASourceRegister[i]	=	0x00;
    2a3a:	490a      	ldr	r1, [pc, #40]	; (2a64 <sourceRegisterInit+0x2c>)
    2a3c:	2200      	movs	r2, #0
    2a3e:	54ca      	strb	r2, [r1, r3]
    2a40:	3301      	adds	r3, #1
	for(i=0;i<STARTZEROS;i++)
    2a42:	2b3c      	cmp	r3, #60	; 0x3c
    2a44:	d1fb      	bne.n	2a3e <sourceRegisterInit+0x6>
		DMASourceRegister[i]	=	0x88;
    2a46:	4907      	ldr	r1, [pc, #28]	; (2a64 <sourceRegisterInit+0x2c>)
    2a48:	2288      	movs	r2, #136	; 0x88
    2a4a:	54ca      	strb	r2, [r1, r3]
    2a4c:	3301      	adds	r3, #1
	for(i=STARTZEROS;i<STARTZEROS + NOLEDS*NoBytesLED ;i++)
    2a4e:	2b60      	cmp	r3, #96	; 0x60
    2a50:	d1fb      	bne.n	2a4a <sourceRegisterInit+0x12>
    2a52:	3b3c      	subs	r3, #60	; 0x3c
		DMASourceRegister[i]    =   0x00;
    2a54:	4903      	ldr	r1, [pc, #12]	; (2a64 <sourceRegisterInit+0x2c>)
    2a56:	2200      	movs	r2, #0
    2a58:	54ca      	strb	r2, [r1, r3]
    2a5a:	3301      	adds	r3, #1
	for(i=NOLEDS*NoBytesLED;i<STARTZEROS;i++)
    2a5c:	2b3c      	cmp	r3, #60	; 0x3c
    2a5e:	d1fb      	bne.n	2a58 <sourceRegisterInit+0x20>
}
    2a60:	4770      	bx	lr
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000800 	.word	0x20000800

00002a68 <setup_DMA>:
	dma_descriptor_create(descriptor, &descriptor_config);

}

void setup_DMA()
{
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    2a6c:	4668      	mov	r0, sp
    2a6e:	4b1a      	ldr	r3, [pc, #104]	; (2ad8 <setup_DMA+0x70>)
    2a70:	4798      	blx	r3
	config.peripheral_trigger = SERCOM1_DMAC_ID_TX;
    2a72:	2304      	movs	r3, #4
    2a74:	466a      	mov	r2, sp
    2a76:	7053      	strb	r3, [r2, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    2a78:	2502      	movs	r5, #2
    2a7a:	3b02      	subs	r3, #2
    2a7c:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    2a7e:	4c17      	ldr	r4, [pc, #92]	; (2adc <setup_DMA+0x74>)
    2a80:	4669      	mov	r1, sp
    2a82:	0020      	movs	r0, r4
    2a84:	4b16      	ldr	r3, [pc, #88]	; (2ae0 <setup_DMA+0x78>)
    2a86:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    2a88:	2201      	movs	r2, #1
    2a8a:	466b      	mov	r3, sp
    2a8c:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    2a8e:	2300      	movs	r3, #0
    2a90:	4669      	mov	r1, sp
    2a92:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2a94:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    2a96:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    2a98:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    2a9a:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2a9c:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    2a9e:	9305      	str	r3, [sp, #20]
	descriptor_config.dst_increment_enable = false;
    2aa0:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count = blockTransferCount;
    2aa2:	339c      	adds	r3, #156	; 0x9c
    2aa4:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address = (uint32_t)DMASourceRegister+blockTransferCount;
    2aa6:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <setup_DMA+0x7c>)
    2aa8:	339c      	adds	r3, #156	; 0x9c
    2aaa:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address = 0x42000C28; //sercom1
    2aac:	4b0e      	ldr	r3, [pc, #56]	; (2ae8 <setup_DMA+0x80>)
    2aae:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(descriptor, &descriptor_config);
    2ab0:	4e0e      	ldr	r6, [pc, #56]	; (2aec <setup_DMA+0x84>)
    2ab2:	0030      	movs	r0, r6
    2ab4:	4b0e      	ldr	r3, [pc, #56]	; (2af0 <setup_DMA+0x88>)
    2ab6:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    2ab8:	0031      	movs	r1, r6
    2aba:	0020      	movs	r0, r4
    2abc:	4b0d      	ldr	r3, [pc, #52]	; (2af4 <setup_DMA+0x8c>)
    2abe:	4798      	blx	r3
	resource->callback[type] = callback;
    2ac0:	4b0d      	ldr	r3, [pc, #52]	; (2af8 <setup_DMA+0x90>)
    2ac2:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    2ac4:	7c23      	ldrb	r3, [r4, #16]
    2ac6:	432b      	orrs	r3, r5
    2ac8:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    2aca:	7822      	ldrb	r2, [r4, #0]
    2acc:	490b      	ldr	r1, [pc, #44]	; (2afc <setup_DMA+0x94>)
    2ace:	5c8b      	ldrb	r3, [r1, r2]
    2ad0:	432b      	orrs	r3, r5
    2ad2:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
}
    2ad4:	b006      	add	sp, #24
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
    2ad8:	00000b55 	.word	0x00000b55
    2adc:	2000038c 	.word	0x2000038c
    2ae0:	00000b65 	.word	0x00000b65
    2ae4:	20000800 	.word	0x20000800
    2ae8:	42000c28 	.word	0x42000c28
    2aec:	200003b0 	.word	0x200003b0
    2af0:	00000d35 	.word	0x00000d35
    2af4:	00000ddd 	.word	0x00000ddd
    2af8:	00002a2d 	.word	0x00002a2d
    2afc:	200000d0 	.word	0x200000d0

00002b00 <configureSPIMaster>:

void configureSPIMaster(void)
{
    2b00:	b570      	push	{r4, r5, r6, lr}
    2b02:	b08e      	sub	sp, #56	; 0x38
	config->mode             = SPI_MODE_MASTER;
    2b04:	2401      	movs	r4, #1
    2b06:	466b      	mov	r3, sp
    2b08:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2b0a:	2500      	movs	r5, #0
    2b0c:	9501      	str	r5, [sp, #4]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2b0e:	741d      	strb	r5, [r3, #16]
	config->run_in_standby   = false;
    2b10:	745d      	strb	r5, [r3, #17]
	config->select_slave_low_detect_enable= true;
    2b12:	74dc      	strb	r4, [r3, #19]
	config->master_slave_select_enable= false;
    2b14:	751d      	strb	r5, [r3, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2b16:	220c      	movs	r2, #12
    2b18:	2100      	movs	r1, #0
    2b1a:	a806      	add	r0, sp, #24
    2b1c:	4b17      	ldr	r3, [pc, #92]	; (2b7c <configureSPIMaster+0x7c>)
    2b1e:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    2b20:	2380      	movs	r3, #128	; 0x80
    2b22:	055b      	lsls	r3, r3, #21
    2b24:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    2b26:	2380      	movs	r3, #128	; 0x80
    2b28:	029b      	lsls	r3, r3, #10
    2b2a:	9303      	str	r3, [sp, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    2b2c:	2301      	movs	r3, #1
    2b2e:	425b      	negs	r3, r3
    2b30:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    2b32:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    2b34:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    2b36:	4b12      	ldr	r3, [pc, #72]	; (2b80 <configureSPIMaster+0x80>)
    2b38:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    2b3a:	466b      	mov	r3, sp
    2b3c:	749d      	strb	r5, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    2b3e:	4b11      	ldr	r3, [pc, #68]	; (2b84 <configureSPIMaster+0x84>)
    2b40:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_3;
    2b42:	2203      	movs	r2, #3
    2b44:	2324      	movs	r3, #36	; 0x24
    2b46:	4669      	mov	r1, sp
    2b48:	54ca      	strb	r2, [r1, r3]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    2b4a:	4e0f      	ldr	r6, [pc, #60]	; (2b88 <configureSPIMaster+0x88>)
    2b4c:	466a      	mov	r2, sp
    2b4e:	490f      	ldr	r1, [pc, #60]	; (2b8c <configureSPIMaster+0x8c>)
    2b50:	0030      	movs	r0, r6
    2b52:	4b0f      	ldr	r3, [pc, #60]	; (2b90 <configureSPIMaster+0x90>)
    2b54:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b56:	6835      	ldr	r5, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2b58:	0028      	movs	r0, r5
    2b5a:	4b0e      	ldr	r3, [pc, #56]	; (2b94 <configureSPIMaster+0x94>)
    2b5c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b5e:	231f      	movs	r3, #31
    2b60:	4018      	ands	r0, r3
    2b62:	4084      	lsls	r4, r0
    2b64:	4b0c      	ldr	r3, [pc, #48]	; (2b98 <configureSPIMaster+0x98>)
    2b66:	601c      	str	r4, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b68:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2b6a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d1fc      	bne.n	2b6a <configureSPIMaster+0x6a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b70:	682b      	ldr	r3, [r5, #0]
    2b72:	2202      	movs	r2, #2
    2b74:	4313      	orrs	r3, r2
    2b76:	602b      	str	r3, [r5, #0]
	spi_enable(&spi_master_instance);
}
    2b78:	b00e      	add	sp, #56	; 0x38
    2b7a:	bd70      	pop	{r4, r5, r6, pc}
    2b7c:	000036cf 	.word	0x000036cf
    2b80:	001f0003 	.word	0x001f0003
    2b84:	002625a0 	.word	0x002625a0
    2b88:	200003c0 	.word	0x200003c0
    2b8c:	42000c00 	.word	0x42000c00
    2b90:	00001249 	.word	0x00001249
    2b94:	000011ad 	.word	0x000011ad
    2b98:	e000e100 	.word	0xe000e100

00002b9c <RGBPI55Init>:
{
	configureSPIMaster();
}

void RGBPI55Init()
{
    2b9c:	b510      	push	{r4, lr}
	sourceRegisterInit();
    2b9e:	4b03      	ldr	r3, [pc, #12]	; (2bac <RGBPI55Init+0x10>)
    2ba0:	4798      	blx	r3
	configureSPIMaster();
    2ba2:	4b03      	ldr	r3, [pc, #12]	; (2bb0 <RGBPI55Init+0x14>)
    2ba4:	4798      	blx	r3
	SPIMasterInit();
	setup_DMA();
    2ba6:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <RGBPI55Init+0x18>)
    2ba8:	4798      	blx	r3
    2baa:	bd10      	pop	{r4, pc}
    2bac:	00002a39 	.word	0x00002a39
    2bb0:	00002b01 	.word	0x00002b01
    2bb4:	00002a69 	.word	0x00002a69

00002bb8 <init_power_pin>:
extern volatile bool overflowFlag;
extern volatile bool powerButtonCheck;


void init_power_pin()
{
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    2bbc:	ac01      	add	r4, sp, #4
    2bbe:	2301      	movs	r3, #1
    2bc0:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2bc2:	2600      	movs	r6, #0
    2bc4:	70a6      	strb	r6, [r4, #2]
	//Power on enable
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
    2bc6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(POWER_ON_BTN_PIN,&power_button_config);
    2bc8:	0021      	movs	r1, r4
    2bca:	2009      	movs	r0, #9
    2bcc:	4d04      	ldr	r5, [pc, #16]	; (2be0 <init_power_pin+0x28>)
    2bce:	47a8      	blx	r5
	
	//Power off read
	power_button_config.direction  = PORT_PIN_DIR_INPUT;
    2bd0:	7026      	strb	r6, [r4, #0]
	power_button_config.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    2bd2:	2302      	movs	r3, #2
    2bd4:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(POWER_OFF_BTN_PIN,&power_button_config);
    2bd6:	0021      	movs	r1, r4
    2bd8:	200e      	movs	r0, #14
    2bda:	47a8      	blx	r5
	
}
    2bdc:	b002      	add	sp, #8
    2bde:	bd70      	pop	{r4, r5, r6, pc}
    2be0:	00000fdd 	.word	0x00000fdd

00002be4 <power_off>:
{
	port_pin_set_output_level(POWER_ON_BTN_PIN, true);
}

void power_off()
{
    2be4:	b510      	push	{r4, lr}
	delay_ms(1000);
    2be6:	20fa      	movs	r0, #250	; 0xfa
    2be8:	0080      	lsls	r0, r0, #2
    2bea:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <power_off+0x14>)
    2bec:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2bee:	2280      	movs	r2, #128	; 0x80
    2bf0:	0092      	lsls	r2, r2, #2
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <power_off+0x18>)
    2bf4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(POWER_ON_BTN_PIN, false);	
}
    2bf6:	bd10      	pop	{r4, pc}
    2bf8:	000009b5 	.word	0x000009b5
    2bfc:	41004400 	.word	0x41004400

00002c00 <sendColorLED>:
	//stop_all_actuators();
	power_off();
}

void sendColorLED(colorInfo* test ,uint8_t  r , uint8_t g, uint8_t b)
{
    2c00:	b510      	push	{r4, lr}
	
	uint8_t i =0;
	for(i=0;i<3;i++)
	{
		test[i].RBrightness =	r;
    2c02:	7001      	strb	r1, [r0, #0]
		test[i].GBrightness =	g;
    2c04:	7042      	strb	r2, [r0, #1]
		test[i].BBrightness =	b;
    2c06:	7083      	strb	r3, [r0, #2]
		test[i].RBrightness =	r;
    2c08:	70c1      	strb	r1, [r0, #3]
		test[i].GBrightness =	g;
    2c0a:	7102      	strb	r2, [r0, #4]
		test[i].BBrightness =	b;
    2c0c:	7143      	strb	r3, [r0, #5]
		test[i].RBrightness =	r;
    2c0e:	7181      	strb	r1, [r0, #6]
		test[i].GBrightness =	g;
    2c10:	71c2      	strb	r2, [r0, #7]
		test[i].BBrightness =	b;
    2c12:	7203      	strb	r3, [r0, #8]
	}
	
}
    2c14:	bd10      	pop	{r4, pc}
	...

00002c18 <powerLEDIndication>:

void powerLEDIndication(uint8_t powerOnOff)
{
    2c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c1a:	46ce      	mov	lr, r9
    2c1c:	4647      	mov	r7, r8
    2c1e:	b580      	push	{r7, lr}
	static colorInfo testColor[3];
	
	switch( powerOnOff)
    2c20:	2801      	cmp	r0, #1
    2c22:	d01c      	beq.n	2c5e <powerLEDIndication+0x46>
    2c24:	2802      	cmp	r0, #2
    2c26:	d021      	beq.n	2c6c <powerLEDIndication+0x54>
		port_base->OUTSET.reg = pin_mask;
    2c28:	4c14      	ldr	r4, [pc, #80]	; (2c7c <powerLEDIndication+0x64>)
    2c2a:	2508      	movs	r5, #8
    2c2c:	61a5      	str	r5, [r4, #24]
		break;
		default:
		break;
	}
	port_pin_set_output_level(PROFILE_PIN,true);
	RGBPI55SetAllLED(testColor);
    2c2e:	4e14      	ldr	r6, [pc, #80]	; (2c80 <powerLEDIndication+0x68>)
    2c30:	0030      	movs	r0, r6
    2c32:	4b14      	ldr	r3, [pc, #80]	; (2c84 <powerLEDIndication+0x6c>)
    2c34:	4699      	mov	r9, r3
    2c36:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    2c38:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PROFILE_PIN,false);
	delay_cycles_ms(500);
    2c3a:	20fa      	movs	r0, #250	; 0xfa
    2c3c:	0040      	lsls	r0, r0, #1
    2c3e:	4b12      	ldr	r3, [pc, #72]	; (2c88 <powerLEDIndication+0x70>)
    2c40:	4798      	blx	r3
	
	sendColorLED(testColor,0,0,0);
    2c42:	2300      	movs	r3, #0
    2c44:	2200      	movs	r2, #0
    2c46:	2100      	movs	r1, #0
    2c48:	0030      	movs	r0, r6
    2c4a:	4f10      	ldr	r7, [pc, #64]	; (2c8c <powerLEDIndication+0x74>)
    2c4c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    2c4e:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(PROFILE_PIN,true);
	RGBPI55SetAllLED(testColor);
    2c50:	0030      	movs	r0, r6
    2c52:	47c8      	blx	r9
		port_base->OUTCLR.reg = pin_mask;
    2c54:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(PROFILE_PIN,false);
}
    2c56:	bc0c      	pop	{r2, r3}
    2c58:	4690      	mov	r8, r2
    2c5a:	4699      	mov	r9, r3
    2c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendColorLED(testColor,0,150,0);
    2c5e:	2300      	movs	r3, #0
    2c60:	2296      	movs	r2, #150	; 0x96
    2c62:	2100      	movs	r1, #0
    2c64:	4806      	ldr	r0, [pc, #24]	; (2c80 <powerLEDIndication+0x68>)
    2c66:	4c09      	ldr	r4, [pc, #36]	; (2c8c <powerLEDIndication+0x74>)
    2c68:	47a0      	blx	r4
		break;
    2c6a:	e7dd      	b.n	2c28 <powerLEDIndication+0x10>
		sendColorLED(testColor,150,0,0);
    2c6c:	2300      	movs	r3, #0
    2c6e:	2200      	movs	r2, #0
    2c70:	2196      	movs	r1, #150	; 0x96
    2c72:	4803      	ldr	r0, [pc, #12]	; (2c80 <powerLEDIndication+0x68>)
    2c74:	4c05      	ldr	r4, [pc, #20]	; (2c8c <powerLEDIndication+0x74>)
    2c76:	47a0      	blx	r4
		break;
    2c78:	e7d6      	b.n	2c28 <powerLEDIndication+0x10>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	41004400 	.word	0x41004400
    2c80:	20000128 	.word	0x20000128
    2c84:	00002061 	.word	0x00002061
    2c88:	000009b5 	.word	0x000009b5
    2c8c:	00002c01 	.word	0x00002c01

00002c90 <check_power_off_button>:

void check_power_off_button()
{
    2c90:	b500      	push	{lr}
    2c92:	b083      	sub	sp, #12
	//volatile uint32_t power_off_button   = 0;
	volatile static uint16_t count_power_button = 0;
	static bool power_button_value_off = false;
	volatile bool power_button_value = false;
    2c94:	2200      	movs	r2, #0
    2c96:	466b      	mov	r3, sp
    2c98:	71da      	strb	r2, [r3, #7]
	
	
	if(powerButtonCheck == true)
    2c9a:	4b17      	ldr	r3, [pc, #92]	; (2cf8 <check_power_off_button+0x68>)
    2c9c:	781b      	ldrb	r3, [r3, #0]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d028      	beq.n	2cf4 <check_power_off_button+0x64>
	{
		powerButtonCheck = false;
    2ca2:	4b15      	ldr	r3, [pc, #84]	; (2cf8 <check_power_off_button+0x68>)
    2ca4:	701a      	strb	r2, [r3, #0]
	return (port_base->IN.reg & pin_mask);
    2ca6:	4b15      	ldr	r3, [pc, #84]	; (2cfc <check_power_off_button+0x6c>)
    2ca8:	6a1b      	ldr	r3, [r3, #32]
    2caa:	045b      	lsls	r3, r3, #17
    2cac:	0fdb      	lsrs	r3, r3, #31
		//setup_ultrasound();
		power_button_value = port_pin_get_input_level(POWER_OFF_BTN_PIN);
    2cae:	466a      	mov	r2, sp
    2cb0:	71d3      	strb	r3, [r2, #7]
		//volatile const uint32_t *input_port        = INPUT_REG_ADDRESS;
		//power_off_button = *input_port & MASK_POWER_OFF;
		//if(power_off_button == POWER_OFF_VALUE )
		//{
		if(power_button_value == true)
    2cb2:	79d3      	ldrb	r3, [r2, #7]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d017      	beq.n	2ce8 <check_power_off_button+0x58>
		{
			count_power_button = count_power_button + 1 ;
    2cb8:	4a11      	ldr	r2, [pc, #68]	; (2d00 <check_power_off_button+0x70>)
    2cba:	8813      	ldrh	r3, [r2, #0]
    2cbc:	3301      	adds	r3, #1
    2cbe:	b29b      	uxth	r3, r3
    2cc0:	8013      	strh	r3, [r2, #0]
			if(count_power_button > POWER_OFF_LIMIT)
    2cc2:	8813      	ldrh	r3, [r2, #0]
    2cc4:	b29b      	uxth	r3, r3
    2cc6:	2b03      	cmp	r3, #3
    2cc8:	d914      	bls.n	2cf4 <check_power_off_button+0x64>
			{
				if(power_button_value_off == true)
    2cca:	4b0e      	ldr	r3, [pc, #56]	; (2d04 <check_power_off_button+0x74>)
    2ccc:	781b      	ldrb	r3, [r3, #0]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d010      	beq.n	2cf4 <check_power_off_button+0x64>
				{
					//Switch off SPI 
					disableSlaveSPI();
    2cd2:	4b0d      	ldr	r3, [pc, #52]	; (2d08 <check_power_off_button+0x78>)
    2cd4:	4798      	blx	r3
					powerLEDIndication(OFF_CONDITION);
    2cd6:	2002      	movs	r0, #2
    2cd8:	4b0c      	ldr	r3, [pc, #48]	; (2d0c <check_power_off_button+0x7c>)
    2cda:	4798      	blx	r3
	power_off();
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <check_power_off_button+0x80>)
    2cde:	4798      	blx	r3
					system_power_off();
					count_power_button = 0;
    2ce0:	2200      	movs	r2, #0
    2ce2:	4b07      	ldr	r3, [pc, #28]	; (2d00 <check_power_off_button+0x70>)
    2ce4:	801a      	strh	r2, [r3, #0]
    2ce6:	e005      	b.n	2cf4 <check_power_off_button+0x64>
				}
			}
		}
		else
		{
			count_power_button = 0;
    2ce8:	2200      	movs	r2, #0
    2cea:	4b05      	ldr	r3, [pc, #20]	; (2d00 <check_power_off_button+0x70>)
    2cec:	801a      	strh	r2, [r3, #0]
			power_button_value_off = true;
    2cee:	3201      	adds	r2, #1
    2cf0:	4b04      	ldr	r3, [pc, #16]	; (2d04 <check_power_off_button+0x74>)
    2cf2:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    2cf4:	b003      	add	sp, #12
    2cf6:	bd00      	pop	{pc}
    2cf8:	200001a0 	.word	0x200001a0
    2cfc:	41004400 	.word	0x41004400
    2d00:	20000124 	.word	0x20000124
    2d04:	20000126 	.word	0x20000126
    2d08:	000003c9 	.word	0x000003c9
    2d0c:	00002c19 	.word	0x00002c19
    2d10:	00002be5 	.word	0x00002be5

00002d14 <power_button_init>:



void power_button_init()
{
    2d14:	b510      	push	{r4, lr}
	delay_cycles_ms(1000);
    2d16:	20fa      	movs	r0, #250	; 0xfa
    2d18:	0080      	lsls	r0, r0, #2
    2d1a:	4c07      	ldr	r4, [pc, #28]	; (2d38 <power_button_init+0x24>)
    2d1c:	47a0      	blx	r4
	init_power_pin();
    2d1e:	4b07      	ldr	r3, [pc, #28]	; (2d3c <power_button_init+0x28>)
    2d20:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2d22:	2280      	movs	r2, #128	; 0x80
    2d24:	0092      	lsls	r2, r2, #2
    2d26:	4b06      	ldr	r3, [pc, #24]	; (2d40 <power_button_init+0x2c>)
    2d28:	619a      	str	r2, [r3, #24]
	power_button_on();
	powerLEDIndication(ON_CONDITION);
    2d2a:	2001      	movs	r0, #1
    2d2c:	4b05      	ldr	r3, [pc, #20]	; (2d44 <power_button_init+0x30>)
    2d2e:	4798      	blx	r3
	delay_cycles_ms(5000);
    2d30:	4805      	ldr	r0, [pc, #20]	; (2d48 <power_button_init+0x34>)
    2d32:	47a0      	blx	r4
	//init timer for 80 msec
    2d34:	bd10      	pop	{r4, pc}
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	000009b5 	.word	0x000009b5
    2d3c:	00002bb9 	.word	0x00002bb9
    2d40:	41004400 	.word	0x41004400
    2d44:	00002c19 	.word	0x00002c19
    2d48:	00001388 	.word	0x00001388

00002d4c <update_PID_values>:
	ki_constant  |=  pid_values[3];
	
	kd_constant   = (pid_values[4] << 8) & 0xFF00 ;
	kd_constant  |=  pid_values[5];

}
    2d4c:	4770      	bx	lr
	...

00002d50 <velocityControlLeft>:

#define INITIALCONTROL 2


void velocityControlLeft(volatile uint16_t feedback , volatile uint16_t set)
{
    2d50:	b570      	push	{r4, r5, r6, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	466b      	mov	r3, sp
    2d56:	80d8      	strh	r0, [r3, #6]
    2d58:	aa01      	add	r2, sp, #4
    2d5a:	8011      	strh	r1, [r2, #0]
	int currentError = 0;
	uint8_t speed = 0;
	static int sumOfErrors  = 0;
	static int prevError = 0;
	currentError = (set - feedback);
    2d5c:	8814      	ldrh	r4, [r2, #0]
    2d5e:	88d8      	ldrh	r0, [r3, #6]
    2d60:	1a24      	subs	r4, r4, r0
	sumOfErrors += currentError;
    2d62:	4b19      	ldr	r3, [pc, #100]	; (2dc8 <velocityControlLeft+0x78>)
    2d64:	681b      	ldr	r3, [r3, #0]
    2d66:	18e3      	adds	r3, r4, r3
	if(sumOfErrors > 4000)
    2d68:	22fa      	movs	r2, #250	; 0xfa
    2d6a:	0112      	lsls	r2, r2, #4
    2d6c:	4293      	cmp	r3, r2
    2d6e:	dc26      	bgt.n	2dbe <velocityControlLeft+0x6e>
	sumOfErrors += currentError;
    2d70:	4a15      	ldr	r2, [pc, #84]	; (2dc8 <velocityControlLeft+0x78>)
    2d72:	6013      	str	r3, [r2, #0]
	{
		sumOfErrors = 4000;
	}
	kpTerm = currentError/KPVelocityControl;
    2d74:	4d15      	ldr	r5, [pc, #84]	; (2dcc <velocityControlLeft+0x7c>)
    2d76:	4916      	ldr	r1, [pc, #88]	; (2dd0 <velocityControlLeft+0x80>)
    2d78:	0020      	movs	r0, r4
    2d7a:	47a8      	blx	r5
    2d7c:	b200      	sxth	r0, r0
    2d7e:	4b15      	ldr	r3, [pc, #84]	; (2dd4 <velocityControlLeft+0x84>)
    2d80:	8018      	strh	r0, [r3, #0]
	kiTerm = sumOfErrors/KIVelocityControl;
    2d82:	4b11      	ldr	r3, [pc, #68]	; (2dc8 <velocityControlLeft+0x78>)
    2d84:	681e      	ldr	r6, [r3, #0]
    2d86:	4914      	ldr	r1, [pc, #80]	; (2dd8 <velocityControlLeft+0x88>)
    2d88:	0030      	movs	r0, r6
    2d8a:	47a8      	blx	r5
    2d8c:	b200      	sxth	r0, r0
    2d8e:	4b13      	ldr	r3, [pc, #76]	; (2ddc <velocityControlLeft+0x8c>)
    2d90:	8018      	strh	r0, [r3, #0]
	//kdTerm = (currentError - prevError)/KDVelocityControl ;
	speed = ((currentError*1000)/KPVelocityControl) + ((sumOfErrors*100)/KIVelocityControl) ;//+ (currentError - prevError)/KDVelocityControl ;
    2d92:	20fa      	movs	r0, #250	; 0xfa
    2d94:	0080      	lsls	r0, r0, #2
    2d96:	4360      	muls	r0, r4
    2d98:	490d      	ldr	r1, [pc, #52]	; (2dd0 <velocityControlLeft+0x80>)
    2d9a:	47a8      	blx	r5
    2d9c:	0004      	movs	r4, r0
    2d9e:	2064      	movs	r0, #100	; 0x64
    2da0:	4370      	muls	r0, r6
    2da2:	490d      	ldr	r1, [pc, #52]	; (2dd8 <velocityControlLeft+0x88>)
    2da4:	47a8      	blx	r5
    2da6:	1824      	adds	r4, r4, r0
    2da8:	b2e1      	uxtb	r1, r4
	kSpeed = speed;
    2daa:	4b0d      	ldr	r3, [pc, #52]	; (2de0 <velocityControlLeft+0x90>)
    2dac:	7019      	strb	r1, [r3, #0]
	if(speed > MAX_SPEED_VALUE)
    2dae:	29fa      	cmp	r1, #250	; 0xfa
    2db0:	d900      	bls.n	2db4 <velocityControlLeft+0x64>
	{
		speed = MAX_SPEED;
    2db2:	2164      	movs	r1, #100	; 0x64
	}
	prevError = currentError;
	set_motor_left(left_dir , speed);
    2db4:	2000      	movs	r0, #0
    2db6:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <velocityControlLeft+0x94>)
    2db8:	4798      	blx	r3
}
    2dba:	b002      	add	sp, #8
    2dbc:	bd70      	pop	{r4, r5, r6, pc}
		sumOfErrors = 4000;
    2dbe:	22fa      	movs	r2, #250	; 0xfa
    2dc0:	0112      	lsls	r2, r2, #4
    2dc2:	4b01      	ldr	r3, [pc, #4]	; (2dc8 <velocityControlLeft+0x78>)
    2dc4:	601a      	str	r2, [r3, #0]
    2dc6:	e7d5      	b.n	2d74 <velocityControlLeft+0x24>
    2dc8:	20000140 	.word	0x20000140
    2dcc:	0000349d 	.word	0x0000349d
    2dd0:	000005dc 	.word	0x000005dc
    2dd4:	20000196 	.word	0x20000196
    2dd8:	00002710 	.word	0x00002710
    2ddc:	20000194 	.word	0x20000194
    2de0:	20000190 	.word	0x20000190
    2de4:	000031d1 	.word	0x000031d1

00002de8 <velocityControlLoop>:
	set_motor_left(left_dir , ticks/INITIALCONTROL);
}


void velocityControlLoop(motor* leftMotor , motor* rightMotor)
{
    2de8:	b510      	push	{r4, lr}
	uint16_t ticksPer100m    = 0;

	if((velocityControlUpdate == true) && (motorControlStatus == VELOCITY_CONTROL_MODE))
    2dea:	4b0d      	ldr	r3, [pc, #52]	; (2e20 <velocityControlLoop+0x38>)
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d003      	beq.n	2dfa <velocityControlLoop+0x12>
    2df2:	4b0c      	ldr	r3, [pc, #48]	; (2e24 <velocityControlLoop+0x3c>)
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	2b01      	cmp	r3, #1
    2df8:	d000      	beq.n	2dfc <velocityControlLoop+0x14>
		if(reqRightSpeed > 0)
		{
			
		}
	}
}
    2dfa:	bd10      	pop	{r4, pc}
		velocityControlUpdate = false;
    2dfc:	2200      	movs	r2, #0
    2dfe:	4b08      	ldr	r3, [pc, #32]	; (2e20 <velocityControlLoop+0x38>)
    2e00:	701a      	strb	r2, [r3, #0]
		if(leftMotor->speed > 0)
    2e02:	7803      	ldrb	r3, [r0, #0]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d0f8      	beq.n	2dfa <velocityControlLoop+0x12>
			ticksPer100m       =  left_encoder_ticks ;
    2e08:	4a07      	ldr	r2, [pc, #28]	; (2e28 <velocityControlLoop+0x40>)
    2e0a:	8813      	ldrh	r3, [r2, #0]
			left_encoder_ticks =  0;
    2e0c:	2100      	movs	r1, #0
    2e0e:	8011      	strh	r1, [r2, #0]
			gleftTicks         =  ticksPer100m;
    2e10:	4a06      	ldr	r2, [pc, #24]	; (2e2c <velocityControlLoop+0x44>)
    2e12:	8013      	strh	r3, [r2, #0]
			velocityControlLeft(ticksPer100m , leftMotor->speed);
    2e14:	7801      	ldrb	r1, [r0, #0]
    2e16:	0018      	movs	r0, r3
    2e18:	4b05      	ldr	r3, [pc, #20]	; (2e30 <velocityControlLoop+0x48>)
    2e1a:	4798      	blx	r3
}
    2e1c:	e7ed      	b.n	2dfa <velocityControlLoop+0x12>
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	200001b0 	.word	0x200001b0
    2e24:	2000013c 	.word	0x2000013c
    2e28:	2000019c 	.word	0x2000019c
    2e2c:	2000018e 	.word	0x2000018e
    2e30:	00002d51 	.word	0x00002d51

00002e34 <motorControlLoop>:


void motorControlLoop()
{
    2e34:	b510      	push	{r4, lr}
	velocityControlLoop(&GLeftMotor,&GRightMotor);
    2e36:	4902      	ldr	r1, [pc, #8]	; (2e40 <motorControlLoop+0xc>)
    2e38:	4802      	ldr	r0, [pc, #8]	; (2e44 <motorControlLoop+0x10>)
    2e3a:	4b03      	ldr	r3, [pc, #12]	; (2e48 <motorControlLoop+0x14>)
    2e3c:	4798      	blx	r3
}
    2e3e:	bd10      	pop	{r4, pc}
    2e40:	20000138 	.word	0x20000138
    2e44:	20000134 	.word	0x20000134
    2e48:	00002de9 	.word	0x00002de9

00002e4c <velocityControlStart>:


void velocityControlStart()
{
	prevCount = 0;
    2e4c:	2300      	movs	r3, #0
    2e4e:	4a03      	ldr	r2, [pc, #12]	; (2e5c <velocityControlStart+0x10>)
    2e50:	8013      	strh	r3, [r2, #0]
	left_encoder_ticks   = 0;
    2e52:	4a03      	ldr	r2, [pc, #12]	; (2e60 <velocityControlStart+0x14>)
    2e54:	8013      	strh	r3, [r2, #0]
	right_encoder_ticks  = 0;
    2e56:	4a03      	ldr	r2, [pc, #12]	; (2e64 <velocityControlStart+0x18>)
    2e58:	8013      	strh	r3, [r2, #0]
}
    2e5a:	4770      	bx	lr
    2e5c:	2000013e 	.word	0x2000013e
    2e60:	2000019c 	.word	0x2000019c
    2e64:	200001a8 	.word	0x200001a8

00002e68 <motorSpeedControl>:


void motorSpeedControl(motor * leftMotor , motor * rightMotor)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	46c6      	mov	lr, r8
    2e6c:	b500      	push	{lr}
    2e6e:	0007      	movs	r7, r0
    2e70:	000e      	movs	r6, r1
	GLeftMotor.speed                =  ((leftMotor->speed)*MAXTICKSPER100m)/255;
    2e72:	4d0e      	ldr	r5, [pc, #56]	; (2eac <motorSpeedControl+0x44>)
    2e74:	7800      	ldrb	r0, [r0, #0]
    2e76:	24c8      	movs	r4, #200	; 0xc8
    2e78:	4360      	muls	r0, r4
    2e7a:	4b0d      	ldr	r3, [pc, #52]	; (2eb0 <motorSpeedControl+0x48>)
    2e7c:	4698      	mov	r8, r3
    2e7e:	21ff      	movs	r1, #255	; 0xff
    2e80:	4798      	blx	r3
    2e82:	7028      	strb	r0, [r5, #0]
	GLeftMotor.direction            =  leftMotor->direction;
    2e84:	787b      	ldrb	r3, [r7, #1]
    2e86:	706b      	strb	r3, [r5, #1]
	GLeftMotor.ticks                =  leftMotor->ticks;
    2e88:	887b      	ldrh	r3, [r7, #2]
    2e8a:	806b      	strh	r3, [r5, #2]
	GRightMotor.speed               =  ((rightMotor->speed)*MAXTICKSPER100m)/255;
    2e8c:	4d09      	ldr	r5, [pc, #36]	; (2eb4 <motorSpeedControl+0x4c>)
    2e8e:	7830      	ldrb	r0, [r6, #0]
    2e90:	4360      	muls	r0, r4
    2e92:	21ff      	movs	r1, #255	; 0xff
    2e94:	47c0      	blx	r8
    2e96:	7028      	strb	r0, [r5, #0]
	GRightMotor.direction           =  rightMotor->direction;
    2e98:	7873      	ldrb	r3, [r6, #1]
    2e9a:	706b      	strb	r3, [r5, #1]
	GRightMotor.ticks               =  rightMotor->ticks;
    2e9c:	8873      	ldrh	r3, [r6, #2]
    2e9e:	806b      	strh	r3, [r5, #2]
	velocityControlStart();
    2ea0:	4b05      	ldr	r3, [pc, #20]	; (2eb8 <motorSpeedControl+0x50>)
    2ea2:	4798      	blx	r3
}
    2ea4:	bc04      	pop	{r2}
    2ea6:	4690      	mov	r8, r2
    2ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	20000134 	.word	0x20000134
    2eb0:	0000349d 	.word	0x0000349d
    2eb4:	20000138 	.word	0x20000138
    2eb8:	00002e4d 	.word	0x00002e4d

00002ebc <controlMotors>:


void controlMotors( motor* leftMotor , motor* rightMotor)
{
    2ebc:	b500      	push	{lr}
    2ebe:	b083      	sub	sp, #12
    2ec0:	9001      	str	r0, [sp, #4]
    2ec2:	9100      	str	r1, [sp, #0]
	if((leftMotor->ticks == 0) && (rightMotor->ticks == 0))
    2ec4:	8843      	ldrh	r3, [r0, #2]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d10f      	bne.n	2eea <controlMotors+0x2e>
    2eca:	884a      	ldrh	r2, [r1, #2]
    2ecc:	2a00      	cmp	r2, #0
    2ece:	d10c      	bne.n	2eea <controlMotors+0x2e>
	{
		if((leftMotor->speed > 0 )|| (rightMotor->speed > 0))
    2ed0:	7802      	ldrb	r2, [r0, #0]
    2ed2:	2a00      	cmp	r2, #0
    2ed4:	d102      	bne.n	2edc <controlMotors+0x20>
    2ed6:	780b      	ldrb	r3, [r1, #0]
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d006      	beq.n	2eea <controlMotors+0x2e>
		{
			motorControlStatus = VELOCITY_CONTROL_MODE;
    2edc:	2201      	movs	r2, #1
    2ede:	4b04      	ldr	r3, [pc, #16]	; (2ef0 <controlMotors+0x34>)
    2ee0:	701a      	strb	r2, [r3, #0]
			motorSpeedControl(&leftMotor , &rightMotor);
    2ee2:	4669      	mov	r1, sp
    2ee4:	a801      	add	r0, sp, #4
    2ee6:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <controlMotors+0x38>)
    2ee8:	4798      	blx	r3
	else if((leftMotor->ticks == 0) && (rightMotor->ticks == 0) && (leftMotor->speed == 0) && (rightMotor->speed == 0))
	{
		turn_off_motors();
		motorControlStatus = IDEAL_MODE;
	}
}
    2eea:	b003      	add	sp, #12
    2eec:	bd00      	pop	{pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	2000013c 	.word	0x2000013c
    2ef4:	00002e69 	.word	0x00002e69

00002ef8 <tc_callback_OF>:
{
	//Each loop is 8msec
	//port_pin_set_output_level(PROFILE_PIN,true);
	//control_loop_motors();
	static uint8_t countThreshold = 0;
	countThreshold++; 
    2ef8:	4a08      	ldr	r2, [pc, #32]	; (2f1c <tc_callback_OF+0x24>)
    2efa:	7813      	ldrb	r3, [r2, #0]
    2efc:	3301      	adds	r3, #1
    2efe:	b2db      	uxtb	r3, r3
    2f00:	7013      	strb	r3, [r2, #0]
	
	LEDSPITimerUpdate = true;
    2f02:	2201      	movs	r2, #1
    2f04:	4906      	ldr	r1, [pc, #24]	; (2f20 <tc_callback_OF+0x28>)
    2f06:	700a      	strb	r2, [r1, #0]
	motorSPITimerUpdate = true;
    2f08:	4906      	ldr	r1, [pc, #24]	; (2f24 <tc_callback_OF+0x2c>)
    2f0a:	700a      	strb	r2, [r1, #0]
	
	//updateSensorControlLoop = true;
	if ( countThreshold > SPEED_CONTROL_TIME_THRESHOLD)
    2f0c:	2b0c      	cmp	r3, #12
    2f0e:	d904      	bls.n	2f1a <tc_callback_OF+0x22>
	{
		velocityControlUpdate  = true;
    2f10:	4b05      	ldr	r3, [pc, #20]	; (2f28 <tc_callback_OF+0x30>)
    2f12:	701a      	strb	r2, [r3, #0]
		//updateSpeedControlLoop = true;
		countThreshold = 0;
    2f14:	2200      	movs	r2, #0
    2f16:	4b01      	ldr	r3, [pc, #4]	; (2f1c <tc_callback_OF+0x24>)
    2f18:	701a      	strb	r2, [r3, #0]
	}
	//port_pin_set_output_level(PROFILE_PIN,false);
}
    2f1a:	4770      	bx	lr
    2f1c:	20000144 	.word	0x20000144
    2f20:	2000018c 	.word	0x2000018c
    2f24:	2000019e 	.word	0x2000019e
    2f28:	200001b0 	.word	0x200001b0

00002f2c <extint_detection_left_encoder_callback>:
    2f2c:	2280      	movs	r2, #128	; 0x80
    2f2e:	0052      	lsls	r2, r2, #1
    2f30:	4b0a      	ldr	r3, [pc, #40]	; (2f5c <extint_detection_left_encoder_callback+0x30>)
    2f32:	619a      	str	r2, [r3, #24]
void extint_detection_left_encoder_callback(void)
{
	volatile static uint16_t count_high = 0;
	volatile static uint16_t count_low  = 0;
	port_pin_set_output_level(PROFILE_PIN_2,true);
	left_encoder_ticks++;
    2f34:	4a0a      	ldr	r2, [pc, #40]	; (2f60 <extint_detection_left_encoder_callback+0x34>)
    2f36:	8813      	ldrh	r3, [r2, #0]
    2f38:	3301      	adds	r3, #1
    2f3a:	b29b      	uxth	r3, r3
    2f3c:	8013      	strh	r3, [r2, #0]
	if(left_encoder_ticks >32000)
    2f3e:	22fa      	movs	r2, #250	; 0xfa
    2f40:	01d2      	lsls	r2, r2, #7
    2f42:	4293      	cmp	r3, r2
    2f44:	d905      	bls.n	2f52 <extint_detection_left_encoder_callback+0x26>
	{
		refreshTicks = true;
    2f46:	2201      	movs	r2, #1
    2f48:	4b06      	ldr	r3, [pc, #24]	; (2f64 <extint_detection_left_encoder_callback+0x38>)
    2f4a:	701a      	strb	r2, [r3, #0]
		left_encoder_ticks = 0;
    2f4c:	2200      	movs	r2, #0
    2f4e:	4b04      	ldr	r3, [pc, #16]	; (2f60 <extint_detection_left_encoder_callback+0x34>)
    2f50:	801a      	strh	r2, [r3, #0]
		port_base->OUTCLR.reg = pin_mask;
    2f52:	2280      	movs	r2, #128	; 0x80
    2f54:	0052      	lsls	r2, r2, #1
    2f56:	4b01      	ldr	r3, [pc, #4]	; (2f5c <extint_detection_left_encoder_callback+0x30>)
    2f58:	615a      	str	r2, [r3, #20]
	}
	port_pin_set_output_level(PROFILE_PIN_2,false);
}
    2f5a:	4770      	bx	lr
    2f5c:	41004400 	.word	0x41004400
    2f60:	2000019c 	.word	0x2000019c
    2f64:	200001a1 	.word	0x200001a1

00002f68 <extint_detection_right_encoder_callback>:
void extint_detection_right_encoder_callback(void)
{
	volatile static uint16_t count_high = 0;
	volatile static uint16_t count_low  = 0;
	//port_pin_set_output_level(PROFILE_PIN,true);
	right_encoder_ticks++;
    2f68:	4b07      	ldr	r3, [pc, #28]	; (2f88 <extint_detection_right_encoder_callback+0x20>)
    2f6a:	881b      	ldrh	r3, [r3, #0]
    2f6c:	3301      	adds	r3, #1
    2f6e:	b29b      	uxth	r3, r3
	if(right_encoder_ticks >32000)
    2f70:	22fa      	movs	r2, #250	; 0xfa
    2f72:	01d2      	lsls	r2, r2, #7
    2f74:	4293      	cmp	r3, r2
    2f76:	d903      	bls.n	2f80 <extint_detection_right_encoder_callback+0x18>
	{
		right_encoder_ticks = 0;
    2f78:	2200      	movs	r2, #0
    2f7a:	4b03      	ldr	r3, [pc, #12]	; (2f88 <extint_detection_right_encoder_callback+0x20>)
    2f7c:	801a      	strh	r2, [r3, #0]
	}
	//port_pin_set_output_level(PROFILE_PIN,false);
}
    2f7e:	4770      	bx	lr
	right_encoder_ticks++;
    2f80:	4a01      	ldr	r2, [pc, #4]	; (2f88 <extint_detection_right_encoder_callback+0x20>)
    2f82:	8013      	strh	r3, [r2, #0]
    2f84:	e7fb      	b.n	2f7e <extint_detection_right_encoder_callback+0x16>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	200001a8 	.word	0x200001a8

00002f8c <init_timer_callbacks>:
{
    2f8c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    2f8e:	4c0c      	ldr	r4, [pc, #48]	; (2fc0 <init_timer_callbacks+0x34>)
    2f90:	2200      	movs	r2, #0
    2f92:	490c      	ldr	r1, [pc, #48]	; (2fc4 <init_timer_callbacks+0x38>)
    2f94:	0020      	movs	r0, r4
    2f96:	4b0c      	ldr	r3, [pc, #48]	; (2fc8 <init_timer_callbacks+0x3c>)
    2f98:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f9a:	6820      	ldr	r0, [r4, #0]
    2f9c:	4b0b      	ldr	r3, [pc, #44]	; (2fcc <init_timer_callbacks+0x40>)
    2f9e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2fa0:	4b0b      	ldr	r3, [pc, #44]	; (2fd0 <init_timer_callbacks+0x44>)
    2fa2:	5c1a      	ldrb	r2, [r3, r0]
    2fa4:	231f      	movs	r3, #31
    2fa6:	4013      	ands	r3, r2
    2fa8:	2201      	movs	r2, #1
    2faa:	0011      	movs	r1, r2
    2fac:	4099      	lsls	r1, r3
    2fae:	4b09      	ldr	r3, [pc, #36]	; (2fd4 <init_timer_callbacks+0x48>)
    2fb0:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2fb2:	7e63      	ldrb	r3, [r4, #25]
    2fb4:	2101      	movs	r1, #1
    2fb6:	430b      	orrs	r3, r1
    2fb8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2fba:	6823      	ldr	r3, [r4, #0]
    2fbc:	735a      	strb	r2, [r3, #13]
}
    2fbe:	bd10      	pop	{r4, pc}
    2fc0:	200007e4 	.word	0x200007e4
    2fc4:	00002ef9 	.word	0x00002ef9
    2fc8:	00001ba9 	.word	0x00001ba9
    2fcc:	00001c61 	.word	0x00001c61
    2fd0:	0000376c 	.word	0x0000376c
    2fd4:	e000e100 	.word	0xe000e100

00002fd8 <configure_timer_encoder>:
{
    2fd8:	b510      	push	{r4, lr}
    2fda:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    2fdc:	aa01      	add	r2, sp, #4
    2fde:	2300      	movs	r3, #0
    2fe0:	2100      	movs	r1, #0
    2fe2:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2fe4:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2fe6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2fe8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2fea:	2000      	movs	r0, #0
    2fec:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2fee:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2ff0:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2ff2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2ff4:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2ff6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2ff8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2ffa:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2ffc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2ffe:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3000:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    3002:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3004:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3006:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = true;
    3008:	3301      	adds	r3, #1
    300a:	72d3      	strb	r3, [r2, #11]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV8; //1024
    300c:	23c0      	movs	r3, #192	; 0xc0
    300e:	009b      	lsls	r3, r3, #2
    3010:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_encoder_capture, ENCODER_TC, &config_tc);
    3012:	4c08      	ldr	r4, [pc, #32]	; (3034 <configure_timer_encoder+0x5c>)
    3014:	4908      	ldr	r1, [pc, #32]	; (3038 <configure_timer_encoder+0x60>)
    3016:	0020      	movs	r0, r4
    3018:	4b08      	ldr	r3, [pc, #32]	; (303c <configure_timer_encoder+0x64>)
    301a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    301c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    301e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3020:	b25b      	sxtb	r3, r3
    3022:	2b00      	cmp	r3, #0
    3024:	dbfb      	blt.n	301e <configure_timer_encoder+0x46>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3026:	8813      	ldrh	r3, [r2, #0]
    3028:	2102      	movs	r1, #2
    302a:	430b      	orrs	r3, r1
    302c:	8013      	strh	r3, [r2, #0]
}
    302e:	b00e      	add	sp, #56	; 0x38
    3030:	bd10      	pop	{r4, pc}
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	200007e4 	.word	0x200007e4
    3038:	42001800 	.word	0x42001800
    303c:	00001c85 	.word	0x00001c85

00003040 <configure_extint_left_encoder>:
{
    3040:	b510      	push	{r4, lr}
    3042:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    3044:	ac01      	add	r4, sp, #4
    3046:	0020      	movs	r0, r4
    3048:	4b07      	ldr	r3, [pc, #28]	; (3068 <configure_extint_left_encoder+0x28>)
    304a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA16A_EIC_EXTINT0;
    304c:	2310      	movs	r3, #16
    304e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA16A_EIC_EXTINT0;
    3050:	2300      	movs	r3, #0
    3052:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    3054:	3301      	adds	r3, #1
    3056:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3058:	3301      	adds	r3, #1
    305a:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ENCODER_LEFT_EIC_LINE, &config_extint_chan);
    305c:	0021      	movs	r1, r4
    305e:	2000      	movs	r0, #0
    3060:	4b02      	ldr	r3, [pc, #8]	; (306c <configure_extint_left_encoder+0x2c>)
    3062:	4798      	blx	r3
}
    3064:	b004      	add	sp, #16
    3066:	bd10      	pop	{r4, pc}
    3068:	00000f51 	.word	0x00000f51
    306c:	00000f65 	.word	0x00000f65

00003070 <configure_extint_right_encoder>:
{
    3070:	b510      	push	{r4, lr}
    3072:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    3074:	ac01      	add	r4, sp, #4
    3076:	0020      	movs	r0, r4
    3078:	4b07      	ldr	r3, [pc, #28]	; (3098 <configure_extint_right_encoder+0x28>)
    307a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA15A_EIC_EXTINT1;
    307c:	230f      	movs	r3, #15
    307e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA15A_EIC_EXTINT1;
    3080:	2300      	movs	r3, #0
    3082:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    3084:	3301      	adds	r3, #1
    3086:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3088:	3301      	adds	r3, #1
    308a:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ENCODER_RIGHT_EIC_LINE, &config_extint_chan);
    308c:	0021      	movs	r1, r4
    308e:	2001      	movs	r0, #1
    3090:	4b02      	ldr	r3, [pc, #8]	; (309c <configure_extint_right_encoder+0x2c>)
    3092:	4798      	blx	r3
}
    3094:	b004      	add	sp, #16
    3096:	bd10      	pop	{r4, pc}
    3098:	00000f51 	.word	0x00000f51
    309c:	00000f65 	.word	0x00000f65

000030a0 <configure_extint_right_encoder_callbacks>:

void configure_extint_right_encoder_callbacks(void)
{
    30a0:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_right_encoder_callback,ENCODER_RIGHT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    30a2:	2200      	movs	r2, #0
    30a4:	2101      	movs	r1, #1
    30a6:	4804      	ldr	r0, [pc, #16]	; (30b8 <configure_extint_right_encoder_callbacks+0x18>)
    30a8:	4b04      	ldr	r3, [pc, #16]	; (30bc <configure_extint_right_encoder_callbacks+0x1c>)
    30aa:	4798      	blx	r3
	extint_chan_enable_callback(ENCODER_RIGHT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    30ac:	2100      	movs	r1, #0
    30ae:	2001      	movs	r0, #1
    30b0:	4b03      	ldr	r3, [pc, #12]	; (30c0 <configure_extint_right_encoder_callbacks+0x20>)
    30b2:	4798      	blx	r3
}
    30b4:	bd10      	pop	{r4, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	00002f69 	.word	0x00002f69
    30bc:	00000e09 	.word	0x00000e09
    30c0:	00000e35 	.word	0x00000e35

000030c4 <configure_extint_left_encoder_callbacks>:


void configure_extint_left_encoder_callbacks(void)
{
    30c4:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_left_encoder_callback,ENCODER_LEFT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    30c6:	2200      	movs	r2, #0
    30c8:	2100      	movs	r1, #0
    30ca:	4804      	ldr	r0, [pc, #16]	; (30dc <configure_extint_left_encoder_callbacks+0x18>)
    30cc:	4b04      	ldr	r3, [pc, #16]	; (30e0 <configure_extint_left_encoder_callbacks+0x1c>)
    30ce:	4798      	blx	r3
	extint_chan_enable_callback(ENCODER_LEFT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    30d0:	2100      	movs	r1, #0
    30d2:	2000      	movs	r0, #0
    30d4:	4b03      	ldr	r3, [pc, #12]	; (30e4 <configure_extint_left_encoder_callbacks+0x20>)
    30d6:	4798      	blx	r3
}
    30d8:	bd10      	pop	{r4, pc}
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	00002f2d 	.word	0x00002f2d
    30e0:	00000e09 	.word	0x00000e09
    30e4:	00000e35 	.word	0x00000e35

000030e8 <encoder_timer_init>:

void encoder_timer_init()
{
    30e8:	b510      	push	{r4, lr}
	configure_timer_encoder();
    30ea:	4b02      	ldr	r3, [pc, #8]	; (30f4 <encoder_timer_init+0xc>)
    30ec:	4798      	blx	r3
	init_timer_callbacks();
    30ee:	4b02      	ldr	r3, [pc, #8]	; (30f8 <encoder_timer_init+0x10>)
    30f0:	4798      	blx	r3
}
    30f2:	bd10      	pop	{r4, pc}
    30f4:	00002fd9 	.word	0x00002fd9
    30f8:	00002f8d 	.word	0x00002f8d

000030fc <encoders_init>:

//Initializing the encoders
void encoders_init()
{
    30fc:	b510      	push	{r4, lr}
	
	//Initialize the external interrupt channel for both encoders
	configure_extint_left_encoder();
    30fe:	4b05      	ldr	r3, [pc, #20]	; (3114 <encoders_init+0x18>)
    3100:	4798      	blx	r3
	configure_extint_right_encoder();
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <encoders_init+0x1c>)
    3104:	4798      	blx	r3
	
	//Initialize the callbacks for external interrupt channel for both encoders
	configure_extint_left_encoder_callbacks();
    3106:	4b05      	ldr	r3, [pc, #20]	; (311c <encoders_init+0x20>)
    3108:	4798      	blx	r3
	configure_extint_right_encoder_callbacks();
    310a:	4b05      	ldr	r3, [pc, #20]	; (3120 <encoders_init+0x24>)
    310c:	4798      	blx	r3
	
	//Initialize the timer encoder
	encoder_timer_init();
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <encoders_init+0x28>)
    3110:	4798      	blx	r3
	
    3112:	bd10      	pop	{r4, pc}
    3114:	00003041 	.word	0x00003041
    3118:	00003071 	.word	0x00003071
    311c:	000030c5 	.word	0x000030c5
    3120:	000030a1 	.word	0x000030a1
    3124:	000030e9 	.word	0x000030e9

00003128 <config_timer_waveform>:


/**************************************************************************************/

void config_timer_waveform()
{
    3128:	b570      	push	{r4, r5, r6, lr}
    312a:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    312c:	4d20      	ldr	r5, [pc, #128]	; (31b0 <config_timer_waveform+0x88>)
    312e:	ac01      	add	r4, sp, #4
    3130:	0029      	movs	r1, r5
    3132:	0020      	movs	r0, r4
    3134:	4b1f      	ldr	r3, [pc, #124]	; (31b4 <config_timer_waveform+0x8c>)
    3136:	4798      	blx	r3
	struct port_config config_port_pin;
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	
	//
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    3138:	2306      	movs	r3, #6
    313a:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period		   = 0x00FF;
    313c:	33f9      	adds	r3, #249	; 0xf9
    313e:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    3140:	3bfd      	subs	r3, #253	; 0xfd
    3142:	7623      	strb	r3, [r4, #24]
	
	
	//Wave Polarity
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
    3144:	2300      	movs	r3, #0
    3146:	75a3      	strb	r3, [r4, #22]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
    3148:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[LEFT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
    314a:	75e3      	strb	r3, [r4, #23]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
    314c:	7563      	strb	r3, [r4, #21]
	
	//Right Motor
	config_tcc.compare.match[RIGHT_MOTOR_CLOCK_CH]			= 0x00;
    314e:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_CLOCK_WO] = true;
    3150:	2201      	movs	r2, #1
    3152:	2198      	movs	r1, #152	; 0x98
    3154:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_CLOCK_WO]        = PIN_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    3156:	3994      	subs	r1, #148	; 0x94
    3158:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_CLOCK_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    315a:	4917      	ldr	r1, [pc, #92]	; (31b8 <config_timer_waveform+0x90>)
    315c:	67a1      	str	r1, [r4, #120]	; 0x78
	
	config_tcc.compare.match[RIGHT_MOTOR_ANTI_CH]			= 0x00;
    315e:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_ANTI_WO] = true;
    3160:	2199      	movs	r1, #153	; 0x99
    3162:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_ANTI_WO]        = PIN_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    3164:	3994      	subs	r1, #148	; 0x94
    3166:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_ANTI_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    3168:	4914      	ldr	r1, [pc, #80]	; (31bc <config_timer_waveform+0x94>)
    316a:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	//
	config_tcc.compare.match[LEFT_MOTOR_CLOCK_CH]				= 0x00;
    316c:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_CLOCK_WO]  = true;
    316e:	219a      	movs	r1, #154	; 0x9a
    3170:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_CLOCK_WO]         = PIN_PA10F_TCC0_WO2; //this is no longer correct--- should be now
    3172:	3990      	subs	r1, #144	; 0x90
    3174:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_CLOCK_WO]     = PINMUX_PA10F_TCC0_WO2; // this is no longer correct --- should be now
    3176:	4812      	ldr	r0, [pc, #72]	; (31c0 <config_timer_waveform+0x98>)
    3178:	3176      	adds	r1, #118	; 0x76
    317a:	5060      	str	r0, [r4, r1]
	
	config_tcc.compare.match[LEFT_MOTOR_ANTI_CH]				= 0x00;
    317c:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_ANTI_WO]  = true;
    317e:	339b      	adds	r3, #155	; 0x9b
    3180:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_ANTI_WO]         = PIN_PA11F_TCC0_WO3; //this is no longer correct--- should be now
    3182:	3b90      	subs	r3, #144	; 0x90
    3184:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_ANTI_WO]     = PINMUX_PA11F_TCC0_WO3; // this is no longer correct --- should be now
    3186:	4a0f      	ldr	r2, [pc, #60]	; (31c4 <config_timer_waveform+0x9c>)
    3188:	3379      	adds	r3, #121	; 0x79
    318a:	50e2      	str	r2, [r4, r3]
	
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    318c:	4e0e      	ldr	r6, [pc, #56]	; (31c8 <config_timer_waveform+0xa0>)
    318e:	0022      	movs	r2, r4
    3190:	0029      	movs	r1, r5
    3192:	0030      	movs	r0, r6
    3194:	4b0d      	ldr	r3, [pc, #52]	; (31cc <config_timer_waveform+0xa4>)
    3196:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    3198:	6832      	ldr	r2, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    319a:	2102      	movs	r1, #2
    319c:	6893      	ldr	r3, [r2, #8]
    319e:	4219      	tst	r1, r3
    31a0:	d1fc      	bne.n	319c <config_timer_waveform+0x74>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    31a2:	6813      	ldr	r3, [r2, #0]
    31a4:	2102      	movs	r1, #2
    31a6:	430b      	orrs	r3, r1
    31a8:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance0);
	
}
    31aa:	b02a      	add	sp, #168	; 0xa8
    31ac:	bd70      	pop	{r4, r5, r6, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	42001400 	.word	0x42001400
    31b4:	00001679 	.word	0x00001679
    31b8:	00040005 	.word	0x00040005
    31bc:	00050005 	.word	0x00050005
    31c0:	000a0005 	.word	0x000a0005
    31c4:	000b0005 	.word	0x000b0005
    31c8:	2000014c 	.word	0x2000014c
    31cc:	000017b5 	.word	0x000017b5

000031d0 <set_motor_left>:

void set_motor_left(uint8_t dir, uint8_t speed)
{
    31d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31d2:	0004      	movs	r4, r0
    31d4:	000d      	movs	r5, r1
	static uint8_t old_left_dir   = 0;
	static uint8_t old_left_speed = 0;
	if((old_left_dir != dir)||(old_left_speed != speed))
    31d6:	4b12      	ldr	r3, [pc, #72]	; (3220 <set_motor_left+0x50>)
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	4283      	cmp	r3, r0
    31dc:	d010      	beq.n	3200 <set_motor_left+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
    31de:	2c00      	cmp	r4, #0
    31e0:	d013      	beq.n	320a <set_motor_left+0x3a>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, 0x00);
    31e2:	4f10      	ldr	r7, [pc, #64]	; (3224 <set_motor_left+0x54>)
    31e4:	2200      	movs	r2, #0
    31e6:	2102      	movs	r1, #2
    31e8:	0038      	movs	r0, r7
    31ea:	4e0f      	ldr	r6, [pc, #60]	; (3228 <set_motor_left+0x58>)
    31ec:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, speed);
    31ee:	002a      	movs	r2, r5
    31f0:	2103      	movs	r1, #3
    31f2:	0038      	movs	r0, r7
    31f4:	47b0      	blx	r6
		}
		
	}
	old_left_speed	= speed;
    31f6:	4b0d      	ldr	r3, [pc, #52]	; (322c <set_motor_left+0x5c>)
    31f8:	701d      	strb	r5, [r3, #0]
	old_left_dir	= dir;
    31fa:	4b09      	ldr	r3, [pc, #36]	; (3220 <set_motor_left+0x50>)
    31fc:	701c      	strb	r4, [r3, #0]
}
    31fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_left_dir != dir)||(old_left_speed != speed))
    3200:	4b0a      	ldr	r3, [pc, #40]	; (322c <set_motor_left+0x5c>)
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	428b      	cmp	r3, r1
    3206:	d1ea      	bne.n	31de <set_motor_left+0xe>
    3208:	e7f5      	b.n	31f6 <set_motor_left+0x26>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
    320a:	4f06      	ldr	r7, [pc, #24]	; (3224 <set_motor_left+0x54>)
    320c:	002a      	movs	r2, r5
    320e:	2102      	movs	r1, #2
    3210:	0038      	movs	r0, r7
    3212:	4e05      	ldr	r6, [pc, #20]	; (3228 <set_motor_left+0x58>)
    3214:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
    3216:	2200      	movs	r2, #0
    3218:	2103      	movs	r1, #3
    321a:	0038      	movs	r0, r7
    321c:	47b0      	blx	r6
    321e:	e7ea      	b.n	31f6 <set_motor_left+0x26>
    3220:	20000145 	.word	0x20000145
    3224:	2000014c 	.word	0x2000014c
    3228:	00001b3d 	.word	0x00001b3d
    322c:	20000146 	.word	0x20000146

00003230 <set_motor_right>:


void set_motor_right(uint8_t dir, uint8_t speed)
{
    3230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3232:	0004      	movs	r4, r0
    3234:	000d      	movs	r5, r1
	static uint8_t old_right_dir = 0;
	static uint8_t old_right_speed = 0;
	if((old_right_dir != dir ) || (old_right_speed != speed))
    3236:	4b12      	ldr	r3, [pc, #72]	; (3280 <set_motor_right+0x50>)
    3238:	781b      	ldrb	r3, [r3, #0]
    323a:	4283      	cmp	r3, r0
    323c:	d010      	beq.n	3260 <set_motor_right+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
    323e:	2c00      	cmp	r4, #0
    3240:	d013      	beq.n	326a <set_motor_right+0x3a>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, 0x00);
    3242:	4f10      	ldr	r7, [pc, #64]	; (3284 <set_motor_right+0x54>)
    3244:	2200      	movs	r2, #0
    3246:	2100      	movs	r1, #0
    3248:	0038      	movs	r0, r7
    324a:	4e0f      	ldr	r6, [pc, #60]	; (3288 <set_motor_right+0x58>)
    324c:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, speed);
    324e:	002a      	movs	r2, r5
    3250:	2101      	movs	r1, #1
    3252:	0038      	movs	r0, r7
    3254:	47b0      	blx	r6
		}
	}
	old_right_speed     = speed;
    3256:	4b0d      	ldr	r3, [pc, #52]	; (328c <set_motor_right+0x5c>)
    3258:	701d      	strb	r5, [r3, #0]
	old_right_dir		= dir;
    325a:	4b09      	ldr	r3, [pc, #36]	; (3280 <set_motor_right+0x50>)
    325c:	701c      	strb	r4, [r3, #0]
}
    325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_right_dir != dir ) || (old_right_speed != speed))
    3260:	4b0a      	ldr	r3, [pc, #40]	; (328c <set_motor_right+0x5c>)
    3262:	781b      	ldrb	r3, [r3, #0]
    3264:	428b      	cmp	r3, r1
    3266:	d1ea      	bne.n	323e <set_motor_right+0xe>
    3268:	e7f5      	b.n	3256 <set_motor_right+0x26>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
    326a:	4f06      	ldr	r7, [pc, #24]	; (3284 <set_motor_right+0x54>)
    326c:	002a      	movs	r2, r5
    326e:	2100      	movs	r1, #0
    3270:	0038      	movs	r0, r7
    3272:	4e05      	ldr	r6, [pc, #20]	; (3288 <set_motor_right+0x58>)
    3274:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
    3276:	2200      	movs	r2, #0
    3278:	2101      	movs	r1, #1
    327a:	0038      	movs	r0, r7
    327c:	47b0      	blx	r6
    327e:	e7ea      	b.n	3256 <set_motor_right+0x26>
    3280:	20000147 	.word	0x20000147
    3284:	2000014c 	.word	0x2000014c
    3288:	00001b3d 	.word	0x00001b3d
    328c:	20000148 	.word	0x20000148

00003290 <configure_motors>:
	set_motor_right(0,0);
}


void configure_motors()
{
    3290:	b510      	push	{r4, lr}
	config_timer_waveform();
    3292:	4b01      	ldr	r3, [pc, #4]	; (3298 <configure_motors+0x8>)
    3294:	4798      	blx	r3
    3296:	bd10      	pop	{r4, pc}
    3298:	00003129 	.word	0x00003129

0000329c <testInit>:
	port_pin_set_config(LEFT_ENC_PIN, &config_port_pin);
	port_pin_set_config(RIGHT_ENC_PIN, &config_port_pin);
}

void testInit()
{
    329c:	b530      	push	{r4, r5, lr}
    329e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    32a0:	ac01      	add	r4, sp, #4
    32a2:	2301      	movs	r3, #1
    32a4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    32a6:	2200      	movs	r2, #0
    32a8:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    32aa:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PROFILE_PIN, &config_port_pin);
    32ac:	0021      	movs	r1, r4
    32ae:	2003      	movs	r0, #3
    32b0:	4d05      	ldr	r5, [pc, #20]	; (32c8 <testInit+0x2c>)
    32b2:	47a8      	blx	r5
	port_pin_set_config(PROFILE_PIN_2, &config_port_pin);
    32b4:	0021      	movs	r1, r4
    32b6:	2008      	movs	r0, #8
    32b8:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    32ba:	4b04      	ldr	r3, [pc, #16]	; (32cc <testInit+0x30>)
    32bc:	2208      	movs	r2, #8
    32be:	615a      	str	r2, [r3, #20]
    32c0:	32f8      	adds	r2, #248	; 0xf8
    32c2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PROFILE_PIN,false);
	port_pin_set_output_level(PROFILE_PIN_2,false);
}
    32c4:	b003      	add	sp, #12
    32c6:	bd30      	pop	{r4, r5, pc}
    32c8:	00000fdd 	.word	0x00000fdd
    32cc:	41004400 	.word	0x41004400

000032d0 <main>:

int main (void)
{
    32d0:	b570      	push	{r4, r5, r6, lr}
	system_init();
    32d2:	4b19      	ldr	r3, [pc, #100]	; (3338 <main+0x68>)
    32d4:	4798      	blx	r3
	delay_init();
    32d6:	4b19      	ldr	r3, [pc, #100]	; (333c <main+0x6c>)
    32d8:	4798      	blx	r3
	RGBPI55Init();
    32da:	4b19      	ldr	r3, [pc, #100]	; (3340 <main+0x70>)
    32dc:	4798      	blx	r3
	power_button_init();
    32de:	4b19      	ldr	r3, [pc, #100]	; (3344 <main+0x74>)
    32e0:	4798      	blx	r3
	
	//Configure ADC
	//configure_adc();
	
	initInterruptHandler();
    32e2:	4b19      	ldr	r3, [pc, #100]	; (3348 <main+0x78>)
    32e4:	4798      	blx	r3
	testInit();
    32e6:	4b19      	ldr	r3, [pc, #100]	; (334c <main+0x7c>)
    32e8:	4798      	blx	r3
	
	//initLineSensor();
	configureUltrasound();
    32ea:	4b19      	ldr	r3, [pc, #100]	; (3350 <main+0x80>)
    32ec:	4798      	blx	r3
	
	//switchOffMotors();
	//configureEncoders();
	
	configure_motors();
    32ee:	4b19      	ldr	r3, [pc, #100]	; (3354 <main+0x84>)
    32f0:	4798      	blx	r3
	encoders_init();
    32f2:	4b19      	ldr	r3, [pc, #100]	; (3358 <main+0x88>)
    32f4:	4798      	blx	r3
	
	spi_slave_init();
    32f6:	4b19      	ldr	r3, [pc, #100]	; (335c <main+0x8c>)
    32f8:	4798      	blx	r3
	static motor leftMotor;
	static motor rightMotor;
	
	leftMotor.direction = 0;
    32fa:	4819      	ldr	r0, [pc, #100]	; (3360 <main+0x90>)
    32fc:	2300      	movs	r3, #0
    32fe:	7043      	strb	r3, [r0, #1]
	leftMotor.speed = 100;
    3300:	2264      	movs	r2, #100	; 0x64
    3302:	7002      	strb	r2, [r0, #0]
	leftMotor.ticks = 0;
    3304:	8043      	strh	r3, [r0, #2]
	
	rightMotor.direction = 0;
    3306:	4917      	ldr	r1, [pc, #92]	; (3364 <main+0x94>)
    3308:	2200      	movs	r2, #0
    330a:	704a      	strb	r2, [r1, #1]
	rightMotor.speed = 0;
    330c:	700a      	strb	r2, [r1, #0]
	rightMotor.ticks = 0;
    330e:	804b      	strh	r3, [r1, #2]
	
	controlMotors( &leftMotor , &rightMotor);
    3310:	4b15      	ldr	r3, [pc, #84]	; (3368 <main+0x98>)
    3312:	4798      	blx	r3
	//set_motor_left(0, 255);
	//set_motor_right(0, 255);
	
	while(1)
	{
		check_power_off_button();
    3314:	4e15      	ldr	r6, [pc, #84]	; (336c <main+0x9c>)
		spi_main_loop();
    3316:	4d16      	ldr	r5, [pc, #88]	; (3370 <main+0xa0>)
		controlLoop();
    3318:	4c16      	ldr	r4, [pc, #88]	; (3374 <main+0xa4>)
		check_power_off_button();
    331a:	47b0      	blx	r6
		spi_main_loop();
    331c:	47a8      	blx	r5
		controlLoop();
    331e:	47a0      	blx	r4
		checkUltrasound();
    3320:	4b15      	ldr	r3, [pc, #84]	; (3378 <main+0xa8>)
    3322:	4798      	blx	r3
		motorControlLoop();
    3324:	4b15      	ldr	r3, [pc, #84]	; (337c <main+0xac>)
    3326:	4798      	blx	r3
		readSensors();
    3328:	4b15      	ldr	r3, [pc, #84]	; (3380 <main+0xb0>)
    332a:	4798      	blx	r3
		//control_loop_motors();
		delay_cycles_us(300);
    332c:	2096      	movs	r0, #150	; 0x96
    332e:	0040      	lsls	r0, r0, #1
    3330:	4b14      	ldr	r3, [pc, #80]	; (3384 <main+0xb4>)
    3332:	4798      	blx	r3
    3334:	e7f1      	b.n	331a <main+0x4a>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	0000290d 	.word	0x0000290d
    333c:	00000949 	.word	0x00000949
    3340:	00002b9d 	.word	0x00002b9d
    3344:	00002d15 	.word	0x00002d15
    3348:	000000ed 	.word	0x000000ed
    334c:	0000329d 	.word	0x0000329d
    3350:	00000765 	.word	0x00000765
    3354:	00003291 	.word	0x00003291
    3358:	000030fd 	.word	0x000030fd
    335c:	00000409 	.word	0x00000409
    3360:	20000198 	.word	0x20000198
    3364:	200001a4 	.word	0x200001a4
    3368:	00002ebd 	.word	0x00002ebd
    336c:	00002c91 	.word	0x00002c91
    3370:	00000859 	.word	0x00000859
    3374:	000007e9 	.word	0x000007e9
    3378:	000006f9 	.word	0x000006f9
    337c:	00002e35 	.word	0x00002e35
    3380:	000001f5 	.word	0x000001f5
    3384:	00000989 	.word	0x00000989

00003388 <__udivsi3>:
    3388:	2200      	movs	r2, #0
    338a:	0843      	lsrs	r3, r0, #1
    338c:	428b      	cmp	r3, r1
    338e:	d374      	bcc.n	347a <__udivsi3+0xf2>
    3390:	0903      	lsrs	r3, r0, #4
    3392:	428b      	cmp	r3, r1
    3394:	d35f      	bcc.n	3456 <__udivsi3+0xce>
    3396:	0a03      	lsrs	r3, r0, #8
    3398:	428b      	cmp	r3, r1
    339a:	d344      	bcc.n	3426 <__udivsi3+0x9e>
    339c:	0b03      	lsrs	r3, r0, #12
    339e:	428b      	cmp	r3, r1
    33a0:	d328      	bcc.n	33f4 <__udivsi3+0x6c>
    33a2:	0c03      	lsrs	r3, r0, #16
    33a4:	428b      	cmp	r3, r1
    33a6:	d30d      	bcc.n	33c4 <__udivsi3+0x3c>
    33a8:	22ff      	movs	r2, #255	; 0xff
    33aa:	0209      	lsls	r1, r1, #8
    33ac:	ba12      	rev	r2, r2
    33ae:	0c03      	lsrs	r3, r0, #16
    33b0:	428b      	cmp	r3, r1
    33b2:	d302      	bcc.n	33ba <__udivsi3+0x32>
    33b4:	1212      	asrs	r2, r2, #8
    33b6:	0209      	lsls	r1, r1, #8
    33b8:	d065      	beq.n	3486 <__udivsi3+0xfe>
    33ba:	0b03      	lsrs	r3, r0, #12
    33bc:	428b      	cmp	r3, r1
    33be:	d319      	bcc.n	33f4 <__udivsi3+0x6c>
    33c0:	e000      	b.n	33c4 <__udivsi3+0x3c>
    33c2:	0a09      	lsrs	r1, r1, #8
    33c4:	0bc3      	lsrs	r3, r0, #15
    33c6:	428b      	cmp	r3, r1
    33c8:	d301      	bcc.n	33ce <__udivsi3+0x46>
    33ca:	03cb      	lsls	r3, r1, #15
    33cc:	1ac0      	subs	r0, r0, r3
    33ce:	4152      	adcs	r2, r2
    33d0:	0b83      	lsrs	r3, r0, #14
    33d2:	428b      	cmp	r3, r1
    33d4:	d301      	bcc.n	33da <__udivsi3+0x52>
    33d6:	038b      	lsls	r3, r1, #14
    33d8:	1ac0      	subs	r0, r0, r3
    33da:	4152      	adcs	r2, r2
    33dc:	0b43      	lsrs	r3, r0, #13
    33de:	428b      	cmp	r3, r1
    33e0:	d301      	bcc.n	33e6 <__udivsi3+0x5e>
    33e2:	034b      	lsls	r3, r1, #13
    33e4:	1ac0      	subs	r0, r0, r3
    33e6:	4152      	adcs	r2, r2
    33e8:	0b03      	lsrs	r3, r0, #12
    33ea:	428b      	cmp	r3, r1
    33ec:	d301      	bcc.n	33f2 <__udivsi3+0x6a>
    33ee:	030b      	lsls	r3, r1, #12
    33f0:	1ac0      	subs	r0, r0, r3
    33f2:	4152      	adcs	r2, r2
    33f4:	0ac3      	lsrs	r3, r0, #11
    33f6:	428b      	cmp	r3, r1
    33f8:	d301      	bcc.n	33fe <__udivsi3+0x76>
    33fa:	02cb      	lsls	r3, r1, #11
    33fc:	1ac0      	subs	r0, r0, r3
    33fe:	4152      	adcs	r2, r2
    3400:	0a83      	lsrs	r3, r0, #10
    3402:	428b      	cmp	r3, r1
    3404:	d301      	bcc.n	340a <__udivsi3+0x82>
    3406:	028b      	lsls	r3, r1, #10
    3408:	1ac0      	subs	r0, r0, r3
    340a:	4152      	adcs	r2, r2
    340c:	0a43      	lsrs	r3, r0, #9
    340e:	428b      	cmp	r3, r1
    3410:	d301      	bcc.n	3416 <__udivsi3+0x8e>
    3412:	024b      	lsls	r3, r1, #9
    3414:	1ac0      	subs	r0, r0, r3
    3416:	4152      	adcs	r2, r2
    3418:	0a03      	lsrs	r3, r0, #8
    341a:	428b      	cmp	r3, r1
    341c:	d301      	bcc.n	3422 <__udivsi3+0x9a>
    341e:	020b      	lsls	r3, r1, #8
    3420:	1ac0      	subs	r0, r0, r3
    3422:	4152      	adcs	r2, r2
    3424:	d2cd      	bcs.n	33c2 <__udivsi3+0x3a>
    3426:	09c3      	lsrs	r3, r0, #7
    3428:	428b      	cmp	r3, r1
    342a:	d301      	bcc.n	3430 <__udivsi3+0xa8>
    342c:	01cb      	lsls	r3, r1, #7
    342e:	1ac0      	subs	r0, r0, r3
    3430:	4152      	adcs	r2, r2
    3432:	0983      	lsrs	r3, r0, #6
    3434:	428b      	cmp	r3, r1
    3436:	d301      	bcc.n	343c <__udivsi3+0xb4>
    3438:	018b      	lsls	r3, r1, #6
    343a:	1ac0      	subs	r0, r0, r3
    343c:	4152      	adcs	r2, r2
    343e:	0943      	lsrs	r3, r0, #5
    3440:	428b      	cmp	r3, r1
    3442:	d301      	bcc.n	3448 <__udivsi3+0xc0>
    3444:	014b      	lsls	r3, r1, #5
    3446:	1ac0      	subs	r0, r0, r3
    3448:	4152      	adcs	r2, r2
    344a:	0903      	lsrs	r3, r0, #4
    344c:	428b      	cmp	r3, r1
    344e:	d301      	bcc.n	3454 <__udivsi3+0xcc>
    3450:	010b      	lsls	r3, r1, #4
    3452:	1ac0      	subs	r0, r0, r3
    3454:	4152      	adcs	r2, r2
    3456:	08c3      	lsrs	r3, r0, #3
    3458:	428b      	cmp	r3, r1
    345a:	d301      	bcc.n	3460 <__udivsi3+0xd8>
    345c:	00cb      	lsls	r3, r1, #3
    345e:	1ac0      	subs	r0, r0, r3
    3460:	4152      	adcs	r2, r2
    3462:	0883      	lsrs	r3, r0, #2
    3464:	428b      	cmp	r3, r1
    3466:	d301      	bcc.n	346c <__udivsi3+0xe4>
    3468:	008b      	lsls	r3, r1, #2
    346a:	1ac0      	subs	r0, r0, r3
    346c:	4152      	adcs	r2, r2
    346e:	0843      	lsrs	r3, r0, #1
    3470:	428b      	cmp	r3, r1
    3472:	d301      	bcc.n	3478 <__udivsi3+0xf0>
    3474:	004b      	lsls	r3, r1, #1
    3476:	1ac0      	subs	r0, r0, r3
    3478:	4152      	adcs	r2, r2
    347a:	1a41      	subs	r1, r0, r1
    347c:	d200      	bcs.n	3480 <__udivsi3+0xf8>
    347e:	4601      	mov	r1, r0
    3480:	4152      	adcs	r2, r2
    3482:	4610      	mov	r0, r2
    3484:	4770      	bx	lr
    3486:	e7ff      	b.n	3488 <__udivsi3+0x100>
    3488:	b501      	push	{r0, lr}
    348a:	2000      	movs	r0, #0
    348c:	f000 f8f0 	bl	3670 <__aeabi_idiv0>
    3490:	bd02      	pop	{r1, pc}
    3492:	46c0      	nop			; (mov r8, r8)

00003494 <__aeabi_uidivmod>:
    3494:	2900      	cmp	r1, #0
    3496:	d0f7      	beq.n	3488 <__udivsi3+0x100>
    3498:	e776      	b.n	3388 <__udivsi3>
    349a:	4770      	bx	lr

0000349c <__divsi3>:
    349c:	4603      	mov	r3, r0
    349e:	430b      	orrs	r3, r1
    34a0:	d47f      	bmi.n	35a2 <__divsi3+0x106>
    34a2:	2200      	movs	r2, #0
    34a4:	0843      	lsrs	r3, r0, #1
    34a6:	428b      	cmp	r3, r1
    34a8:	d374      	bcc.n	3594 <__divsi3+0xf8>
    34aa:	0903      	lsrs	r3, r0, #4
    34ac:	428b      	cmp	r3, r1
    34ae:	d35f      	bcc.n	3570 <__divsi3+0xd4>
    34b0:	0a03      	lsrs	r3, r0, #8
    34b2:	428b      	cmp	r3, r1
    34b4:	d344      	bcc.n	3540 <__divsi3+0xa4>
    34b6:	0b03      	lsrs	r3, r0, #12
    34b8:	428b      	cmp	r3, r1
    34ba:	d328      	bcc.n	350e <__divsi3+0x72>
    34bc:	0c03      	lsrs	r3, r0, #16
    34be:	428b      	cmp	r3, r1
    34c0:	d30d      	bcc.n	34de <__divsi3+0x42>
    34c2:	22ff      	movs	r2, #255	; 0xff
    34c4:	0209      	lsls	r1, r1, #8
    34c6:	ba12      	rev	r2, r2
    34c8:	0c03      	lsrs	r3, r0, #16
    34ca:	428b      	cmp	r3, r1
    34cc:	d302      	bcc.n	34d4 <__divsi3+0x38>
    34ce:	1212      	asrs	r2, r2, #8
    34d0:	0209      	lsls	r1, r1, #8
    34d2:	d065      	beq.n	35a0 <__divsi3+0x104>
    34d4:	0b03      	lsrs	r3, r0, #12
    34d6:	428b      	cmp	r3, r1
    34d8:	d319      	bcc.n	350e <__divsi3+0x72>
    34da:	e000      	b.n	34de <__divsi3+0x42>
    34dc:	0a09      	lsrs	r1, r1, #8
    34de:	0bc3      	lsrs	r3, r0, #15
    34e0:	428b      	cmp	r3, r1
    34e2:	d301      	bcc.n	34e8 <__divsi3+0x4c>
    34e4:	03cb      	lsls	r3, r1, #15
    34e6:	1ac0      	subs	r0, r0, r3
    34e8:	4152      	adcs	r2, r2
    34ea:	0b83      	lsrs	r3, r0, #14
    34ec:	428b      	cmp	r3, r1
    34ee:	d301      	bcc.n	34f4 <__divsi3+0x58>
    34f0:	038b      	lsls	r3, r1, #14
    34f2:	1ac0      	subs	r0, r0, r3
    34f4:	4152      	adcs	r2, r2
    34f6:	0b43      	lsrs	r3, r0, #13
    34f8:	428b      	cmp	r3, r1
    34fa:	d301      	bcc.n	3500 <__divsi3+0x64>
    34fc:	034b      	lsls	r3, r1, #13
    34fe:	1ac0      	subs	r0, r0, r3
    3500:	4152      	adcs	r2, r2
    3502:	0b03      	lsrs	r3, r0, #12
    3504:	428b      	cmp	r3, r1
    3506:	d301      	bcc.n	350c <__divsi3+0x70>
    3508:	030b      	lsls	r3, r1, #12
    350a:	1ac0      	subs	r0, r0, r3
    350c:	4152      	adcs	r2, r2
    350e:	0ac3      	lsrs	r3, r0, #11
    3510:	428b      	cmp	r3, r1
    3512:	d301      	bcc.n	3518 <__divsi3+0x7c>
    3514:	02cb      	lsls	r3, r1, #11
    3516:	1ac0      	subs	r0, r0, r3
    3518:	4152      	adcs	r2, r2
    351a:	0a83      	lsrs	r3, r0, #10
    351c:	428b      	cmp	r3, r1
    351e:	d301      	bcc.n	3524 <__divsi3+0x88>
    3520:	028b      	lsls	r3, r1, #10
    3522:	1ac0      	subs	r0, r0, r3
    3524:	4152      	adcs	r2, r2
    3526:	0a43      	lsrs	r3, r0, #9
    3528:	428b      	cmp	r3, r1
    352a:	d301      	bcc.n	3530 <__divsi3+0x94>
    352c:	024b      	lsls	r3, r1, #9
    352e:	1ac0      	subs	r0, r0, r3
    3530:	4152      	adcs	r2, r2
    3532:	0a03      	lsrs	r3, r0, #8
    3534:	428b      	cmp	r3, r1
    3536:	d301      	bcc.n	353c <__divsi3+0xa0>
    3538:	020b      	lsls	r3, r1, #8
    353a:	1ac0      	subs	r0, r0, r3
    353c:	4152      	adcs	r2, r2
    353e:	d2cd      	bcs.n	34dc <__divsi3+0x40>
    3540:	09c3      	lsrs	r3, r0, #7
    3542:	428b      	cmp	r3, r1
    3544:	d301      	bcc.n	354a <__divsi3+0xae>
    3546:	01cb      	lsls	r3, r1, #7
    3548:	1ac0      	subs	r0, r0, r3
    354a:	4152      	adcs	r2, r2
    354c:	0983      	lsrs	r3, r0, #6
    354e:	428b      	cmp	r3, r1
    3550:	d301      	bcc.n	3556 <__divsi3+0xba>
    3552:	018b      	lsls	r3, r1, #6
    3554:	1ac0      	subs	r0, r0, r3
    3556:	4152      	adcs	r2, r2
    3558:	0943      	lsrs	r3, r0, #5
    355a:	428b      	cmp	r3, r1
    355c:	d301      	bcc.n	3562 <__divsi3+0xc6>
    355e:	014b      	lsls	r3, r1, #5
    3560:	1ac0      	subs	r0, r0, r3
    3562:	4152      	adcs	r2, r2
    3564:	0903      	lsrs	r3, r0, #4
    3566:	428b      	cmp	r3, r1
    3568:	d301      	bcc.n	356e <__divsi3+0xd2>
    356a:	010b      	lsls	r3, r1, #4
    356c:	1ac0      	subs	r0, r0, r3
    356e:	4152      	adcs	r2, r2
    3570:	08c3      	lsrs	r3, r0, #3
    3572:	428b      	cmp	r3, r1
    3574:	d301      	bcc.n	357a <__divsi3+0xde>
    3576:	00cb      	lsls	r3, r1, #3
    3578:	1ac0      	subs	r0, r0, r3
    357a:	4152      	adcs	r2, r2
    357c:	0883      	lsrs	r3, r0, #2
    357e:	428b      	cmp	r3, r1
    3580:	d301      	bcc.n	3586 <__divsi3+0xea>
    3582:	008b      	lsls	r3, r1, #2
    3584:	1ac0      	subs	r0, r0, r3
    3586:	4152      	adcs	r2, r2
    3588:	0843      	lsrs	r3, r0, #1
    358a:	428b      	cmp	r3, r1
    358c:	d301      	bcc.n	3592 <__divsi3+0xf6>
    358e:	004b      	lsls	r3, r1, #1
    3590:	1ac0      	subs	r0, r0, r3
    3592:	4152      	adcs	r2, r2
    3594:	1a41      	subs	r1, r0, r1
    3596:	d200      	bcs.n	359a <__divsi3+0xfe>
    3598:	4601      	mov	r1, r0
    359a:	4152      	adcs	r2, r2
    359c:	4610      	mov	r0, r2
    359e:	4770      	bx	lr
    35a0:	e05d      	b.n	365e <__divsi3+0x1c2>
    35a2:	0fca      	lsrs	r2, r1, #31
    35a4:	d000      	beq.n	35a8 <__divsi3+0x10c>
    35a6:	4249      	negs	r1, r1
    35a8:	1003      	asrs	r3, r0, #32
    35aa:	d300      	bcc.n	35ae <__divsi3+0x112>
    35ac:	4240      	negs	r0, r0
    35ae:	4053      	eors	r3, r2
    35b0:	2200      	movs	r2, #0
    35b2:	469c      	mov	ip, r3
    35b4:	0903      	lsrs	r3, r0, #4
    35b6:	428b      	cmp	r3, r1
    35b8:	d32d      	bcc.n	3616 <__divsi3+0x17a>
    35ba:	0a03      	lsrs	r3, r0, #8
    35bc:	428b      	cmp	r3, r1
    35be:	d312      	bcc.n	35e6 <__divsi3+0x14a>
    35c0:	22fc      	movs	r2, #252	; 0xfc
    35c2:	0189      	lsls	r1, r1, #6
    35c4:	ba12      	rev	r2, r2
    35c6:	0a03      	lsrs	r3, r0, #8
    35c8:	428b      	cmp	r3, r1
    35ca:	d30c      	bcc.n	35e6 <__divsi3+0x14a>
    35cc:	0189      	lsls	r1, r1, #6
    35ce:	1192      	asrs	r2, r2, #6
    35d0:	428b      	cmp	r3, r1
    35d2:	d308      	bcc.n	35e6 <__divsi3+0x14a>
    35d4:	0189      	lsls	r1, r1, #6
    35d6:	1192      	asrs	r2, r2, #6
    35d8:	428b      	cmp	r3, r1
    35da:	d304      	bcc.n	35e6 <__divsi3+0x14a>
    35dc:	0189      	lsls	r1, r1, #6
    35de:	d03a      	beq.n	3656 <__divsi3+0x1ba>
    35e0:	1192      	asrs	r2, r2, #6
    35e2:	e000      	b.n	35e6 <__divsi3+0x14a>
    35e4:	0989      	lsrs	r1, r1, #6
    35e6:	09c3      	lsrs	r3, r0, #7
    35e8:	428b      	cmp	r3, r1
    35ea:	d301      	bcc.n	35f0 <__divsi3+0x154>
    35ec:	01cb      	lsls	r3, r1, #7
    35ee:	1ac0      	subs	r0, r0, r3
    35f0:	4152      	adcs	r2, r2
    35f2:	0983      	lsrs	r3, r0, #6
    35f4:	428b      	cmp	r3, r1
    35f6:	d301      	bcc.n	35fc <__divsi3+0x160>
    35f8:	018b      	lsls	r3, r1, #6
    35fa:	1ac0      	subs	r0, r0, r3
    35fc:	4152      	adcs	r2, r2
    35fe:	0943      	lsrs	r3, r0, #5
    3600:	428b      	cmp	r3, r1
    3602:	d301      	bcc.n	3608 <__divsi3+0x16c>
    3604:	014b      	lsls	r3, r1, #5
    3606:	1ac0      	subs	r0, r0, r3
    3608:	4152      	adcs	r2, r2
    360a:	0903      	lsrs	r3, r0, #4
    360c:	428b      	cmp	r3, r1
    360e:	d301      	bcc.n	3614 <__divsi3+0x178>
    3610:	010b      	lsls	r3, r1, #4
    3612:	1ac0      	subs	r0, r0, r3
    3614:	4152      	adcs	r2, r2
    3616:	08c3      	lsrs	r3, r0, #3
    3618:	428b      	cmp	r3, r1
    361a:	d301      	bcc.n	3620 <__divsi3+0x184>
    361c:	00cb      	lsls	r3, r1, #3
    361e:	1ac0      	subs	r0, r0, r3
    3620:	4152      	adcs	r2, r2
    3622:	0883      	lsrs	r3, r0, #2
    3624:	428b      	cmp	r3, r1
    3626:	d301      	bcc.n	362c <__divsi3+0x190>
    3628:	008b      	lsls	r3, r1, #2
    362a:	1ac0      	subs	r0, r0, r3
    362c:	4152      	adcs	r2, r2
    362e:	d2d9      	bcs.n	35e4 <__divsi3+0x148>
    3630:	0843      	lsrs	r3, r0, #1
    3632:	428b      	cmp	r3, r1
    3634:	d301      	bcc.n	363a <__divsi3+0x19e>
    3636:	004b      	lsls	r3, r1, #1
    3638:	1ac0      	subs	r0, r0, r3
    363a:	4152      	adcs	r2, r2
    363c:	1a41      	subs	r1, r0, r1
    363e:	d200      	bcs.n	3642 <__divsi3+0x1a6>
    3640:	4601      	mov	r1, r0
    3642:	4663      	mov	r3, ip
    3644:	4152      	adcs	r2, r2
    3646:	105b      	asrs	r3, r3, #1
    3648:	4610      	mov	r0, r2
    364a:	d301      	bcc.n	3650 <__divsi3+0x1b4>
    364c:	4240      	negs	r0, r0
    364e:	2b00      	cmp	r3, #0
    3650:	d500      	bpl.n	3654 <__divsi3+0x1b8>
    3652:	4249      	negs	r1, r1
    3654:	4770      	bx	lr
    3656:	4663      	mov	r3, ip
    3658:	105b      	asrs	r3, r3, #1
    365a:	d300      	bcc.n	365e <__divsi3+0x1c2>
    365c:	4240      	negs	r0, r0
    365e:	b501      	push	{r0, lr}
    3660:	2000      	movs	r0, #0
    3662:	f000 f805 	bl	3670 <__aeabi_idiv0>
    3666:	bd02      	pop	{r1, pc}

00003668 <__aeabi_idivmod>:
    3668:	2900      	cmp	r1, #0
    366a:	d0f8      	beq.n	365e <__divsi3+0x1c2>
    366c:	e716      	b.n	349c <__divsi3>
    366e:	4770      	bx	lr

00003670 <__aeabi_idiv0>:
    3670:	4770      	bx	lr
    3672:	46c0      	nop			; (mov r8, r8)

00003674 <__libc_init_array>:
    3674:	b570      	push	{r4, r5, r6, lr}
    3676:	2600      	movs	r6, #0
    3678:	4d0c      	ldr	r5, [pc, #48]	; (36ac <__libc_init_array+0x38>)
    367a:	4c0d      	ldr	r4, [pc, #52]	; (36b0 <__libc_init_array+0x3c>)
    367c:	1b64      	subs	r4, r4, r5
    367e:	10a4      	asrs	r4, r4, #2
    3680:	42a6      	cmp	r6, r4
    3682:	d109      	bne.n	3698 <__libc_init_array+0x24>
    3684:	2600      	movs	r6, #0
    3686:	f000 f873 	bl	3770 <_init>
    368a:	4d0a      	ldr	r5, [pc, #40]	; (36b4 <__libc_init_array+0x40>)
    368c:	4c0a      	ldr	r4, [pc, #40]	; (36b8 <__libc_init_array+0x44>)
    368e:	1b64      	subs	r4, r4, r5
    3690:	10a4      	asrs	r4, r4, #2
    3692:	42a6      	cmp	r6, r4
    3694:	d105      	bne.n	36a2 <__libc_init_array+0x2e>
    3696:	bd70      	pop	{r4, r5, r6, pc}
    3698:	00b3      	lsls	r3, r6, #2
    369a:	58eb      	ldr	r3, [r5, r3]
    369c:	4798      	blx	r3
    369e:	3601      	adds	r6, #1
    36a0:	e7ee      	b.n	3680 <__libc_init_array+0xc>
    36a2:	00b3      	lsls	r3, r6, #2
    36a4:	58eb      	ldr	r3, [r5, r3]
    36a6:	4798      	blx	r3
    36a8:	3601      	adds	r6, #1
    36aa:	e7f2      	b.n	3692 <__libc_init_array+0x1e>
    36ac:	0000377c 	.word	0x0000377c
    36b0:	0000377c 	.word	0x0000377c
    36b4:	0000377c 	.word	0x0000377c
    36b8:	00003780 	.word	0x00003780

000036bc <memcpy>:
    36bc:	2300      	movs	r3, #0
    36be:	b510      	push	{r4, lr}
    36c0:	429a      	cmp	r2, r3
    36c2:	d100      	bne.n	36c6 <memcpy+0xa>
    36c4:	bd10      	pop	{r4, pc}
    36c6:	5ccc      	ldrb	r4, [r1, r3]
    36c8:	54c4      	strb	r4, [r0, r3]
    36ca:	3301      	adds	r3, #1
    36cc:	e7f8      	b.n	36c0 <memcpy+0x4>

000036ce <memset>:
    36ce:	0003      	movs	r3, r0
    36d0:	1882      	adds	r2, r0, r2
    36d2:	4293      	cmp	r3, r2
    36d4:	d100      	bne.n	36d8 <memset+0xa>
    36d6:	4770      	bx	lr
    36d8:	7019      	strb	r1, [r3, #0]
    36da:	3301      	adds	r3, #1
    36dc:	e7f9      	b.n	36d2 <memset+0x4>
	...

000036e0 <tc_interrupt_vectors.12389>:
    36e0:	0e0d 0000 0800 4200 0c00 4200 1000 4200     .......B...B...B

000036f0 <_tcc_intflag>:
    36f0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    3700:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    3710:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00003720 <SPIDataConertConsArray>:
    3720:	8e88 eee8 21b2 0000 21ae 0000 21ae 0000     .....!...!...!..
    3730:	2210 0000 2210 0000 21c6 0000 21b8 0000     ."..."...!...!..
    3740:	21cc 0000 21fe 0000 2394 0000 2374 0000     .!...!...#..t#..
    3750:	2374 0000 2400 0000 2386 0000 23a2 0000     t#...$...#...#..
    3760:	2378 0000 23b0 0000 23f0 0000               x#...#...#..

0000376c <tc_interrupt_vectors.12389>:
    376c:	0e0d 0000                                   ....

00003770 <_init>:
    3770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3776:	bc08      	pop	{r3}
    3778:	469e      	mov	lr, r3
    377a:	4770      	bx	lr

0000377c <__init_array_start>:
    377c:	000000b5 	.word	0x000000b5

00003780 <_fini>:
    3780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3786:	bc08      	pop	{r3}
    3788:	469e      	mov	lr, r3
    378a:	4770      	bx	lr

0000378c <__fini_array_start>:
    378c:	0000008d 	.word	0x0000008d
